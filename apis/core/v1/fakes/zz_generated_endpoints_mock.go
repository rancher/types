// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1a "github.com/rancher/types/apis/core/v1"
	v1 "k8s.io/api/core/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockEndpointsListerMockGet  sync.RWMutex
	lockEndpointsListerMockList sync.RWMutex
)

// Ensure, that EndpointsListerMock does implement EndpointsLister.
// If this is not the case, regenerate this file with moq.
var _ v1a.EndpointsLister = &EndpointsListerMock{}

// EndpointsListerMock is a mock implementation of EndpointsLister.
//
//     func TestSomethingThatUsesEndpointsLister(t *testing.T) {
//
//         // make and configure a mocked EndpointsLister
//         mockedEndpointsLister := &EndpointsListerMock{
//             GetFunc: func(namespace string, name string) (*v1.Endpoints, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1.Endpoints, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedEndpointsLister in code that requires EndpointsLister
//         // and then make assertions.
//
//     }
type EndpointsListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1.Endpoints, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1.Endpoints, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *EndpointsListerMock) Get(namespace string, name string) (*v1.Endpoints, error) {
	if mock.GetFunc == nil {
		panic("EndpointsListerMock.GetFunc: method is nil but EndpointsLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockEndpointsListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockEndpointsListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedEndpointsLister.GetCalls())
func (mock *EndpointsListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockEndpointsListerMockGet.RLock()
	calls = mock.calls.Get
	lockEndpointsListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *EndpointsListerMock) List(namespace string, selector labels.Selector) ([]*v1.Endpoints, error) {
	if mock.ListFunc == nil {
		panic("EndpointsListerMock.ListFunc: method is nil but EndpointsLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockEndpointsListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockEndpointsListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedEndpointsLister.ListCalls())
func (mock *EndpointsListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockEndpointsListerMockList.RLock()
	calls = mock.calls.List
	lockEndpointsListerMockList.RUnlock()
	return calls
}

var (
	lockEndpointsControllerMockAddClusterScopedHandler sync.RWMutex
	lockEndpointsControllerMockAddFeatureHandler       sync.RWMutex
	lockEndpointsControllerMockAddHandler              sync.RWMutex
	lockEndpointsControllerMockEnqueue                 sync.RWMutex
	lockEndpointsControllerMockGeneric                 sync.RWMutex
	lockEndpointsControllerMockInformer                sync.RWMutex
	lockEndpointsControllerMockLister                  sync.RWMutex
	lockEndpointsControllerMockStart                   sync.RWMutex
	lockEndpointsControllerMockSync                    sync.RWMutex
)

// Ensure, that EndpointsControllerMock does implement EndpointsController.
// If this is not the case, regenerate this file with moq.
var _ v1a.EndpointsController = &EndpointsControllerMock{}

// EndpointsControllerMock is a mock implementation of EndpointsController.
//
//     func TestSomethingThatUsesEndpointsController(t *testing.T) {
//
//         // make and configure a mocked EndpointsController
//         mockedEndpointsController := &EndpointsControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1a.EndpointsHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.EndpointsHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1a.EndpointsHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1a.EndpointsLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedEndpointsController in code that requires EndpointsController
//         // and then make assertions.
//
//     }
type EndpointsControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1a.EndpointsHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.EndpointsHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1a.EndpointsHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1a.EndpointsLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1a.EndpointsHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.EndpointsHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1a.EndpointsHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *EndpointsControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1a.EndpointsHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("EndpointsControllerMock.AddClusterScopedHandlerFunc: method is nil but EndpointsController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.EndpointsHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockEndpointsControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockEndpointsControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedEndpointsController.AddClusterScopedHandlerCalls())
func (mock *EndpointsControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1a.EndpointsHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.EndpointsHandlerFunc
	}
	lockEndpointsControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockEndpointsControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *EndpointsControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.EndpointsHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("EndpointsControllerMock.AddFeatureHandlerFunc: method is nil but EndpointsController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.EndpointsHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockEndpointsControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockEndpointsControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedEndpointsController.AddFeatureHandlerCalls())
func (mock *EndpointsControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1a.EndpointsHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.EndpointsHandlerFunc
	}
	lockEndpointsControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockEndpointsControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *EndpointsControllerMock) AddHandler(ctx context.Context, name string, handler v1a.EndpointsHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("EndpointsControllerMock.AddHandlerFunc: method is nil but EndpointsController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1a.EndpointsHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockEndpointsControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockEndpointsControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedEndpointsController.AddHandlerCalls())
func (mock *EndpointsControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1a.EndpointsHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1a.EndpointsHandlerFunc
	}
	lockEndpointsControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockEndpointsControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *EndpointsControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("EndpointsControllerMock.EnqueueFunc: method is nil but EndpointsController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockEndpointsControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockEndpointsControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedEndpointsController.EnqueueCalls())
func (mock *EndpointsControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockEndpointsControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockEndpointsControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *EndpointsControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("EndpointsControllerMock.GenericFunc: method is nil but EndpointsController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockEndpointsControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockEndpointsControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedEndpointsController.GenericCalls())
func (mock *EndpointsControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockEndpointsControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockEndpointsControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *EndpointsControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("EndpointsControllerMock.InformerFunc: method is nil but EndpointsController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockEndpointsControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockEndpointsControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedEndpointsController.InformerCalls())
func (mock *EndpointsControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockEndpointsControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockEndpointsControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *EndpointsControllerMock) Lister() v1a.EndpointsLister {
	if mock.ListerFunc == nil {
		panic("EndpointsControllerMock.ListerFunc: method is nil but EndpointsController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockEndpointsControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockEndpointsControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedEndpointsController.ListerCalls())
func (mock *EndpointsControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockEndpointsControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockEndpointsControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *EndpointsControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("EndpointsControllerMock.StartFunc: method is nil but EndpointsController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockEndpointsControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockEndpointsControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedEndpointsController.StartCalls())
func (mock *EndpointsControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockEndpointsControllerMockStart.RLock()
	calls = mock.calls.Start
	lockEndpointsControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *EndpointsControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("EndpointsControllerMock.SyncFunc: method is nil but EndpointsController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockEndpointsControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockEndpointsControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedEndpointsController.SyncCalls())
func (mock *EndpointsControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockEndpointsControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockEndpointsControllerMockSync.RUnlock()
	return calls
}

var (
	lockEndpointsInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockEndpointsInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockEndpointsInterfaceMockAddFeatureHandler         sync.RWMutex
	lockEndpointsInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockEndpointsInterfaceMockAddHandler                sync.RWMutex
	lockEndpointsInterfaceMockAddLifecycle              sync.RWMutex
	lockEndpointsInterfaceMockController                sync.RWMutex
	lockEndpointsInterfaceMockCreate                    sync.RWMutex
	lockEndpointsInterfaceMockDelete                    sync.RWMutex
	lockEndpointsInterfaceMockDeleteCollection          sync.RWMutex
	lockEndpointsInterfaceMockDeleteNamespaced          sync.RWMutex
	lockEndpointsInterfaceMockGet                       sync.RWMutex
	lockEndpointsInterfaceMockGetNamespaced             sync.RWMutex
	lockEndpointsInterfaceMockList                      sync.RWMutex
	lockEndpointsInterfaceMockObjectClient              sync.RWMutex
	lockEndpointsInterfaceMockUpdate                    sync.RWMutex
	lockEndpointsInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that EndpointsInterfaceMock does implement EndpointsInterface.
// If this is not the case, regenerate this file with moq.
var _ v1a.EndpointsInterface = &EndpointsInterfaceMock{}

// EndpointsInterfaceMock is a mock implementation of EndpointsInterface.
//
//     func TestSomethingThatUsesEndpointsInterface(t *testing.T) {
//
//         // make and configure a mocked EndpointsInterface
//         mockedEndpointsInterface := &EndpointsInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1a.EndpointsHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1a.EndpointsLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.EndpointsHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.EndpointsLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1a.EndpointsHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1a.EndpointsLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1a.EndpointsController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1.Endpoints) (*v1.Endpoints, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1b.GetOptions) (*v1.Endpoints, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1b.GetOptions) (*v1.Endpoints, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.EndpointsList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1.Endpoints) (*v1.Endpoints, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedEndpointsInterface in code that requires EndpointsInterface
//         // and then make assertions.
//
//     }
type EndpointsInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1a.EndpointsHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1a.EndpointsLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.EndpointsHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.EndpointsLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1a.EndpointsHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1a.EndpointsLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1a.EndpointsController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1.Endpoints) (*v1.Endpoints, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1b.GetOptions) (*v1.Endpoints, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1b.GetOptions) (*v1.Endpoints, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.EndpointsList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1.Endpoints) (*v1.Endpoints, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1a.EndpointsHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.EndpointsLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.EndpointsHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.EndpointsLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.EndpointsHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.EndpointsLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1.Endpoints
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1b.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1b.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1.Endpoints
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *EndpointsInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1a.EndpointsHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("EndpointsInterfaceMock.AddClusterScopedHandlerFunc: method is nil but EndpointsInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.EndpointsHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockEndpointsInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockEndpointsInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedEndpointsInterface.AddClusterScopedHandlerCalls())
func (mock *EndpointsInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1a.EndpointsHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.EndpointsHandlerFunc
	}
	lockEndpointsInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockEndpointsInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *EndpointsInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1a.EndpointsLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("EndpointsInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but EndpointsInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.EndpointsLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockEndpointsInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockEndpointsInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedEndpointsInterface.AddClusterScopedLifecycleCalls())
func (mock *EndpointsInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1a.EndpointsLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.EndpointsLifecycle
	}
	lockEndpointsInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockEndpointsInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *EndpointsInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.EndpointsHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("EndpointsInterfaceMock.AddFeatureHandlerFunc: method is nil but EndpointsInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.EndpointsHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockEndpointsInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockEndpointsInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedEndpointsInterface.AddFeatureHandlerCalls())
func (mock *EndpointsInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1a.EndpointsHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.EndpointsHandlerFunc
	}
	lockEndpointsInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockEndpointsInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *EndpointsInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.EndpointsLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("EndpointsInterfaceMock.AddFeatureLifecycleFunc: method is nil but EndpointsInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1a.EndpointsLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockEndpointsInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockEndpointsInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedEndpointsInterface.AddFeatureLifecycleCalls())
func (mock *EndpointsInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v1a.EndpointsLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1a.EndpointsLifecycle
	}
	lockEndpointsInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockEndpointsInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *EndpointsInterfaceMock) AddHandler(ctx context.Context, name string, sync v1a.EndpointsHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("EndpointsInterfaceMock.AddHandlerFunc: method is nil but EndpointsInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1a.EndpointsHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockEndpointsInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockEndpointsInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedEndpointsInterface.AddHandlerCalls())
func (mock *EndpointsInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1a.EndpointsHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1a.EndpointsHandlerFunc
	}
	lockEndpointsInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockEndpointsInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *EndpointsInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1a.EndpointsLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("EndpointsInterfaceMock.AddLifecycleFunc: method is nil but EndpointsInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.EndpointsLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockEndpointsInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockEndpointsInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedEndpointsInterface.AddLifecycleCalls())
func (mock *EndpointsInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1a.EndpointsLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.EndpointsLifecycle
	}
	lockEndpointsInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockEndpointsInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *EndpointsInterfaceMock) Controller() v1a.EndpointsController {
	if mock.ControllerFunc == nil {
		panic("EndpointsInterfaceMock.ControllerFunc: method is nil but EndpointsInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockEndpointsInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockEndpointsInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedEndpointsInterface.ControllerCalls())
func (mock *EndpointsInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockEndpointsInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockEndpointsInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *EndpointsInterfaceMock) Create(in1 *v1.Endpoints) (*v1.Endpoints, error) {
	if mock.CreateFunc == nil {
		panic("EndpointsInterfaceMock.CreateFunc: method is nil but EndpointsInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1.Endpoints
	}{
		In1: in1,
	}
	lockEndpointsInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockEndpointsInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedEndpointsInterface.CreateCalls())
func (mock *EndpointsInterfaceMock) CreateCalls() []struct {
	In1 *v1.Endpoints
} {
	var calls []struct {
		In1 *v1.Endpoints
	}
	lockEndpointsInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockEndpointsInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *EndpointsInterfaceMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("EndpointsInterfaceMock.DeleteFunc: method is nil but EndpointsInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockEndpointsInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockEndpointsInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedEndpointsInterface.DeleteCalls())
func (mock *EndpointsInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockEndpointsInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockEndpointsInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *EndpointsInterfaceMock) DeleteCollection(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("EndpointsInterfaceMock.DeleteCollectionFunc: method is nil but EndpointsInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockEndpointsInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockEndpointsInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedEndpointsInterface.DeleteCollectionCalls())
func (mock *EndpointsInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1b.DeleteOptions
	ListOpts   v1b.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}
	lockEndpointsInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockEndpointsInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *EndpointsInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("EndpointsInterfaceMock.DeleteNamespacedFunc: method is nil but EndpointsInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockEndpointsInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockEndpointsInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedEndpointsInterface.DeleteNamespacedCalls())
func (mock *EndpointsInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockEndpointsInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockEndpointsInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *EndpointsInterfaceMock) Get(name string, opts v1b.GetOptions) (*v1.Endpoints, error) {
	if mock.GetFunc == nil {
		panic("EndpointsInterfaceMock.GetFunc: method is nil but EndpointsInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1b.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockEndpointsInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockEndpointsInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedEndpointsInterface.GetCalls())
func (mock *EndpointsInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1b.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1b.GetOptions
	}
	lockEndpointsInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockEndpointsInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *EndpointsInterfaceMock) GetNamespaced(namespace string, name string, opts v1b.GetOptions) (*v1.Endpoints, error) {
	if mock.GetNamespacedFunc == nil {
		panic("EndpointsInterfaceMock.GetNamespacedFunc: method is nil but EndpointsInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockEndpointsInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockEndpointsInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedEndpointsInterface.GetNamespacedCalls())
func (mock *EndpointsInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}
	lockEndpointsInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockEndpointsInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *EndpointsInterfaceMock) List(opts v1b.ListOptions) (*v1a.EndpointsList, error) {
	if mock.ListFunc == nil {
		panic("EndpointsInterfaceMock.ListFunc: method is nil but EndpointsInterface.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockEndpointsInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockEndpointsInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedEndpointsInterface.ListCalls())
func (mock *EndpointsInterfaceMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockEndpointsInterfaceMockList.RLock()
	calls = mock.calls.List
	lockEndpointsInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *EndpointsInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("EndpointsInterfaceMock.ObjectClientFunc: method is nil but EndpointsInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockEndpointsInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockEndpointsInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedEndpointsInterface.ObjectClientCalls())
func (mock *EndpointsInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockEndpointsInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockEndpointsInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *EndpointsInterfaceMock) Update(in1 *v1.Endpoints) (*v1.Endpoints, error) {
	if mock.UpdateFunc == nil {
		panic("EndpointsInterfaceMock.UpdateFunc: method is nil but EndpointsInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1.Endpoints
	}{
		In1: in1,
	}
	lockEndpointsInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockEndpointsInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedEndpointsInterface.UpdateCalls())
func (mock *EndpointsInterfaceMock) UpdateCalls() []struct {
	In1 *v1.Endpoints
} {
	var calls []struct {
		In1 *v1.Endpoints
	}
	lockEndpointsInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockEndpointsInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *EndpointsInterfaceMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("EndpointsInterfaceMock.WatchFunc: method is nil but EndpointsInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockEndpointsInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockEndpointsInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedEndpointsInterface.WatchCalls())
func (mock *EndpointsInterfaceMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockEndpointsInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockEndpointsInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockEndpointsGetterMockEndpoints sync.RWMutex
)

// Ensure, that EndpointsGetterMock does implement EndpointsGetter.
// If this is not the case, regenerate this file with moq.
var _ v1a.EndpointsGetter = &EndpointsGetterMock{}

// EndpointsGetterMock is a mock implementation of EndpointsGetter.
//
//     func TestSomethingThatUsesEndpointsGetter(t *testing.T) {
//
//         // make and configure a mocked EndpointsGetter
//         mockedEndpointsGetter := &EndpointsGetterMock{
//             EndpointsFunc: func(namespace string) v1a.EndpointsInterface {
// 	               panic("mock out the Endpoints method")
//             },
//         }
//
//         // use mockedEndpointsGetter in code that requires EndpointsGetter
//         // and then make assertions.
//
//     }
type EndpointsGetterMock struct {
	// EndpointsFunc mocks the Endpoints method.
	EndpointsFunc func(namespace string) v1a.EndpointsInterface

	// calls tracks calls to the methods.
	calls struct {
		// Endpoints holds details about calls to the Endpoints method.
		Endpoints []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// Endpoints calls EndpointsFunc.
func (mock *EndpointsGetterMock) Endpoints(namespace string) v1a.EndpointsInterface {
	if mock.EndpointsFunc == nil {
		panic("EndpointsGetterMock.EndpointsFunc: method is nil but EndpointsGetter.Endpoints was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockEndpointsGetterMockEndpoints.Lock()
	mock.calls.Endpoints = append(mock.calls.Endpoints, callInfo)
	lockEndpointsGetterMockEndpoints.Unlock()
	return mock.EndpointsFunc(namespace)
}

// EndpointsCalls gets all the calls that were made to Endpoints.
// Check the length with:
//     len(mockedEndpointsGetter.EndpointsCalls())
func (mock *EndpointsGetterMock) EndpointsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockEndpointsGetterMockEndpoints.RLock()
	calls = mock.calls.Endpoints
	lockEndpointsGetterMockEndpoints.RUnlock()
	return calls
}
