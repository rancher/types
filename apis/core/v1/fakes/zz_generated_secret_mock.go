// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1a "github.com/rancher/types/apis/core/v1"
	v1 "k8s.io/api/core/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockSecretListerMockGet  sync.RWMutex
	lockSecretListerMockList sync.RWMutex
)

// Ensure, that SecretListerMock does implement SecretLister.
// If this is not the case, regenerate this file with moq.
var _ v1a.SecretLister = &SecretListerMock{}

// SecretListerMock is a mock implementation of SecretLister.
//
//     func TestSomethingThatUsesSecretLister(t *testing.T) {
//
//         // make and configure a mocked SecretLister
//         mockedSecretLister := &SecretListerMock{
//             GetFunc: func(namespace string, name string) (*v1.Secret, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1.Secret, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedSecretLister in code that requires SecretLister
//         // and then make assertions.
//
//     }
type SecretListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1.Secret, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1.Secret, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *SecretListerMock) Get(namespace string, name string) (*v1.Secret, error) {
	if mock.GetFunc == nil {
		panic("SecretListerMock.GetFunc: method is nil but SecretLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockSecretListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockSecretListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedSecretLister.GetCalls())
func (mock *SecretListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockSecretListerMockGet.RLock()
	calls = mock.calls.Get
	lockSecretListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *SecretListerMock) List(namespace string, selector labels.Selector) ([]*v1.Secret, error) {
	if mock.ListFunc == nil {
		panic("SecretListerMock.ListFunc: method is nil but SecretLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockSecretListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockSecretListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedSecretLister.ListCalls())
func (mock *SecretListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockSecretListerMockList.RLock()
	calls = mock.calls.List
	lockSecretListerMockList.RUnlock()
	return calls
}

var (
	lockSecretControllerMockAddClusterScopedHandler sync.RWMutex
	lockSecretControllerMockAddFeatureHandler       sync.RWMutex
	lockSecretControllerMockAddHandler              sync.RWMutex
	lockSecretControllerMockEnqueue                 sync.RWMutex
	lockSecretControllerMockGeneric                 sync.RWMutex
	lockSecretControllerMockInformer                sync.RWMutex
	lockSecretControllerMockLister                  sync.RWMutex
	lockSecretControllerMockStart                   sync.RWMutex
	lockSecretControllerMockSync                    sync.RWMutex
)

// Ensure, that SecretControllerMock does implement SecretController.
// If this is not the case, regenerate this file with moq.
var _ v1a.SecretController = &SecretControllerMock{}

// SecretControllerMock is a mock implementation of SecretController.
//
//     func TestSomethingThatUsesSecretController(t *testing.T) {
//
//         // make and configure a mocked SecretController
//         mockedSecretController := &SecretControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1a.SecretHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.SecretHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1a.SecretHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1a.SecretLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedSecretController in code that requires SecretController
//         // and then make assertions.
//
//     }
type SecretControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1a.SecretHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.SecretHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1a.SecretHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1a.SecretLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1a.SecretHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.SecretHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1a.SecretHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *SecretControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1a.SecretHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("SecretControllerMock.AddClusterScopedHandlerFunc: method is nil but SecretController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.SecretHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockSecretControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockSecretControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedSecretController.AddClusterScopedHandlerCalls())
func (mock *SecretControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1a.SecretHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.SecretHandlerFunc
	}
	lockSecretControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockSecretControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *SecretControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.SecretHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("SecretControllerMock.AddFeatureHandlerFunc: method is nil but SecretController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.SecretHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockSecretControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockSecretControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedSecretController.AddFeatureHandlerCalls())
func (mock *SecretControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1a.SecretHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.SecretHandlerFunc
	}
	lockSecretControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockSecretControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *SecretControllerMock) AddHandler(ctx context.Context, name string, handler v1a.SecretHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("SecretControllerMock.AddHandlerFunc: method is nil but SecretController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1a.SecretHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockSecretControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockSecretControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedSecretController.AddHandlerCalls())
func (mock *SecretControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1a.SecretHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1a.SecretHandlerFunc
	}
	lockSecretControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockSecretControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *SecretControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("SecretControllerMock.EnqueueFunc: method is nil but SecretController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockSecretControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockSecretControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedSecretController.EnqueueCalls())
func (mock *SecretControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockSecretControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockSecretControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *SecretControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("SecretControllerMock.GenericFunc: method is nil but SecretController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockSecretControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockSecretControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedSecretController.GenericCalls())
func (mock *SecretControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockSecretControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockSecretControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *SecretControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("SecretControllerMock.InformerFunc: method is nil but SecretController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockSecretControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockSecretControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedSecretController.InformerCalls())
func (mock *SecretControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockSecretControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockSecretControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *SecretControllerMock) Lister() v1a.SecretLister {
	if mock.ListerFunc == nil {
		panic("SecretControllerMock.ListerFunc: method is nil but SecretController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockSecretControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockSecretControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedSecretController.ListerCalls())
func (mock *SecretControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockSecretControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockSecretControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *SecretControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("SecretControllerMock.StartFunc: method is nil but SecretController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockSecretControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockSecretControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedSecretController.StartCalls())
func (mock *SecretControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockSecretControllerMockStart.RLock()
	calls = mock.calls.Start
	lockSecretControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *SecretControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("SecretControllerMock.SyncFunc: method is nil but SecretController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockSecretControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockSecretControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedSecretController.SyncCalls())
func (mock *SecretControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockSecretControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockSecretControllerMockSync.RUnlock()
	return calls
}

var (
	lockSecretInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockSecretInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockSecretInterfaceMockAddFeatureHandler         sync.RWMutex
	lockSecretInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockSecretInterfaceMockAddHandler                sync.RWMutex
	lockSecretInterfaceMockAddLifecycle              sync.RWMutex
	lockSecretInterfaceMockController                sync.RWMutex
	lockSecretInterfaceMockCreate                    sync.RWMutex
	lockSecretInterfaceMockDelete                    sync.RWMutex
	lockSecretInterfaceMockDeleteCollection          sync.RWMutex
	lockSecretInterfaceMockDeleteNamespaced          sync.RWMutex
	lockSecretInterfaceMockGet                       sync.RWMutex
	lockSecretInterfaceMockGetNamespaced             sync.RWMutex
	lockSecretInterfaceMockList                      sync.RWMutex
	lockSecretInterfaceMockObjectClient              sync.RWMutex
	lockSecretInterfaceMockUpdate                    sync.RWMutex
	lockSecretInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that SecretInterfaceMock does implement SecretInterface.
// If this is not the case, regenerate this file with moq.
var _ v1a.SecretInterface = &SecretInterfaceMock{}

// SecretInterfaceMock is a mock implementation of SecretInterface.
//
//     func TestSomethingThatUsesSecretInterface(t *testing.T) {
//
//         // make and configure a mocked SecretInterface
//         mockedSecretInterface := &SecretInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1a.SecretHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1a.SecretLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.SecretHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.SecretLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1a.SecretHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1a.SecretLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1a.SecretController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1.Secret) (*v1.Secret, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1b.GetOptions) (*v1.Secret, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1b.GetOptions) (*v1.Secret, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.SecretList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1.Secret) (*v1.Secret, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedSecretInterface in code that requires SecretInterface
//         // and then make assertions.
//
//     }
type SecretInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1a.SecretHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1a.SecretLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.SecretHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.SecretLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1a.SecretHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1a.SecretLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1a.SecretController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1.Secret) (*v1.Secret, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1b.GetOptions) (*v1.Secret, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1b.GetOptions) (*v1.Secret, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.SecretList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1.Secret) (*v1.Secret, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1a.SecretHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.SecretLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.SecretHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.SecretLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.SecretHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.SecretLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1.Secret
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1b.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1b.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1.Secret
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *SecretInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1a.SecretHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("SecretInterfaceMock.AddClusterScopedHandlerFunc: method is nil but SecretInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.SecretHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockSecretInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockSecretInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedSecretInterface.AddClusterScopedHandlerCalls())
func (mock *SecretInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1a.SecretHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.SecretHandlerFunc
	}
	lockSecretInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockSecretInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *SecretInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1a.SecretLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("SecretInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but SecretInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.SecretLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockSecretInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockSecretInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedSecretInterface.AddClusterScopedLifecycleCalls())
func (mock *SecretInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1a.SecretLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.SecretLifecycle
	}
	lockSecretInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockSecretInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *SecretInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.SecretHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("SecretInterfaceMock.AddFeatureHandlerFunc: method is nil but SecretInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.SecretHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockSecretInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockSecretInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedSecretInterface.AddFeatureHandlerCalls())
func (mock *SecretInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1a.SecretHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.SecretHandlerFunc
	}
	lockSecretInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockSecretInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *SecretInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.SecretLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("SecretInterfaceMock.AddFeatureLifecycleFunc: method is nil but SecretInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1a.SecretLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockSecretInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockSecretInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedSecretInterface.AddFeatureLifecycleCalls())
func (mock *SecretInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v1a.SecretLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1a.SecretLifecycle
	}
	lockSecretInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockSecretInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *SecretInterfaceMock) AddHandler(ctx context.Context, name string, sync v1a.SecretHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("SecretInterfaceMock.AddHandlerFunc: method is nil but SecretInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1a.SecretHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockSecretInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockSecretInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedSecretInterface.AddHandlerCalls())
func (mock *SecretInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1a.SecretHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1a.SecretHandlerFunc
	}
	lockSecretInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockSecretInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *SecretInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1a.SecretLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("SecretInterfaceMock.AddLifecycleFunc: method is nil but SecretInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.SecretLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockSecretInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockSecretInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedSecretInterface.AddLifecycleCalls())
func (mock *SecretInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1a.SecretLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.SecretLifecycle
	}
	lockSecretInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockSecretInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *SecretInterfaceMock) Controller() v1a.SecretController {
	if mock.ControllerFunc == nil {
		panic("SecretInterfaceMock.ControllerFunc: method is nil but SecretInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockSecretInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockSecretInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedSecretInterface.ControllerCalls())
func (mock *SecretInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockSecretInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockSecretInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *SecretInterfaceMock) Create(in1 *v1.Secret) (*v1.Secret, error) {
	if mock.CreateFunc == nil {
		panic("SecretInterfaceMock.CreateFunc: method is nil but SecretInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1.Secret
	}{
		In1: in1,
	}
	lockSecretInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockSecretInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedSecretInterface.CreateCalls())
func (mock *SecretInterfaceMock) CreateCalls() []struct {
	In1 *v1.Secret
} {
	var calls []struct {
		In1 *v1.Secret
	}
	lockSecretInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockSecretInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *SecretInterfaceMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("SecretInterfaceMock.DeleteFunc: method is nil but SecretInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockSecretInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockSecretInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedSecretInterface.DeleteCalls())
func (mock *SecretInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockSecretInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockSecretInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *SecretInterfaceMock) DeleteCollection(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("SecretInterfaceMock.DeleteCollectionFunc: method is nil but SecretInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockSecretInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockSecretInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedSecretInterface.DeleteCollectionCalls())
func (mock *SecretInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1b.DeleteOptions
	ListOpts   v1b.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}
	lockSecretInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockSecretInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *SecretInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("SecretInterfaceMock.DeleteNamespacedFunc: method is nil but SecretInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockSecretInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockSecretInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedSecretInterface.DeleteNamespacedCalls())
func (mock *SecretInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockSecretInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockSecretInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *SecretInterfaceMock) Get(name string, opts v1b.GetOptions) (*v1.Secret, error) {
	if mock.GetFunc == nil {
		panic("SecretInterfaceMock.GetFunc: method is nil but SecretInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1b.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockSecretInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockSecretInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedSecretInterface.GetCalls())
func (mock *SecretInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1b.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1b.GetOptions
	}
	lockSecretInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockSecretInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *SecretInterfaceMock) GetNamespaced(namespace string, name string, opts v1b.GetOptions) (*v1.Secret, error) {
	if mock.GetNamespacedFunc == nil {
		panic("SecretInterfaceMock.GetNamespacedFunc: method is nil but SecretInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockSecretInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockSecretInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedSecretInterface.GetNamespacedCalls())
func (mock *SecretInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}
	lockSecretInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockSecretInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *SecretInterfaceMock) List(opts v1b.ListOptions) (*v1a.SecretList, error) {
	if mock.ListFunc == nil {
		panic("SecretInterfaceMock.ListFunc: method is nil but SecretInterface.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockSecretInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockSecretInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedSecretInterface.ListCalls())
func (mock *SecretInterfaceMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockSecretInterfaceMockList.RLock()
	calls = mock.calls.List
	lockSecretInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *SecretInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("SecretInterfaceMock.ObjectClientFunc: method is nil but SecretInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockSecretInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockSecretInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedSecretInterface.ObjectClientCalls())
func (mock *SecretInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockSecretInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockSecretInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *SecretInterfaceMock) Update(in1 *v1.Secret) (*v1.Secret, error) {
	if mock.UpdateFunc == nil {
		panic("SecretInterfaceMock.UpdateFunc: method is nil but SecretInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1.Secret
	}{
		In1: in1,
	}
	lockSecretInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockSecretInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedSecretInterface.UpdateCalls())
func (mock *SecretInterfaceMock) UpdateCalls() []struct {
	In1 *v1.Secret
} {
	var calls []struct {
		In1 *v1.Secret
	}
	lockSecretInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockSecretInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *SecretInterfaceMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("SecretInterfaceMock.WatchFunc: method is nil but SecretInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockSecretInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockSecretInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedSecretInterface.WatchCalls())
func (mock *SecretInterfaceMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockSecretInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockSecretInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockSecretsGetterMockSecrets sync.RWMutex
)

// Ensure, that SecretsGetterMock does implement SecretsGetter.
// If this is not the case, regenerate this file with moq.
var _ v1a.SecretsGetter = &SecretsGetterMock{}

// SecretsGetterMock is a mock implementation of SecretsGetter.
//
//     func TestSomethingThatUsesSecretsGetter(t *testing.T) {
//
//         // make and configure a mocked SecretsGetter
//         mockedSecretsGetter := &SecretsGetterMock{
//             SecretsFunc: func(namespace string) v1a.SecretInterface {
// 	               panic("mock out the Secrets method")
//             },
//         }
//
//         // use mockedSecretsGetter in code that requires SecretsGetter
//         // and then make assertions.
//
//     }
type SecretsGetterMock struct {
	// SecretsFunc mocks the Secrets method.
	SecretsFunc func(namespace string) v1a.SecretInterface

	// calls tracks calls to the methods.
	calls struct {
		// Secrets holds details about calls to the Secrets method.
		Secrets []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// Secrets calls SecretsFunc.
func (mock *SecretsGetterMock) Secrets(namespace string) v1a.SecretInterface {
	if mock.SecretsFunc == nil {
		panic("SecretsGetterMock.SecretsFunc: method is nil but SecretsGetter.Secrets was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockSecretsGetterMockSecrets.Lock()
	mock.calls.Secrets = append(mock.calls.Secrets, callInfo)
	lockSecretsGetterMockSecrets.Unlock()
	return mock.SecretsFunc(namespace)
}

// SecretsCalls gets all the calls that were made to Secrets.
// Check the length with:
//     len(mockedSecretsGetter.SecretsCalls())
func (mock *SecretsGetterMock) SecretsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockSecretsGetterMockSecrets.RLock()
	calls = mock.calls.Secrets
	lockSecretsGetterMockSecrets.RUnlock()
	return calls
}
