// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1a "github.com/rancher/types/apis/core/v1"
	v1 "k8s.io/api/core/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockPersistentVolumeClaimListerMockGet  sync.RWMutex
	lockPersistentVolumeClaimListerMockList sync.RWMutex
)

// Ensure, that PersistentVolumeClaimListerMock does implement PersistentVolumeClaimLister.
// If this is not the case, regenerate this file with moq.
var _ v1a.PersistentVolumeClaimLister = &PersistentVolumeClaimListerMock{}

// PersistentVolumeClaimListerMock is a mock implementation of PersistentVolumeClaimLister.
//
//     func TestSomethingThatUsesPersistentVolumeClaimLister(t *testing.T) {
//
//         // make and configure a mocked PersistentVolumeClaimLister
//         mockedPersistentVolumeClaimLister := &PersistentVolumeClaimListerMock{
//             GetFunc: func(namespace string, name string) (*v1.PersistentVolumeClaim, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1.PersistentVolumeClaim, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedPersistentVolumeClaimLister in code that requires PersistentVolumeClaimLister
//         // and then make assertions.
//
//     }
type PersistentVolumeClaimListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1.PersistentVolumeClaim, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1.PersistentVolumeClaim, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *PersistentVolumeClaimListerMock) Get(namespace string, name string) (*v1.PersistentVolumeClaim, error) {
	if mock.GetFunc == nil {
		panic("PersistentVolumeClaimListerMock.GetFunc: method is nil but PersistentVolumeClaimLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockPersistentVolumeClaimListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockPersistentVolumeClaimListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedPersistentVolumeClaimLister.GetCalls())
func (mock *PersistentVolumeClaimListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockPersistentVolumeClaimListerMockGet.RLock()
	calls = mock.calls.Get
	lockPersistentVolumeClaimListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *PersistentVolumeClaimListerMock) List(namespace string, selector labels.Selector) ([]*v1.PersistentVolumeClaim, error) {
	if mock.ListFunc == nil {
		panic("PersistentVolumeClaimListerMock.ListFunc: method is nil but PersistentVolumeClaimLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockPersistentVolumeClaimListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockPersistentVolumeClaimListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedPersistentVolumeClaimLister.ListCalls())
func (mock *PersistentVolumeClaimListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockPersistentVolumeClaimListerMockList.RLock()
	calls = mock.calls.List
	lockPersistentVolumeClaimListerMockList.RUnlock()
	return calls
}

var (
	lockPersistentVolumeClaimControllerMockAddClusterScopedHandler sync.RWMutex
	lockPersistentVolumeClaimControllerMockAddFeatureHandler       sync.RWMutex
	lockPersistentVolumeClaimControllerMockAddHandler              sync.RWMutex
	lockPersistentVolumeClaimControllerMockEnqueue                 sync.RWMutex
	lockPersistentVolumeClaimControllerMockGeneric                 sync.RWMutex
	lockPersistentVolumeClaimControllerMockInformer                sync.RWMutex
	lockPersistentVolumeClaimControllerMockLister                  sync.RWMutex
	lockPersistentVolumeClaimControllerMockStart                   sync.RWMutex
	lockPersistentVolumeClaimControllerMockSync                    sync.RWMutex
)

// Ensure, that PersistentVolumeClaimControllerMock does implement PersistentVolumeClaimController.
// If this is not the case, regenerate this file with moq.
var _ v1a.PersistentVolumeClaimController = &PersistentVolumeClaimControllerMock{}

// PersistentVolumeClaimControllerMock is a mock implementation of PersistentVolumeClaimController.
//
//     func TestSomethingThatUsesPersistentVolumeClaimController(t *testing.T) {
//
//         // make and configure a mocked PersistentVolumeClaimController
//         mockedPersistentVolumeClaimController := &PersistentVolumeClaimControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1a.PersistentVolumeClaimHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.PersistentVolumeClaimHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1a.PersistentVolumeClaimHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1a.PersistentVolumeClaimLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedPersistentVolumeClaimController in code that requires PersistentVolumeClaimController
//         // and then make assertions.
//
//     }
type PersistentVolumeClaimControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1a.PersistentVolumeClaimHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.PersistentVolumeClaimHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1a.PersistentVolumeClaimHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1a.PersistentVolumeClaimLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1a.PersistentVolumeClaimHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.PersistentVolumeClaimHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1a.PersistentVolumeClaimHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *PersistentVolumeClaimControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1a.PersistentVolumeClaimHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("PersistentVolumeClaimControllerMock.AddClusterScopedHandlerFunc: method is nil but PersistentVolumeClaimController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.PersistentVolumeClaimHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockPersistentVolumeClaimControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockPersistentVolumeClaimControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedPersistentVolumeClaimController.AddClusterScopedHandlerCalls())
func (mock *PersistentVolumeClaimControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1a.PersistentVolumeClaimHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.PersistentVolumeClaimHandlerFunc
	}
	lockPersistentVolumeClaimControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockPersistentVolumeClaimControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *PersistentVolumeClaimControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.PersistentVolumeClaimHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("PersistentVolumeClaimControllerMock.AddFeatureHandlerFunc: method is nil but PersistentVolumeClaimController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.PersistentVolumeClaimHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockPersistentVolumeClaimControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockPersistentVolumeClaimControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedPersistentVolumeClaimController.AddFeatureHandlerCalls())
func (mock *PersistentVolumeClaimControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1a.PersistentVolumeClaimHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.PersistentVolumeClaimHandlerFunc
	}
	lockPersistentVolumeClaimControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockPersistentVolumeClaimControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *PersistentVolumeClaimControllerMock) AddHandler(ctx context.Context, name string, handler v1a.PersistentVolumeClaimHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("PersistentVolumeClaimControllerMock.AddHandlerFunc: method is nil but PersistentVolumeClaimController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1a.PersistentVolumeClaimHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockPersistentVolumeClaimControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockPersistentVolumeClaimControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedPersistentVolumeClaimController.AddHandlerCalls())
func (mock *PersistentVolumeClaimControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1a.PersistentVolumeClaimHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1a.PersistentVolumeClaimHandlerFunc
	}
	lockPersistentVolumeClaimControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockPersistentVolumeClaimControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *PersistentVolumeClaimControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("PersistentVolumeClaimControllerMock.EnqueueFunc: method is nil but PersistentVolumeClaimController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockPersistentVolumeClaimControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockPersistentVolumeClaimControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedPersistentVolumeClaimController.EnqueueCalls())
func (mock *PersistentVolumeClaimControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockPersistentVolumeClaimControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockPersistentVolumeClaimControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *PersistentVolumeClaimControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("PersistentVolumeClaimControllerMock.GenericFunc: method is nil but PersistentVolumeClaimController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockPersistentVolumeClaimControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockPersistentVolumeClaimControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedPersistentVolumeClaimController.GenericCalls())
func (mock *PersistentVolumeClaimControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockPersistentVolumeClaimControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockPersistentVolumeClaimControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *PersistentVolumeClaimControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("PersistentVolumeClaimControllerMock.InformerFunc: method is nil but PersistentVolumeClaimController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockPersistentVolumeClaimControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockPersistentVolumeClaimControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedPersistentVolumeClaimController.InformerCalls())
func (mock *PersistentVolumeClaimControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockPersistentVolumeClaimControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockPersistentVolumeClaimControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *PersistentVolumeClaimControllerMock) Lister() v1a.PersistentVolumeClaimLister {
	if mock.ListerFunc == nil {
		panic("PersistentVolumeClaimControllerMock.ListerFunc: method is nil but PersistentVolumeClaimController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockPersistentVolumeClaimControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockPersistentVolumeClaimControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedPersistentVolumeClaimController.ListerCalls())
func (mock *PersistentVolumeClaimControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockPersistentVolumeClaimControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockPersistentVolumeClaimControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *PersistentVolumeClaimControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("PersistentVolumeClaimControllerMock.StartFunc: method is nil but PersistentVolumeClaimController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockPersistentVolumeClaimControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockPersistentVolumeClaimControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedPersistentVolumeClaimController.StartCalls())
func (mock *PersistentVolumeClaimControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockPersistentVolumeClaimControllerMockStart.RLock()
	calls = mock.calls.Start
	lockPersistentVolumeClaimControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *PersistentVolumeClaimControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("PersistentVolumeClaimControllerMock.SyncFunc: method is nil but PersistentVolumeClaimController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockPersistentVolumeClaimControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockPersistentVolumeClaimControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedPersistentVolumeClaimController.SyncCalls())
func (mock *PersistentVolumeClaimControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockPersistentVolumeClaimControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockPersistentVolumeClaimControllerMockSync.RUnlock()
	return calls
}

var (
	lockPersistentVolumeClaimInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockAddFeatureHandler         sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockAddHandler                sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockAddLifecycle              sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockController                sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockCreate                    sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockDelete                    sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockDeleteCollection          sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockDeleteNamespaced          sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockGet                       sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockGetNamespaced             sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockList                      sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockObjectClient              sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockUpdate                    sync.RWMutex
	lockPersistentVolumeClaimInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that PersistentVolumeClaimInterfaceMock does implement PersistentVolumeClaimInterface.
// If this is not the case, regenerate this file with moq.
var _ v1a.PersistentVolumeClaimInterface = &PersistentVolumeClaimInterfaceMock{}

// PersistentVolumeClaimInterfaceMock is a mock implementation of PersistentVolumeClaimInterface.
//
//     func TestSomethingThatUsesPersistentVolumeClaimInterface(t *testing.T) {
//
//         // make and configure a mocked PersistentVolumeClaimInterface
//         mockedPersistentVolumeClaimInterface := &PersistentVolumeClaimInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1a.PersistentVolumeClaimHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1a.PersistentVolumeClaimLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.PersistentVolumeClaimHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.PersistentVolumeClaimLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1a.PersistentVolumeClaimHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1a.PersistentVolumeClaimLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1a.PersistentVolumeClaimController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1.PersistentVolumeClaim) (*v1.PersistentVolumeClaim, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1b.GetOptions) (*v1.PersistentVolumeClaim, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1b.GetOptions) (*v1.PersistentVolumeClaim, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.PersistentVolumeClaimList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1.PersistentVolumeClaim) (*v1.PersistentVolumeClaim, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedPersistentVolumeClaimInterface in code that requires PersistentVolumeClaimInterface
//         // and then make assertions.
//
//     }
type PersistentVolumeClaimInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1a.PersistentVolumeClaimHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1a.PersistentVolumeClaimLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.PersistentVolumeClaimHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.PersistentVolumeClaimLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1a.PersistentVolumeClaimHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1a.PersistentVolumeClaimLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1a.PersistentVolumeClaimController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1.PersistentVolumeClaim) (*v1.PersistentVolumeClaim, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1b.GetOptions) (*v1.PersistentVolumeClaim, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1b.GetOptions) (*v1.PersistentVolumeClaim, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.PersistentVolumeClaimList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1.PersistentVolumeClaim) (*v1.PersistentVolumeClaim, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1a.PersistentVolumeClaimHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.PersistentVolumeClaimLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.PersistentVolumeClaimHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.PersistentVolumeClaimLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.PersistentVolumeClaimHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.PersistentVolumeClaimLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1.PersistentVolumeClaim
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1b.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1b.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1.PersistentVolumeClaim
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *PersistentVolumeClaimInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1a.PersistentVolumeClaimHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.AddClusterScopedHandlerFunc: method is nil but PersistentVolumeClaimInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.PersistentVolumeClaimHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockPersistentVolumeClaimInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockPersistentVolumeClaimInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.AddClusterScopedHandlerCalls())
func (mock *PersistentVolumeClaimInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1a.PersistentVolumeClaimHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.PersistentVolumeClaimHandlerFunc
	}
	lockPersistentVolumeClaimInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockPersistentVolumeClaimInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *PersistentVolumeClaimInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1a.PersistentVolumeClaimLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but PersistentVolumeClaimInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.PersistentVolumeClaimLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockPersistentVolumeClaimInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockPersistentVolumeClaimInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.AddClusterScopedLifecycleCalls())
func (mock *PersistentVolumeClaimInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1a.PersistentVolumeClaimLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.PersistentVolumeClaimLifecycle
	}
	lockPersistentVolumeClaimInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockPersistentVolumeClaimInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *PersistentVolumeClaimInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.PersistentVolumeClaimHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.AddFeatureHandlerFunc: method is nil but PersistentVolumeClaimInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.PersistentVolumeClaimHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockPersistentVolumeClaimInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockPersistentVolumeClaimInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.AddFeatureHandlerCalls())
func (mock *PersistentVolumeClaimInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1a.PersistentVolumeClaimHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.PersistentVolumeClaimHandlerFunc
	}
	lockPersistentVolumeClaimInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockPersistentVolumeClaimInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *PersistentVolumeClaimInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.PersistentVolumeClaimLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.AddFeatureLifecycleFunc: method is nil but PersistentVolumeClaimInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1a.PersistentVolumeClaimLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockPersistentVolumeClaimInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockPersistentVolumeClaimInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.AddFeatureLifecycleCalls())
func (mock *PersistentVolumeClaimInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v1a.PersistentVolumeClaimLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1a.PersistentVolumeClaimLifecycle
	}
	lockPersistentVolumeClaimInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockPersistentVolumeClaimInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *PersistentVolumeClaimInterfaceMock) AddHandler(ctx context.Context, name string, sync v1a.PersistentVolumeClaimHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.AddHandlerFunc: method is nil but PersistentVolumeClaimInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1a.PersistentVolumeClaimHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockPersistentVolumeClaimInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockPersistentVolumeClaimInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.AddHandlerCalls())
func (mock *PersistentVolumeClaimInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1a.PersistentVolumeClaimHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1a.PersistentVolumeClaimHandlerFunc
	}
	lockPersistentVolumeClaimInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockPersistentVolumeClaimInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *PersistentVolumeClaimInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1a.PersistentVolumeClaimLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.AddLifecycleFunc: method is nil but PersistentVolumeClaimInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.PersistentVolumeClaimLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockPersistentVolumeClaimInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockPersistentVolumeClaimInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.AddLifecycleCalls())
func (mock *PersistentVolumeClaimInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1a.PersistentVolumeClaimLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.PersistentVolumeClaimLifecycle
	}
	lockPersistentVolumeClaimInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockPersistentVolumeClaimInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *PersistentVolumeClaimInterfaceMock) Controller() v1a.PersistentVolumeClaimController {
	if mock.ControllerFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.ControllerFunc: method is nil but PersistentVolumeClaimInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockPersistentVolumeClaimInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockPersistentVolumeClaimInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.ControllerCalls())
func (mock *PersistentVolumeClaimInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockPersistentVolumeClaimInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockPersistentVolumeClaimInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *PersistentVolumeClaimInterfaceMock) Create(in1 *v1.PersistentVolumeClaim) (*v1.PersistentVolumeClaim, error) {
	if mock.CreateFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.CreateFunc: method is nil but PersistentVolumeClaimInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1.PersistentVolumeClaim
	}{
		In1: in1,
	}
	lockPersistentVolumeClaimInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockPersistentVolumeClaimInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.CreateCalls())
func (mock *PersistentVolumeClaimInterfaceMock) CreateCalls() []struct {
	In1 *v1.PersistentVolumeClaim
} {
	var calls []struct {
		In1 *v1.PersistentVolumeClaim
	}
	lockPersistentVolumeClaimInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockPersistentVolumeClaimInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *PersistentVolumeClaimInterfaceMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.DeleteFunc: method is nil but PersistentVolumeClaimInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockPersistentVolumeClaimInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockPersistentVolumeClaimInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.DeleteCalls())
func (mock *PersistentVolumeClaimInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockPersistentVolumeClaimInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockPersistentVolumeClaimInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *PersistentVolumeClaimInterfaceMock) DeleteCollection(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.DeleteCollectionFunc: method is nil but PersistentVolumeClaimInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockPersistentVolumeClaimInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockPersistentVolumeClaimInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.DeleteCollectionCalls())
func (mock *PersistentVolumeClaimInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1b.DeleteOptions
	ListOpts   v1b.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}
	lockPersistentVolumeClaimInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockPersistentVolumeClaimInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *PersistentVolumeClaimInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.DeleteNamespacedFunc: method is nil but PersistentVolumeClaimInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockPersistentVolumeClaimInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockPersistentVolumeClaimInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.DeleteNamespacedCalls())
func (mock *PersistentVolumeClaimInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockPersistentVolumeClaimInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockPersistentVolumeClaimInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *PersistentVolumeClaimInterfaceMock) Get(name string, opts v1b.GetOptions) (*v1.PersistentVolumeClaim, error) {
	if mock.GetFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.GetFunc: method is nil but PersistentVolumeClaimInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1b.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockPersistentVolumeClaimInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockPersistentVolumeClaimInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.GetCalls())
func (mock *PersistentVolumeClaimInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1b.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1b.GetOptions
	}
	lockPersistentVolumeClaimInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockPersistentVolumeClaimInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *PersistentVolumeClaimInterfaceMock) GetNamespaced(namespace string, name string, opts v1b.GetOptions) (*v1.PersistentVolumeClaim, error) {
	if mock.GetNamespacedFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.GetNamespacedFunc: method is nil but PersistentVolumeClaimInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockPersistentVolumeClaimInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockPersistentVolumeClaimInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.GetNamespacedCalls())
func (mock *PersistentVolumeClaimInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}
	lockPersistentVolumeClaimInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockPersistentVolumeClaimInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *PersistentVolumeClaimInterfaceMock) List(opts v1b.ListOptions) (*v1a.PersistentVolumeClaimList, error) {
	if mock.ListFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.ListFunc: method is nil but PersistentVolumeClaimInterface.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockPersistentVolumeClaimInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockPersistentVolumeClaimInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.ListCalls())
func (mock *PersistentVolumeClaimInterfaceMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockPersistentVolumeClaimInterfaceMockList.RLock()
	calls = mock.calls.List
	lockPersistentVolumeClaimInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *PersistentVolumeClaimInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.ObjectClientFunc: method is nil but PersistentVolumeClaimInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockPersistentVolumeClaimInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockPersistentVolumeClaimInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.ObjectClientCalls())
func (mock *PersistentVolumeClaimInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockPersistentVolumeClaimInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockPersistentVolumeClaimInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *PersistentVolumeClaimInterfaceMock) Update(in1 *v1.PersistentVolumeClaim) (*v1.PersistentVolumeClaim, error) {
	if mock.UpdateFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.UpdateFunc: method is nil but PersistentVolumeClaimInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1.PersistentVolumeClaim
	}{
		In1: in1,
	}
	lockPersistentVolumeClaimInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockPersistentVolumeClaimInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.UpdateCalls())
func (mock *PersistentVolumeClaimInterfaceMock) UpdateCalls() []struct {
	In1 *v1.PersistentVolumeClaim
} {
	var calls []struct {
		In1 *v1.PersistentVolumeClaim
	}
	lockPersistentVolumeClaimInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockPersistentVolumeClaimInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *PersistentVolumeClaimInterfaceMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("PersistentVolumeClaimInterfaceMock.WatchFunc: method is nil but PersistentVolumeClaimInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockPersistentVolumeClaimInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockPersistentVolumeClaimInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedPersistentVolumeClaimInterface.WatchCalls())
func (mock *PersistentVolumeClaimInterfaceMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockPersistentVolumeClaimInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockPersistentVolumeClaimInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockPersistentVolumeClaimsGetterMockPersistentVolumeClaims sync.RWMutex
)

// Ensure, that PersistentVolumeClaimsGetterMock does implement PersistentVolumeClaimsGetter.
// If this is not the case, regenerate this file with moq.
var _ v1a.PersistentVolumeClaimsGetter = &PersistentVolumeClaimsGetterMock{}

// PersistentVolumeClaimsGetterMock is a mock implementation of PersistentVolumeClaimsGetter.
//
//     func TestSomethingThatUsesPersistentVolumeClaimsGetter(t *testing.T) {
//
//         // make and configure a mocked PersistentVolumeClaimsGetter
//         mockedPersistentVolumeClaimsGetter := &PersistentVolumeClaimsGetterMock{
//             PersistentVolumeClaimsFunc: func(namespace string) v1a.PersistentVolumeClaimInterface {
// 	               panic("mock out the PersistentVolumeClaims method")
//             },
//         }
//
//         // use mockedPersistentVolumeClaimsGetter in code that requires PersistentVolumeClaimsGetter
//         // and then make assertions.
//
//     }
type PersistentVolumeClaimsGetterMock struct {
	// PersistentVolumeClaimsFunc mocks the PersistentVolumeClaims method.
	PersistentVolumeClaimsFunc func(namespace string) v1a.PersistentVolumeClaimInterface

	// calls tracks calls to the methods.
	calls struct {
		// PersistentVolumeClaims holds details about calls to the PersistentVolumeClaims method.
		PersistentVolumeClaims []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// PersistentVolumeClaims calls PersistentVolumeClaimsFunc.
func (mock *PersistentVolumeClaimsGetterMock) PersistentVolumeClaims(namespace string) v1a.PersistentVolumeClaimInterface {
	if mock.PersistentVolumeClaimsFunc == nil {
		panic("PersistentVolumeClaimsGetterMock.PersistentVolumeClaimsFunc: method is nil but PersistentVolumeClaimsGetter.PersistentVolumeClaims was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockPersistentVolumeClaimsGetterMockPersistentVolumeClaims.Lock()
	mock.calls.PersistentVolumeClaims = append(mock.calls.PersistentVolumeClaims, callInfo)
	lockPersistentVolumeClaimsGetterMockPersistentVolumeClaims.Unlock()
	return mock.PersistentVolumeClaimsFunc(namespace)
}

// PersistentVolumeClaimsCalls gets all the calls that were made to PersistentVolumeClaims.
// Check the length with:
//     len(mockedPersistentVolumeClaimsGetter.PersistentVolumeClaimsCalls())
func (mock *PersistentVolumeClaimsGetterMock) PersistentVolumeClaimsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockPersistentVolumeClaimsGetterMockPersistentVolumeClaims.RLock()
	calls = mock.calls.PersistentVolumeClaims
	lockPersistentVolumeClaimsGetterMockPersistentVolumeClaims.RUnlock()
	return calls
}
