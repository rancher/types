// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1a "github.com/rancher/types/apis/core/v1"
	v1 "k8s.io/api/core/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockReplicationControllerListerMockGet  sync.RWMutex
	lockReplicationControllerListerMockList sync.RWMutex
)

// Ensure, that ReplicationControllerListerMock does implement ReplicationControllerLister.
// If this is not the case, regenerate this file with moq.
var _ v1a.ReplicationControllerLister = &ReplicationControllerListerMock{}

// ReplicationControllerListerMock is a mock implementation of ReplicationControllerLister.
//
//     func TestSomethingThatUsesReplicationControllerLister(t *testing.T) {
//
//         // make and configure a mocked ReplicationControllerLister
//         mockedReplicationControllerLister := &ReplicationControllerListerMock{
//             GetFunc: func(namespace string, name string) (*v1.ReplicationController, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1.ReplicationController, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedReplicationControllerLister in code that requires ReplicationControllerLister
//         // and then make assertions.
//
//     }
type ReplicationControllerListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1.ReplicationController, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1.ReplicationController, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *ReplicationControllerListerMock) Get(namespace string, name string) (*v1.ReplicationController, error) {
	if mock.GetFunc == nil {
		panic("ReplicationControllerListerMock.GetFunc: method is nil but ReplicationControllerLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockReplicationControllerListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockReplicationControllerListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedReplicationControllerLister.GetCalls())
func (mock *ReplicationControllerListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockReplicationControllerListerMockGet.RLock()
	calls = mock.calls.Get
	lockReplicationControllerListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ReplicationControllerListerMock) List(namespace string, selector labels.Selector) ([]*v1.ReplicationController, error) {
	if mock.ListFunc == nil {
		panic("ReplicationControllerListerMock.ListFunc: method is nil but ReplicationControllerLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockReplicationControllerListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockReplicationControllerListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedReplicationControllerLister.ListCalls())
func (mock *ReplicationControllerListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockReplicationControllerListerMockList.RLock()
	calls = mock.calls.List
	lockReplicationControllerListerMockList.RUnlock()
	return calls
}

var (
	lockReplicationControllerControllerMockAddClusterScopedHandler sync.RWMutex
	lockReplicationControllerControllerMockAddFeatureHandler       sync.RWMutex
	lockReplicationControllerControllerMockAddHandler              sync.RWMutex
	lockReplicationControllerControllerMockEnqueue                 sync.RWMutex
	lockReplicationControllerControllerMockGeneric                 sync.RWMutex
	lockReplicationControllerControllerMockInformer                sync.RWMutex
	lockReplicationControllerControllerMockLister                  sync.RWMutex
	lockReplicationControllerControllerMockStart                   sync.RWMutex
	lockReplicationControllerControllerMockSync                    sync.RWMutex
)

// Ensure, that ReplicationControllerControllerMock does implement ReplicationControllerController.
// If this is not the case, regenerate this file with moq.
var _ v1a.ReplicationControllerController = &ReplicationControllerControllerMock{}

// ReplicationControllerControllerMock is a mock implementation of ReplicationControllerController.
//
//     func TestSomethingThatUsesReplicationControllerController(t *testing.T) {
//
//         // make and configure a mocked ReplicationControllerController
//         mockedReplicationControllerController := &ReplicationControllerControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1a.ReplicationControllerHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.ReplicationControllerHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1a.ReplicationControllerHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1a.ReplicationControllerLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedReplicationControllerController in code that requires ReplicationControllerController
//         // and then make assertions.
//
//     }
type ReplicationControllerControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1a.ReplicationControllerHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.ReplicationControllerHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1a.ReplicationControllerHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1a.ReplicationControllerLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1a.ReplicationControllerHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.ReplicationControllerHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1a.ReplicationControllerHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ReplicationControllerControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1a.ReplicationControllerHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ReplicationControllerControllerMock.AddClusterScopedHandlerFunc: method is nil but ReplicationControllerController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.ReplicationControllerHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockReplicationControllerControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockReplicationControllerControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedReplicationControllerController.AddClusterScopedHandlerCalls())
func (mock *ReplicationControllerControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1a.ReplicationControllerHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.ReplicationControllerHandlerFunc
	}
	lockReplicationControllerControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockReplicationControllerControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *ReplicationControllerControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.ReplicationControllerHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("ReplicationControllerControllerMock.AddFeatureHandlerFunc: method is nil but ReplicationControllerController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.ReplicationControllerHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockReplicationControllerControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockReplicationControllerControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedReplicationControllerController.AddFeatureHandlerCalls())
func (mock *ReplicationControllerControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1a.ReplicationControllerHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.ReplicationControllerHandlerFunc
	}
	lockReplicationControllerControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockReplicationControllerControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ReplicationControllerControllerMock) AddHandler(ctx context.Context, name string, handler v1a.ReplicationControllerHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ReplicationControllerControllerMock.AddHandlerFunc: method is nil but ReplicationControllerController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1a.ReplicationControllerHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockReplicationControllerControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockReplicationControllerControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedReplicationControllerController.AddHandlerCalls())
func (mock *ReplicationControllerControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1a.ReplicationControllerHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1a.ReplicationControllerHandlerFunc
	}
	lockReplicationControllerControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockReplicationControllerControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ReplicationControllerControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("ReplicationControllerControllerMock.EnqueueFunc: method is nil but ReplicationControllerController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockReplicationControllerControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockReplicationControllerControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedReplicationControllerController.EnqueueCalls())
func (mock *ReplicationControllerControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockReplicationControllerControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockReplicationControllerControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *ReplicationControllerControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("ReplicationControllerControllerMock.GenericFunc: method is nil but ReplicationControllerController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockReplicationControllerControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockReplicationControllerControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedReplicationControllerController.GenericCalls())
func (mock *ReplicationControllerControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockReplicationControllerControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockReplicationControllerControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ReplicationControllerControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ReplicationControllerControllerMock.InformerFunc: method is nil but ReplicationControllerController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockReplicationControllerControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockReplicationControllerControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedReplicationControllerController.InformerCalls())
func (mock *ReplicationControllerControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockReplicationControllerControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockReplicationControllerControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *ReplicationControllerControllerMock) Lister() v1a.ReplicationControllerLister {
	if mock.ListerFunc == nil {
		panic("ReplicationControllerControllerMock.ListerFunc: method is nil but ReplicationControllerController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockReplicationControllerControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockReplicationControllerControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedReplicationControllerController.ListerCalls())
func (mock *ReplicationControllerControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockReplicationControllerControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockReplicationControllerControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *ReplicationControllerControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("ReplicationControllerControllerMock.StartFunc: method is nil but ReplicationControllerController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockReplicationControllerControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockReplicationControllerControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedReplicationControllerController.StartCalls())
func (mock *ReplicationControllerControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockReplicationControllerControllerMockStart.RLock()
	calls = mock.calls.Start
	lockReplicationControllerControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *ReplicationControllerControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("ReplicationControllerControllerMock.SyncFunc: method is nil but ReplicationControllerController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockReplicationControllerControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockReplicationControllerControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedReplicationControllerController.SyncCalls())
func (mock *ReplicationControllerControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockReplicationControllerControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockReplicationControllerControllerMockSync.RUnlock()
	return calls
}

var (
	lockReplicationControllerInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockReplicationControllerInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockReplicationControllerInterfaceMockAddFeatureHandler         sync.RWMutex
	lockReplicationControllerInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockReplicationControllerInterfaceMockAddHandler                sync.RWMutex
	lockReplicationControllerInterfaceMockAddLifecycle              sync.RWMutex
	lockReplicationControllerInterfaceMockController                sync.RWMutex
	lockReplicationControllerInterfaceMockCreate                    sync.RWMutex
	lockReplicationControllerInterfaceMockDelete                    sync.RWMutex
	lockReplicationControllerInterfaceMockDeleteCollection          sync.RWMutex
	lockReplicationControllerInterfaceMockDeleteNamespaced          sync.RWMutex
	lockReplicationControllerInterfaceMockGet                       sync.RWMutex
	lockReplicationControllerInterfaceMockGetNamespaced             sync.RWMutex
	lockReplicationControllerInterfaceMockList                      sync.RWMutex
	lockReplicationControllerInterfaceMockObjectClient              sync.RWMutex
	lockReplicationControllerInterfaceMockUpdate                    sync.RWMutex
	lockReplicationControllerInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that ReplicationControllerInterfaceMock does implement ReplicationControllerInterface.
// If this is not the case, regenerate this file with moq.
var _ v1a.ReplicationControllerInterface = &ReplicationControllerInterfaceMock{}

// ReplicationControllerInterfaceMock is a mock implementation of ReplicationControllerInterface.
//
//     func TestSomethingThatUsesReplicationControllerInterface(t *testing.T) {
//
//         // make and configure a mocked ReplicationControllerInterface
//         mockedReplicationControllerInterface := &ReplicationControllerInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1a.ReplicationControllerHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1a.ReplicationControllerLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.ReplicationControllerHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.ReplicationControllerLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1a.ReplicationControllerHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1a.ReplicationControllerLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1a.ReplicationControllerController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1.ReplicationController) (*v1.ReplicationController, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1b.GetOptions) (*v1.ReplicationController, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1b.GetOptions) (*v1.ReplicationController, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.ReplicationControllerList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1.ReplicationController) (*v1.ReplicationController, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedReplicationControllerInterface in code that requires ReplicationControllerInterface
//         // and then make assertions.
//
//     }
type ReplicationControllerInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1a.ReplicationControllerHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1a.ReplicationControllerLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.ReplicationControllerHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.ReplicationControllerLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1a.ReplicationControllerHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1a.ReplicationControllerLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1a.ReplicationControllerController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1.ReplicationController) (*v1.ReplicationController, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1b.GetOptions) (*v1.ReplicationController, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1b.GetOptions) (*v1.ReplicationController, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.ReplicationControllerList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1.ReplicationController) (*v1.ReplicationController, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1a.ReplicationControllerHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.ReplicationControllerLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.ReplicationControllerHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.ReplicationControllerLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.ReplicationControllerHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.ReplicationControllerLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1.ReplicationController
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1b.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1b.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1.ReplicationController
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ReplicationControllerInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1a.ReplicationControllerHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ReplicationControllerInterfaceMock.AddClusterScopedHandlerFunc: method is nil but ReplicationControllerInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.ReplicationControllerHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockReplicationControllerInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockReplicationControllerInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedReplicationControllerInterface.AddClusterScopedHandlerCalls())
func (mock *ReplicationControllerInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1a.ReplicationControllerHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.ReplicationControllerHandlerFunc
	}
	lockReplicationControllerInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockReplicationControllerInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *ReplicationControllerInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1a.ReplicationControllerLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("ReplicationControllerInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but ReplicationControllerInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.ReplicationControllerLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockReplicationControllerInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockReplicationControllerInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedReplicationControllerInterface.AddClusterScopedLifecycleCalls())
func (mock *ReplicationControllerInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1a.ReplicationControllerLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.ReplicationControllerLifecycle
	}
	lockReplicationControllerInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockReplicationControllerInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *ReplicationControllerInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.ReplicationControllerHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("ReplicationControllerInterfaceMock.AddFeatureHandlerFunc: method is nil but ReplicationControllerInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.ReplicationControllerHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockReplicationControllerInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockReplicationControllerInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedReplicationControllerInterface.AddFeatureHandlerCalls())
func (mock *ReplicationControllerInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1a.ReplicationControllerHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.ReplicationControllerHandlerFunc
	}
	lockReplicationControllerInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockReplicationControllerInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *ReplicationControllerInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.ReplicationControllerLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("ReplicationControllerInterfaceMock.AddFeatureLifecycleFunc: method is nil but ReplicationControllerInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1a.ReplicationControllerLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockReplicationControllerInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockReplicationControllerInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedReplicationControllerInterface.AddFeatureLifecycleCalls())
func (mock *ReplicationControllerInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v1a.ReplicationControllerLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1a.ReplicationControllerLifecycle
	}
	lockReplicationControllerInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockReplicationControllerInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ReplicationControllerInterfaceMock) AddHandler(ctx context.Context, name string, sync v1a.ReplicationControllerHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ReplicationControllerInterfaceMock.AddHandlerFunc: method is nil but ReplicationControllerInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1a.ReplicationControllerHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockReplicationControllerInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockReplicationControllerInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedReplicationControllerInterface.AddHandlerCalls())
func (mock *ReplicationControllerInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1a.ReplicationControllerHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1a.ReplicationControllerHandlerFunc
	}
	lockReplicationControllerInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockReplicationControllerInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *ReplicationControllerInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1a.ReplicationControllerLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("ReplicationControllerInterfaceMock.AddLifecycleFunc: method is nil but ReplicationControllerInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.ReplicationControllerLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockReplicationControllerInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockReplicationControllerInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedReplicationControllerInterface.AddLifecycleCalls())
func (mock *ReplicationControllerInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1a.ReplicationControllerLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.ReplicationControllerLifecycle
	}
	lockReplicationControllerInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockReplicationControllerInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *ReplicationControllerInterfaceMock) Controller() v1a.ReplicationControllerController {
	if mock.ControllerFunc == nil {
		panic("ReplicationControllerInterfaceMock.ControllerFunc: method is nil but ReplicationControllerInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockReplicationControllerInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockReplicationControllerInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedReplicationControllerInterface.ControllerCalls())
func (mock *ReplicationControllerInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockReplicationControllerInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockReplicationControllerInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ReplicationControllerInterfaceMock) Create(in1 *v1.ReplicationController) (*v1.ReplicationController, error) {
	if mock.CreateFunc == nil {
		panic("ReplicationControllerInterfaceMock.CreateFunc: method is nil but ReplicationControllerInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1.ReplicationController
	}{
		In1: in1,
	}
	lockReplicationControllerInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockReplicationControllerInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedReplicationControllerInterface.CreateCalls())
func (mock *ReplicationControllerInterfaceMock) CreateCalls() []struct {
	In1 *v1.ReplicationController
} {
	var calls []struct {
		In1 *v1.ReplicationController
	}
	lockReplicationControllerInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockReplicationControllerInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ReplicationControllerInterfaceMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ReplicationControllerInterfaceMock.DeleteFunc: method is nil but ReplicationControllerInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockReplicationControllerInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockReplicationControllerInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedReplicationControllerInterface.DeleteCalls())
func (mock *ReplicationControllerInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockReplicationControllerInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockReplicationControllerInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *ReplicationControllerInterfaceMock) DeleteCollection(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("ReplicationControllerInterfaceMock.DeleteCollectionFunc: method is nil but ReplicationControllerInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockReplicationControllerInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockReplicationControllerInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedReplicationControllerInterface.DeleteCollectionCalls())
func (mock *ReplicationControllerInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1b.DeleteOptions
	ListOpts   v1b.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}
	lockReplicationControllerInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockReplicationControllerInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *ReplicationControllerInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("ReplicationControllerInterfaceMock.DeleteNamespacedFunc: method is nil but ReplicationControllerInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockReplicationControllerInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockReplicationControllerInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedReplicationControllerInterface.DeleteNamespacedCalls())
func (mock *ReplicationControllerInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockReplicationControllerInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockReplicationControllerInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ReplicationControllerInterfaceMock) Get(name string, opts v1b.GetOptions) (*v1.ReplicationController, error) {
	if mock.GetFunc == nil {
		panic("ReplicationControllerInterfaceMock.GetFunc: method is nil but ReplicationControllerInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1b.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockReplicationControllerInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockReplicationControllerInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedReplicationControllerInterface.GetCalls())
func (mock *ReplicationControllerInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1b.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1b.GetOptions
	}
	lockReplicationControllerInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockReplicationControllerInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *ReplicationControllerInterfaceMock) GetNamespaced(namespace string, name string, opts v1b.GetOptions) (*v1.ReplicationController, error) {
	if mock.GetNamespacedFunc == nil {
		panic("ReplicationControllerInterfaceMock.GetNamespacedFunc: method is nil but ReplicationControllerInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockReplicationControllerInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockReplicationControllerInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedReplicationControllerInterface.GetNamespacedCalls())
func (mock *ReplicationControllerInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}
	lockReplicationControllerInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockReplicationControllerInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ReplicationControllerInterfaceMock) List(opts v1b.ListOptions) (*v1a.ReplicationControllerList, error) {
	if mock.ListFunc == nil {
		panic("ReplicationControllerInterfaceMock.ListFunc: method is nil but ReplicationControllerInterface.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockReplicationControllerInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockReplicationControllerInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedReplicationControllerInterface.ListCalls())
func (mock *ReplicationControllerInterfaceMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockReplicationControllerInterfaceMockList.RLock()
	calls = mock.calls.List
	lockReplicationControllerInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *ReplicationControllerInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("ReplicationControllerInterfaceMock.ObjectClientFunc: method is nil but ReplicationControllerInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockReplicationControllerInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockReplicationControllerInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedReplicationControllerInterface.ObjectClientCalls())
func (mock *ReplicationControllerInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockReplicationControllerInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockReplicationControllerInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ReplicationControllerInterfaceMock) Update(in1 *v1.ReplicationController) (*v1.ReplicationController, error) {
	if mock.UpdateFunc == nil {
		panic("ReplicationControllerInterfaceMock.UpdateFunc: method is nil but ReplicationControllerInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1.ReplicationController
	}{
		In1: in1,
	}
	lockReplicationControllerInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockReplicationControllerInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedReplicationControllerInterface.UpdateCalls())
func (mock *ReplicationControllerInterfaceMock) UpdateCalls() []struct {
	In1 *v1.ReplicationController
} {
	var calls []struct {
		In1 *v1.ReplicationController
	}
	lockReplicationControllerInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockReplicationControllerInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ReplicationControllerInterfaceMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ReplicationControllerInterfaceMock.WatchFunc: method is nil but ReplicationControllerInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockReplicationControllerInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockReplicationControllerInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedReplicationControllerInterface.WatchCalls())
func (mock *ReplicationControllerInterfaceMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockReplicationControllerInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockReplicationControllerInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockReplicationControllersGetterMockReplicationControllers sync.RWMutex
)

// Ensure, that ReplicationControllersGetterMock does implement ReplicationControllersGetter.
// If this is not the case, regenerate this file with moq.
var _ v1a.ReplicationControllersGetter = &ReplicationControllersGetterMock{}

// ReplicationControllersGetterMock is a mock implementation of ReplicationControllersGetter.
//
//     func TestSomethingThatUsesReplicationControllersGetter(t *testing.T) {
//
//         // make and configure a mocked ReplicationControllersGetter
//         mockedReplicationControllersGetter := &ReplicationControllersGetterMock{
//             ReplicationControllersFunc: func(namespace string) v1a.ReplicationControllerInterface {
// 	               panic("mock out the ReplicationControllers method")
//             },
//         }
//
//         // use mockedReplicationControllersGetter in code that requires ReplicationControllersGetter
//         // and then make assertions.
//
//     }
type ReplicationControllersGetterMock struct {
	// ReplicationControllersFunc mocks the ReplicationControllers method.
	ReplicationControllersFunc func(namespace string) v1a.ReplicationControllerInterface

	// calls tracks calls to the methods.
	calls struct {
		// ReplicationControllers holds details about calls to the ReplicationControllers method.
		ReplicationControllers []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// ReplicationControllers calls ReplicationControllersFunc.
func (mock *ReplicationControllersGetterMock) ReplicationControllers(namespace string) v1a.ReplicationControllerInterface {
	if mock.ReplicationControllersFunc == nil {
		panic("ReplicationControllersGetterMock.ReplicationControllersFunc: method is nil but ReplicationControllersGetter.ReplicationControllers was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockReplicationControllersGetterMockReplicationControllers.Lock()
	mock.calls.ReplicationControllers = append(mock.calls.ReplicationControllers, callInfo)
	lockReplicationControllersGetterMockReplicationControllers.Unlock()
	return mock.ReplicationControllersFunc(namespace)
}

// ReplicationControllersCalls gets all the calls that were made to ReplicationControllers.
// Check the length with:
//     len(mockedReplicationControllersGetter.ReplicationControllersCalls())
func (mock *ReplicationControllersGetterMock) ReplicationControllersCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockReplicationControllersGetterMockReplicationControllers.RLock()
	calls = mock.calls.ReplicationControllers
	lockReplicationControllersGetterMockReplicationControllers.RUnlock()
	return calls
}
