// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v2beta2a "github.com/rancher/types/apis/autoscaling/v2beta2"
	v2beta2 "k8s.io/api/autoscaling/v2beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockHorizontalPodAutoscalerListerMockGet  sync.RWMutex
	lockHorizontalPodAutoscalerListerMockList sync.RWMutex
)

// Ensure, that HorizontalPodAutoscalerListerMock does implement HorizontalPodAutoscalerLister.
// If this is not the case, regenerate this file with moq.
var _ v2beta2a.HorizontalPodAutoscalerLister = &HorizontalPodAutoscalerListerMock{}

// HorizontalPodAutoscalerListerMock is a mock implementation of HorizontalPodAutoscalerLister.
//
//     func TestSomethingThatUsesHorizontalPodAutoscalerLister(t *testing.T) {
//
//         // make and configure a mocked HorizontalPodAutoscalerLister
//         mockedHorizontalPodAutoscalerLister := &HorizontalPodAutoscalerListerMock{
//             GetFunc: func(namespace string, name string) (*v2beta2.HorizontalPodAutoscaler, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v2beta2.HorizontalPodAutoscaler, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedHorizontalPodAutoscalerLister in code that requires HorizontalPodAutoscalerLister
//         // and then make assertions.
//
//     }
type HorizontalPodAutoscalerListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v2beta2.HorizontalPodAutoscaler, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v2beta2.HorizontalPodAutoscaler, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *HorizontalPodAutoscalerListerMock) Get(namespace string, name string) (*v2beta2.HorizontalPodAutoscaler, error) {
	if mock.GetFunc == nil {
		panic("HorizontalPodAutoscalerListerMock.GetFunc: method is nil but HorizontalPodAutoscalerLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockHorizontalPodAutoscalerListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockHorizontalPodAutoscalerListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerLister.GetCalls())
func (mock *HorizontalPodAutoscalerListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockHorizontalPodAutoscalerListerMockGet.RLock()
	calls = mock.calls.Get
	lockHorizontalPodAutoscalerListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *HorizontalPodAutoscalerListerMock) List(namespace string, selector labels.Selector) ([]*v2beta2.HorizontalPodAutoscaler, error) {
	if mock.ListFunc == nil {
		panic("HorizontalPodAutoscalerListerMock.ListFunc: method is nil but HorizontalPodAutoscalerLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockHorizontalPodAutoscalerListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockHorizontalPodAutoscalerListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerLister.ListCalls())
func (mock *HorizontalPodAutoscalerListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockHorizontalPodAutoscalerListerMockList.RLock()
	calls = mock.calls.List
	lockHorizontalPodAutoscalerListerMockList.RUnlock()
	return calls
}

var (
	lockHorizontalPodAutoscalerControllerMockAddClusterScopedHandler sync.RWMutex
	lockHorizontalPodAutoscalerControllerMockAddHandler              sync.RWMutex
	lockHorizontalPodAutoscalerControllerMockEnqueue                 sync.RWMutex
	lockHorizontalPodAutoscalerControllerMockGeneric                 sync.RWMutex
	lockHorizontalPodAutoscalerControllerMockInformer                sync.RWMutex
	lockHorizontalPodAutoscalerControllerMockLister                  sync.RWMutex
	lockHorizontalPodAutoscalerControllerMockStart                   sync.RWMutex
	lockHorizontalPodAutoscalerControllerMockSync                    sync.RWMutex
)

// Ensure, that HorizontalPodAutoscalerControllerMock does implement HorizontalPodAutoscalerController.
// If this is not the case, regenerate this file with moq.
var _ v2beta2a.HorizontalPodAutoscalerController = &HorizontalPodAutoscalerControllerMock{}

// HorizontalPodAutoscalerControllerMock is a mock implementation of HorizontalPodAutoscalerController.
//
//     func TestSomethingThatUsesHorizontalPodAutoscalerController(t *testing.T) {
//
//         // make and configure a mocked HorizontalPodAutoscalerController
//         mockedHorizontalPodAutoscalerController := &HorizontalPodAutoscalerControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v2beta2a.HorizontalPodAutoscalerHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v2beta2a.HorizontalPodAutoscalerHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v2beta2a.HorizontalPodAutoscalerLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedHorizontalPodAutoscalerController in code that requires HorizontalPodAutoscalerController
//         // and then make assertions.
//
//     }
type HorizontalPodAutoscalerControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v2beta2a.HorizontalPodAutoscalerHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v2beta2a.HorizontalPodAutoscalerHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v2beta2a.HorizontalPodAutoscalerLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v2beta2a.HorizontalPodAutoscalerHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v2beta2a.HorizontalPodAutoscalerHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *HorizontalPodAutoscalerControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v2beta2a.HorizontalPodAutoscalerHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("HorizontalPodAutoscalerControllerMock.AddClusterScopedHandlerFunc: method is nil but HorizontalPodAutoscalerController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v2beta2a.HorizontalPodAutoscalerHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockHorizontalPodAutoscalerControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockHorizontalPodAutoscalerControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerController.AddClusterScopedHandlerCalls())
func (mock *HorizontalPodAutoscalerControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v2beta2a.HorizontalPodAutoscalerHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v2beta2a.HorizontalPodAutoscalerHandlerFunc
	}
	lockHorizontalPodAutoscalerControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockHorizontalPodAutoscalerControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *HorizontalPodAutoscalerControllerMock) AddHandler(ctx context.Context, name string, handler v2beta2a.HorizontalPodAutoscalerHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("HorizontalPodAutoscalerControllerMock.AddHandlerFunc: method is nil but HorizontalPodAutoscalerController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v2beta2a.HorizontalPodAutoscalerHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockHorizontalPodAutoscalerControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockHorizontalPodAutoscalerControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerController.AddHandlerCalls())
func (mock *HorizontalPodAutoscalerControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v2beta2a.HorizontalPodAutoscalerHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v2beta2a.HorizontalPodAutoscalerHandlerFunc
	}
	lockHorizontalPodAutoscalerControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockHorizontalPodAutoscalerControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *HorizontalPodAutoscalerControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("HorizontalPodAutoscalerControllerMock.EnqueueFunc: method is nil but HorizontalPodAutoscalerController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockHorizontalPodAutoscalerControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockHorizontalPodAutoscalerControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerController.EnqueueCalls())
func (mock *HorizontalPodAutoscalerControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockHorizontalPodAutoscalerControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockHorizontalPodAutoscalerControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *HorizontalPodAutoscalerControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("HorizontalPodAutoscalerControllerMock.GenericFunc: method is nil but HorizontalPodAutoscalerController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockHorizontalPodAutoscalerControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockHorizontalPodAutoscalerControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerController.GenericCalls())
func (mock *HorizontalPodAutoscalerControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockHorizontalPodAutoscalerControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockHorizontalPodAutoscalerControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *HorizontalPodAutoscalerControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("HorizontalPodAutoscalerControllerMock.InformerFunc: method is nil but HorizontalPodAutoscalerController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockHorizontalPodAutoscalerControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockHorizontalPodAutoscalerControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerController.InformerCalls())
func (mock *HorizontalPodAutoscalerControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockHorizontalPodAutoscalerControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockHorizontalPodAutoscalerControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *HorizontalPodAutoscalerControllerMock) Lister() v2beta2a.HorizontalPodAutoscalerLister {
	if mock.ListerFunc == nil {
		panic("HorizontalPodAutoscalerControllerMock.ListerFunc: method is nil but HorizontalPodAutoscalerController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockHorizontalPodAutoscalerControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockHorizontalPodAutoscalerControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerController.ListerCalls())
func (mock *HorizontalPodAutoscalerControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockHorizontalPodAutoscalerControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockHorizontalPodAutoscalerControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *HorizontalPodAutoscalerControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("HorizontalPodAutoscalerControllerMock.StartFunc: method is nil but HorizontalPodAutoscalerController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockHorizontalPodAutoscalerControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockHorizontalPodAutoscalerControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerController.StartCalls())
func (mock *HorizontalPodAutoscalerControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockHorizontalPodAutoscalerControllerMockStart.RLock()
	calls = mock.calls.Start
	lockHorizontalPodAutoscalerControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *HorizontalPodAutoscalerControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("HorizontalPodAutoscalerControllerMock.SyncFunc: method is nil but HorizontalPodAutoscalerController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockHorizontalPodAutoscalerControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockHorizontalPodAutoscalerControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerController.SyncCalls())
func (mock *HorizontalPodAutoscalerControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockHorizontalPodAutoscalerControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockHorizontalPodAutoscalerControllerMockSync.RUnlock()
	return calls
}

var (
	lockHorizontalPodAutoscalerInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockHorizontalPodAutoscalerInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockHorizontalPodAutoscalerInterfaceMockAddHandler                sync.RWMutex
	lockHorizontalPodAutoscalerInterfaceMockAddLifecycle              sync.RWMutex
	lockHorizontalPodAutoscalerInterfaceMockController                sync.RWMutex
	lockHorizontalPodAutoscalerInterfaceMockCreate                    sync.RWMutex
	lockHorizontalPodAutoscalerInterfaceMockDelete                    sync.RWMutex
	lockHorizontalPodAutoscalerInterfaceMockDeleteCollection          sync.RWMutex
	lockHorizontalPodAutoscalerInterfaceMockDeleteNamespaced          sync.RWMutex
	lockHorizontalPodAutoscalerInterfaceMockGet                       sync.RWMutex
	lockHorizontalPodAutoscalerInterfaceMockGetNamespaced             sync.RWMutex
	lockHorizontalPodAutoscalerInterfaceMockList                      sync.RWMutex
	lockHorizontalPodAutoscalerInterfaceMockObjectClient              sync.RWMutex
	lockHorizontalPodAutoscalerInterfaceMockUpdate                    sync.RWMutex
	lockHorizontalPodAutoscalerInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that HorizontalPodAutoscalerInterfaceMock does implement HorizontalPodAutoscalerInterface.
// If this is not the case, regenerate this file with moq.
var _ v2beta2a.HorizontalPodAutoscalerInterface = &HorizontalPodAutoscalerInterfaceMock{}

// HorizontalPodAutoscalerInterfaceMock is a mock implementation of HorizontalPodAutoscalerInterface.
//
//     func TestSomethingThatUsesHorizontalPodAutoscalerInterface(t *testing.T) {
//
//         // make and configure a mocked HorizontalPodAutoscalerInterface
//         mockedHorizontalPodAutoscalerInterface := &HorizontalPodAutoscalerInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v2beta2a.HorizontalPodAutoscalerHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v2beta2a.HorizontalPodAutoscalerLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v2beta2a.HorizontalPodAutoscalerHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v2beta2a.HorizontalPodAutoscalerLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v2beta2a.HorizontalPodAutoscalerController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v2beta2.HorizontalPodAutoscaler) (*v2beta2.HorizontalPodAutoscaler, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v2beta2.HorizontalPodAutoscaler, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v2beta2.HorizontalPodAutoscaler, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v2beta2a.HorizontalPodAutoscalerList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v2beta2.HorizontalPodAutoscaler) (*v2beta2.HorizontalPodAutoscaler, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedHorizontalPodAutoscalerInterface in code that requires HorizontalPodAutoscalerInterface
//         // and then make assertions.
//
//     }
type HorizontalPodAutoscalerInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v2beta2a.HorizontalPodAutoscalerHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v2beta2a.HorizontalPodAutoscalerLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v2beta2a.HorizontalPodAutoscalerHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v2beta2a.HorizontalPodAutoscalerLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v2beta2a.HorizontalPodAutoscalerController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v2beta2.HorizontalPodAutoscaler) (*v2beta2.HorizontalPodAutoscaler, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v2beta2.HorizontalPodAutoscaler, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v2beta2.HorizontalPodAutoscaler, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v2beta2a.HorizontalPodAutoscalerList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v2beta2.HorizontalPodAutoscaler) (*v2beta2.HorizontalPodAutoscaler, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v2beta2a.HorizontalPodAutoscalerHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v2beta2a.HorizontalPodAutoscalerLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v2beta2a.HorizontalPodAutoscalerHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v2beta2a.HorizontalPodAutoscalerLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v2beta2.HorizontalPodAutoscaler
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v2beta2.HorizontalPodAutoscaler
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v2beta2a.HorizontalPodAutoscalerHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.AddClusterScopedHandlerFunc: method is nil but HorizontalPodAutoscalerInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v2beta2a.HorizontalPodAutoscalerHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockHorizontalPodAutoscalerInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.AddClusterScopedHandlerCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v2beta2a.HorizontalPodAutoscalerHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v2beta2a.HorizontalPodAutoscalerHandlerFunc
	}
	lockHorizontalPodAutoscalerInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockHorizontalPodAutoscalerInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v2beta2a.HorizontalPodAutoscalerLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but HorizontalPodAutoscalerInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v2beta2a.HorizontalPodAutoscalerLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockHorizontalPodAutoscalerInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.AddClusterScopedLifecycleCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v2beta2a.HorizontalPodAutoscalerLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v2beta2a.HorizontalPodAutoscalerLifecycle
	}
	lockHorizontalPodAutoscalerInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockHorizontalPodAutoscalerInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) AddHandler(ctx context.Context, name string, sync v2beta2a.HorizontalPodAutoscalerHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.AddHandlerFunc: method is nil but HorizontalPodAutoscalerInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v2beta2a.HorizontalPodAutoscalerHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockHorizontalPodAutoscalerInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.AddHandlerCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v2beta2a.HorizontalPodAutoscalerHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v2beta2a.HorizontalPodAutoscalerHandlerFunc
	}
	lockHorizontalPodAutoscalerInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockHorizontalPodAutoscalerInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v2beta2a.HorizontalPodAutoscalerLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.AddLifecycleFunc: method is nil but HorizontalPodAutoscalerInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v2beta2a.HorizontalPodAutoscalerLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockHorizontalPodAutoscalerInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.AddLifecycleCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v2beta2a.HorizontalPodAutoscalerLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v2beta2a.HorizontalPodAutoscalerLifecycle
	}
	lockHorizontalPodAutoscalerInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockHorizontalPodAutoscalerInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) Controller() v2beta2a.HorizontalPodAutoscalerController {
	if mock.ControllerFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.ControllerFunc: method is nil but HorizontalPodAutoscalerInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockHorizontalPodAutoscalerInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.ControllerCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockHorizontalPodAutoscalerInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockHorizontalPodAutoscalerInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) Create(in1 *v2beta2.HorizontalPodAutoscaler) (*v2beta2.HorizontalPodAutoscaler, error) {
	if mock.CreateFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.CreateFunc: method is nil but HorizontalPodAutoscalerInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v2beta2.HorizontalPodAutoscaler
	}{
		In1: in1,
	}
	lockHorizontalPodAutoscalerInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.CreateCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) CreateCalls() []struct {
	In1 *v2beta2.HorizontalPodAutoscaler
} {
	var calls []struct {
		In1 *v2beta2.HorizontalPodAutoscaler
	}
	lockHorizontalPodAutoscalerInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockHorizontalPodAutoscalerInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.DeleteFunc: method is nil but HorizontalPodAutoscalerInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockHorizontalPodAutoscalerInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.DeleteCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockHorizontalPodAutoscalerInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockHorizontalPodAutoscalerInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.DeleteCollectionFunc: method is nil but HorizontalPodAutoscalerInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockHorizontalPodAutoscalerInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.DeleteCollectionCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockHorizontalPodAutoscalerInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockHorizontalPodAutoscalerInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.DeleteNamespacedFunc: method is nil but HorizontalPodAutoscalerInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockHorizontalPodAutoscalerInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.DeleteNamespacedCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockHorizontalPodAutoscalerInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockHorizontalPodAutoscalerInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) Get(name string, opts v1.GetOptions) (*v2beta2.HorizontalPodAutoscaler, error) {
	if mock.GetFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.GetFunc: method is nil but HorizontalPodAutoscalerInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockHorizontalPodAutoscalerInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.GetCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockHorizontalPodAutoscalerInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockHorizontalPodAutoscalerInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v2beta2.HorizontalPodAutoscaler, error) {
	if mock.GetNamespacedFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.GetNamespacedFunc: method is nil but HorizontalPodAutoscalerInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockHorizontalPodAutoscalerInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.GetNamespacedCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockHorizontalPodAutoscalerInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockHorizontalPodAutoscalerInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) List(opts v1.ListOptions) (*v2beta2a.HorizontalPodAutoscalerList, error) {
	if mock.ListFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.ListFunc: method is nil but HorizontalPodAutoscalerInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockHorizontalPodAutoscalerInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.ListCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockHorizontalPodAutoscalerInterfaceMockList.RLock()
	calls = mock.calls.List
	lockHorizontalPodAutoscalerInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.ObjectClientFunc: method is nil but HorizontalPodAutoscalerInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockHorizontalPodAutoscalerInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.ObjectClientCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockHorizontalPodAutoscalerInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockHorizontalPodAutoscalerInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) Update(in1 *v2beta2.HorizontalPodAutoscaler) (*v2beta2.HorizontalPodAutoscaler, error) {
	if mock.UpdateFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.UpdateFunc: method is nil but HorizontalPodAutoscalerInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v2beta2.HorizontalPodAutoscaler
	}{
		In1: in1,
	}
	lockHorizontalPodAutoscalerInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.UpdateCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) UpdateCalls() []struct {
	In1 *v2beta2.HorizontalPodAutoscaler
} {
	var calls []struct {
		In1 *v2beta2.HorizontalPodAutoscaler
	}
	lockHorizontalPodAutoscalerInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockHorizontalPodAutoscalerInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *HorizontalPodAutoscalerInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("HorizontalPodAutoscalerInterfaceMock.WatchFunc: method is nil but HorizontalPodAutoscalerInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockHorizontalPodAutoscalerInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockHorizontalPodAutoscalerInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedHorizontalPodAutoscalerInterface.WatchCalls())
func (mock *HorizontalPodAutoscalerInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockHorizontalPodAutoscalerInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockHorizontalPodAutoscalerInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockHorizontalPodAutoscalersGetterMockHorizontalPodAutoscalers sync.RWMutex
)

// Ensure, that HorizontalPodAutoscalersGetterMock does implement HorizontalPodAutoscalersGetter.
// If this is not the case, regenerate this file with moq.
var _ v2beta2a.HorizontalPodAutoscalersGetter = &HorizontalPodAutoscalersGetterMock{}

// HorizontalPodAutoscalersGetterMock is a mock implementation of HorizontalPodAutoscalersGetter.
//
//     func TestSomethingThatUsesHorizontalPodAutoscalersGetter(t *testing.T) {
//
//         // make and configure a mocked HorizontalPodAutoscalersGetter
//         mockedHorizontalPodAutoscalersGetter := &HorizontalPodAutoscalersGetterMock{
//             HorizontalPodAutoscalersFunc: func(namespace string) v2beta2a.HorizontalPodAutoscalerInterface {
// 	               panic("mock out the HorizontalPodAutoscalers method")
//             },
//         }
//
//         // use mockedHorizontalPodAutoscalersGetter in code that requires HorizontalPodAutoscalersGetter
//         // and then make assertions.
//
//     }
type HorizontalPodAutoscalersGetterMock struct {
	// HorizontalPodAutoscalersFunc mocks the HorizontalPodAutoscalers method.
	HorizontalPodAutoscalersFunc func(namespace string) v2beta2a.HorizontalPodAutoscalerInterface

	// calls tracks calls to the methods.
	calls struct {
		// HorizontalPodAutoscalers holds details about calls to the HorizontalPodAutoscalers method.
		HorizontalPodAutoscalers []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// HorizontalPodAutoscalers calls HorizontalPodAutoscalersFunc.
func (mock *HorizontalPodAutoscalersGetterMock) HorizontalPodAutoscalers(namespace string) v2beta2a.HorizontalPodAutoscalerInterface {
	if mock.HorizontalPodAutoscalersFunc == nil {
		panic("HorizontalPodAutoscalersGetterMock.HorizontalPodAutoscalersFunc: method is nil but HorizontalPodAutoscalersGetter.HorizontalPodAutoscalers was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockHorizontalPodAutoscalersGetterMockHorizontalPodAutoscalers.Lock()
	mock.calls.HorizontalPodAutoscalers = append(mock.calls.HorizontalPodAutoscalers, callInfo)
	lockHorizontalPodAutoscalersGetterMockHorizontalPodAutoscalers.Unlock()
	return mock.HorizontalPodAutoscalersFunc(namespace)
}

// HorizontalPodAutoscalersCalls gets all the calls that were made to HorizontalPodAutoscalers.
// Check the length with:
//     len(mockedHorizontalPodAutoscalersGetter.HorizontalPodAutoscalersCalls())
func (mock *HorizontalPodAutoscalersGetterMock) HorizontalPodAutoscalersCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockHorizontalPodAutoscalersGetterMockHorizontalPodAutoscalers.RLock()
	calls = mock.calls.HorizontalPodAutoscalers
	lockHorizontalPodAutoscalersGetterMockHorizontalPodAutoscalers.RUnlock()
	return calls
}
