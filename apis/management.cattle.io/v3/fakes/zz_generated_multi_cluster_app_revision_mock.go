// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockMultiClusterAppRevisionListerMockGet  sync.RWMutex
	lockMultiClusterAppRevisionListerMockList sync.RWMutex
)

// Ensure, that MultiClusterAppRevisionListerMock does implement MultiClusterAppRevisionLister.
// If this is not the case, regenerate this file with moq.
var _ v3.MultiClusterAppRevisionLister = &MultiClusterAppRevisionListerMock{}

// MultiClusterAppRevisionListerMock is a mock implementation of MultiClusterAppRevisionLister.
//
//     func TestSomethingThatUsesMultiClusterAppRevisionLister(t *testing.T) {
//
//         // make and configure a mocked MultiClusterAppRevisionLister
//         mockedMultiClusterAppRevisionLister := &MultiClusterAppRevisionListerMock{
//             GetFunc: func(namespace string, name string) (*v3.MultiClusterAppRevision, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.MultiClusterAppRevision, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedMultiClusterAppRevisionLister in code that requires MultiClusterAppRevisionLister
//         // and then make assertions.
//
//     }
type MultiClusterAppRevisionListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.MultiClusterAppRevision, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.MultiClusterAppRevision, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *MultiClusterAppRevisionListerMock) Get(namespace string, name string) (*v3.MultiClusterAppRevision, error) {
	if mock.GetFunc == nil {
		panic("MultiClusterAppRevisionListerMock.GetFunc: method is nil but MultiClusterAppRevisionLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockMultiClusterAppRevisionListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockMultiClusterAppRevisionListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedMultiClusterAppRevisionLister.GetCalls())
func (mock *MultiClusterAppRevisionListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockMultiClusterAppRevisionListerMockGet.RLock()
	calls = mock.calls.Get
	lockMultiClusterAppRevisionListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *MultiClusterAppRevisionListerMock) List(namespace string, selector labels.Selector) ([]*v3.MultiClusterAppRevision, error) {
	if mock.ListFunc == nil {
		panic("MultiClusterAppRevisionListerMock.ListFunc: method is nil but MultiClusterAppRevisionLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockMultiClusterAppRevisionListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockMultiClusterAppRevisionListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedMultiClusterAppRevisionLister.ListCalls())
func (mock *MultiClusterAppRevisionListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockMultiClusterAppRevisionListerMockList.RLock()
	calls = mock.calls.List
	lockMultiClusterAppRevisionListerMockList.RUnlock()
	return calls
}

var (
	lockMultiClusterAppRevisionControllerMockAddClusterScopedHandler sync.RWMutex
	lockMultiClusterAppRevisionControllerMockAddFeatureHandler       sync.RWMutex
	lockMultiClusterAppRevisionControllerMockAddHandler              sync.RWMutex
	lockMultiClusterAppRevisionControllerMockEnqueue                 sync.RWMutex
	lockMultiClusterAppRevisionControllerMockGeneric                 sync.RWMutex
	lockMultiClusterAppRevisionControllerMockInformer                sync.RWMutex
	lockMultiClusterAppRevisionControllerMockLister                  sync.RWMutex
	lockMultiClusterAppRevisionControllerMockStart                   sync.RWMutex
	lockMultiClusterAppRevisionControllerMockSync                    sync.RWMutex
)

// Ensure, that MultiClusterAppRevisionControllerMock does implement MultiClusterAppRevisionController.
// If this is not the case, regenerate this file with moq.
var _ v3.MultiClusterAppRevisionController = &MultiClusterAppRevisionControllerMock{}

// MultiClusterAppRevisionControllerMock is a mock implementation of MultiClusterAppRevisionController.
//
//     func TestSomethingThatUsesMultiClusterAppRevisionController(t *testing.T) {
//
//         // make and configure a mocked MultiClusterAppRevisionController
//         mockedMultiClusterAppRevisionController := &MultiClusterAppRevisionControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.MultiClusterAppRevisionHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.MultiClusterAppRevisionHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.MultiClusterAppRevisionHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.MultiClusterAppRevisionLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedMultiClusterAppRevisionController in code that requires MultiClusterAppRevisionController
//         // and then make assertions.
//
//     }
type MultiClusterAppRevisionControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.MultiClusterAppRevisionHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.MultiClusterAppRevisionHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.MultiClusterAppRevisionHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.MultiClusterAppRevisionLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.MultiClusterAppRevisionHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.MultiClusterAppRevisionHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.MultiClusterAppRevisionHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *MultiClusterAppRevisionControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.MultiClusterAppRevisionHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("MultiClusterAppRevisionControllerMock.AddClusterScopedHandlerFunc: method is nil but MultiClusterAppRevisionController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.MultiClusterAppRevisionHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockMultiClusterAppRevisionControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockMultiClusterAppRevisionControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedMultiClusterAppRevisionController.AddClusterScopedHandlerCalls())
func (mock *MultiClusterAppRevisionControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.MultiClusterAppRevisionHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.MultiClusterAppRevisionHandlerFunc
	}
	lockMultiClusterAppRevisionControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockMultiClusterAppRevisionControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *MultiClusterAppRevisionControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.MultiClusterAppRevisionHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("MultiClusterAppRevisionControllerMock.AddFeatureHandlerFunc: method is nil but MultiClusterAppRevisionController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.MultiClusterAppRevisionHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockMultiClusterAppRevisionControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockMultiClusterAppRevisionControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedMultiClusterAppRevisionController.AddFeatureHandlerCalls())
func (mock *MultiClusterAppRevisionControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.MultiClusterAppRevisionHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.MultiClusterAppRevisionHandlerFunc
	}
	lockMultiClusterAppRevisionControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockMultiClusterAppRevisionControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *MultiClusterAppRevisionControllerMock) AddHandler(ctx context.Context, name string, handler v3.MultiClusterAppRevisionHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("MultiClusterAppRevisionControllerMock.AddHandlerFunc: method is nil but MultiClusterAppRevisionController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.MultiClusterAppRevisionHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockMultiClusterAppRevisionControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockMultiClusterAppRevisionControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedMultiClusterAppRevisionController.AddHandlerCalls())
func (mock *MultiClusterAppRevisionControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.MultiClusterAppRevisionHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.MultiClusterAppRevisionHandlerFunc
	}
	lockMultiClusterAppRevisionControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockMultiClusterAppRevisionControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *MultiClusterAppRevisionControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("MultiClusterAppRevisionControllerMock.EnqueueFunc: method is nil but MultiClusterAppRevisionController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockMultiClusterAppRevisionControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockMultiClusterAppRevisionControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedMultiClusterAppRevisionController.EnqueueCalls())
func (mock *MultiClusterAppRevisionControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockMultiClusterAppRevisionControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockMultiClusterAppRevisionControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *MultiClusterAppRevisionControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("MultiClusterAppRevisionControllerMock.GenericFunc: method is nil but MultiClusterAppRevisionController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockMultiClusterAppRevisionControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockMultiClusterAppRevisionControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedMultiClusterAppRevisionController.GenericCalls())
func (mock *MultiClusterAppRevisionControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockMultiClusterAppRevisionControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockMultiClusterAppRevisionControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *MultiClusterAppRevisionControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("MultiClusterAppRevisionControllerMock.InformerFunc: method is nil but MultiClusterAppRevisionController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockMultiClusterAppRevisionControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockMultiClusterAppRevisionControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedMultiClusterAppRevisionController.InformerCalls())
func (mock *MultiClusterAppRevisionControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockMultiClusterAppRevisionControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockMultiClusterAppRevisionControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *MultiClusterAppRevisionControllerMock) Lister() v3.MultiClusterAppRevisionLister {
	if mock.ListerFunc == nil {
		panic("MultiClusterAppRevisionControllerMock.ListerFunc: method is nil but MultiClusterAppRevisionController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockMultiClusterAppRevisionControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockMultiClusterAppRevisionControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedMultiClusterAppRevisionController.ListerCalls())
func (mock *MultiClusterAppRevisionControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockMultiClusterAppRevisionControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockMultiClusterAppRevisionControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *MultiClusterAppRevisionControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("MultiClusterAppRevisionControllerMock.StartFunc: method is nil but MultiClusterAppRevisionController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockMultiClusterAppRevisionControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockMultiClusterAppRevisionControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedMultiClusterAppRevisionController.StartCalls())
func (mock *MultiClusterAppRevisionControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockMultiClusterAppRevisionControllerMockStart.RLock()
	calls = mock.calls.Start
	lockMultiClusterAppRevisionControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *MultiClusterAppRevisionControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("MultiClusterAppRevisionControllerMock.SyncFunc: method is nil but MultiClusterAppRevisionController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockMultiClusterAppRevisionControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockMultiClusterAppRevisionControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedMultiClusterAppRevisionController.SyncCalls())
func (mock *MultiClusterAppRevisionControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockMultiClusterAppRevisionControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockMultiClusterAppRevisionControllerMockSync.RUnlock()
	return calls
}

var (
	lockMultiClusterAppRevisionInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockAddFeatureHandler         sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockAddHandler                sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockAddLifecycle              sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockController                sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockCreate                    sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockDelete                    sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockDeleteCollection          sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockDeleteNamespaced          sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockGet                       sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockGetNamespaced             sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockList                      sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockObjectClient              sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockUpdate                    sync.RWMutex
	lockMultiClusterAppRevisionInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that MultiClusterAppRevisionInterfaceMock does implement MultiClusterAppRevisionInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.MultiClusterAppRevisionInterface = &MultiClusterAppRevisionInterfaceMock{}

// MultiClusterAppRevisionInterfaceMock is a mock implementation of MultiClusterAppRevisionInterface.
//
//     func TestSomethingThatUsesMultiClusterAppRevisionInterface(t *testing.T) {
//
//         // make and configure a mocked MultiClusterAppRevisionInterface
//         mockedMultiClusterAppRevisionInterface := &MultiClusterAppRevisionInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.MultiClusterAppRevisionHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.MultiClusterAppRevisionLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.MultiClusterAppRevisionHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.MultiClusterAppRevisionLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.MultiClusterAppRevisionHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.MultiClusterAppRevisionLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.MultiClusterAppRevisionController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.MultiClusterAppRevision) (*v3.MultiClusterAppRevision, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.MultiClusterAppRevision, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.MultiClusterAppRevision, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.MultiClusterAppRevisionList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.MultiClusterAppRevision) (*v3.MultiClusterAppRevision, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedMultiClusterAppRevisionInterface in code that requires MultiClusterAppRevisionInterface
//         // and then make assertions.
//
//     }
type MultiClusterAppRevisionInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.MultiClusterAppRevisionHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.MultiClusterAppRevisionLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.MultiClusterAppRevisionHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.MultiClusterAppRevisionLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.MultiClusterAppRevisionHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.MultiClusterAppRevisionLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.MultiClusterAppRevisionController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.MultiClusterAppRevision) (*v3.MultiClusterAppRevision, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.MultiClusterAppRevision, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.MultiClusterAppRevision, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.MultiClusterAppRevisionList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.MultiClusterAppRevision) (*v3.MultiClusterAppRevision, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.MultiClusterAppRevisionHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.MultiClusterAppRevisionLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.MultiClusterAppRevisionHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.MultiClusterAppRevisionLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.MultiClusterAppRevisionHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.MultiClusterAppRevisionLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.MultiClusterAppRevision
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.MultiClusterAppRevision
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.MultiClusterAppRevisionHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.AddClusterScopedHandlerFunc: method is nil but MultiClusterAppRevisionInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.MultiClusterAppRevisionHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockMultiClusterAppRevisionInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockMultiClusterAppRevisionInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.AddClusterScopedHandlerCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.MultiClusterAppRevisionHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.MultiClusterAppRevisionHandlerFunc
	}
	lockMultiClusterAppRevisionInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockMultiClusterAppRevisionInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.MultiClusterAppRevisionLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but MultiClusterAppRevisionInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.MultiClusterAppRevisionLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockMultiClusterAppRevisionInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockMultiClusterAppRevisionInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.AddClusterScopedLifecycleCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.MultiClusterAppRevisionLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.MultiClusterAppRevisionLifecycle
	}
	lockMultiClusterAppRevisionInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockMultiClusterAppRevisionInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.MultiClusterAppRevisionHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.AddFeatureHandlerFunc: method is nil but MultiClusterAppRevisionInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.MultiClusterAppRevisionHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockMultiClusterAppRevisionInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockMultiClusterAppRevisionInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.AddFeatureHandlerCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.MultiClusterAppRevisionHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.MultiClusterAppRevisionHandlerFunc
	}
	lockMultiClusterAppRevisionInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockMultiClusterAppRevisionInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.MultiClusterAppRevisionLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.AddFeatureLifecycleFunc: method is nil but MultiClusterAppRevisionInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.MultiClusterAppRevisionLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockMultiClusterAppRevisionInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockMultiClusterAppRevisionInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.AddFeatureLifecycleCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v3.MultiClusterAppRevisionLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.MultiClusterAppRevisionLifecycle
	}
	lockMultiClusterAppRevisionInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockMultiClusterAppRevisionInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.MultiClusterAppRevisionHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.AddHandlerFunc: method is nil but MultiClusterAppRevisionInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.MultiClusterAppRevisionHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockMultiClusterAppRevisionInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockMultiClusterAppRevisionInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.AddHandlerCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.MultiClusterAppRevisionHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.MultiClusterAppRevisionHandlerFunc
	}
	lockMultiClusterAppRevisionInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockMultiClusterAppRevisionInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.MultiClusterAppRevisionLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.AddLifecycleFunc: method is nil but MultiClusterAppRevisionInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.MultiClusterAppRevisionLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockMultiClusterAppRevisionInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockMultiClusterAppRevisionInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.AddLifecycleCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.MultiClusterAppRevisionLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.MultiClusterAppRevisionLifecycle
	}
	lockMultiClusterAppRevisionInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockMultiClusterAppRevisionInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) Controller() v3.MultiClusterAppRevisionController {
	if mock.ControllerFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.ControllerFunc: method is nil but MultiClusterAppRevisionInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockMultiClusterAppRevisionInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockMultiClusterAppRevisionInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.ControllerCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockMultiClusterAppRevisionInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockMultiClusterAppRevisionInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) Create(in1 *v3.MultiClusterAppRevision) (*v3.MultiClusterAppRevision, error) {
	if mock.CreateFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.CreateFunc: method is nil but MultiClusterAppRevisionInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.MultiClusterAppRevision
	}{
		In1: in1,
	}
	lockMultiClusterAppRevisionInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockMultiClusterAppRevisionInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.CreateCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) CreateCalls() []struct {
	In1 *v3.MultiClusterAppRevision
} {
	var calls []struct {
		In1 *v3.MultiClusterAppRevision
	}
	lockMultiClusterAppRevisionInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockMultiClusterAppRevisionInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.DeleteFunc: method is nil but MultiClusterAppRevisionInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockMultiClusterAppRevisionInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockMultiClusterAppRevisionInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.DeleteCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockMultiClusterAppRevisionInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockMultiClusterAppRevisionInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.DeleteCollectionFunc: method is nil but MultiClusterAppRevisionInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockMultiClusterAppRevisionInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockMultiClusterAppRevisionInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.DeleteCollectionCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockMultiClusterAppRevisionInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockMultiClusterAppRevisionInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.DeleteNamespacedFunc: method is nil but MultiClusterAppRevisionInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockMultiClusterAppRevisionInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockMultiClusterAppRevisionInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.DeleteNamespacedCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockMultiClusterAppRevisionInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockMultiClusterAppRevisionInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.MultiClusterAppRevision, error) {
	if mock.GetFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.GetFunc: method is nil but MultiClusterAppRevisionInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockMultiClusterAppRevisionInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockMultiClusterAppRevisionInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.GetCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockMultiClusterAppRevisionInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockMultiClusterAppRevisionInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.MultiClusterAppRevision, error) {
	if mock.GetNamespacedFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.GetNamespacedFunc: method is nil but MultiClusterAppRevisionInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockMultiClusterAppRevisionInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockMultiClusterAppRevisionInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.GetNamespacedCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockMultiClusterAppRevisionInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockMultiClusterAppRevisionInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) List(opts v1.ListOptions) (*v3.MultiClusterAppRevisionList, error) {
	if mock.ListFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.ListFunc: method is nil but MultiClusterAppRevisionInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockMultiClusterAppRevisionInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockMultiClusterAppRevisionInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.ListCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockMultiClusterAppRevisionInterfaceMockList.RLock()
	calls = mock.calls.List
	lockMultiClusterAppRevisionInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.ObjectClientFunc: method is nil but MultiClusterAppRevisionInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockMultiClusterAppRevisionInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockMultiClusterAppRevisionInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.ObjectClientCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockMultiClusterAppRevisionInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockMultiClusterAppRevisionInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) Update(in1 *v3.MultiClusterAppRevision) (*v3.MultiClusterAppRevision, error) {
	if mock.UpdateFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.UpdateFunc: method is nil but MultiClusterAppRevisionInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.MultiClusterAppRevision
	}{
		In1: in1,
	}
	lockMultiClusterAppRevisionInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockMultiClusterAppRevisionInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.UpdateCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) UpdateCalls() []struct {
	In1 *v3.MultiClusterAppRevision
} {
	var calls []struct {
		In1 *v3.MultiClusterAppRevision
	}
	lockMultiClusterAppRevisionInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockMultiClusterAppRevisionInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *MultiClusterAppRevisionInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("MultiClusterAppRevisionInterfaceMock.WatchFunc: method is nil but MultiClusterAppRevisionInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockMultiClusterAppRevisionInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockMultiClusterAppRevisionInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedMultiClusterAppRevisionInterface.WatchCalls())
func (mock *MultiClusterAppRevisionInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockMultiClusterAppRevisionInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockMultiClusterAppRevisionInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockMultiClusterAppRevisionsGetterMockMultiClusterAppRevisions sync.RWMutex
)

// Ensure, that MultiClusterAppRevisionsGetterMock does implement MultiClusterAppRevisionsGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.MultiClusterAppRevisionsGetter = &MultiClusterAppRevisionsGetterMock{}

// MultiClusterAppRevisionsGetterMock is a mock implementation of MultiClusterAppRevisionsGetter.
//
//     func TestSomethingThatUsesMultiClusterAppRevisionsGetter(t *testing.T) {
//
//         // make and configure a mocked MultiClusterAppRevisionsGetter
//         mockedMultiClusterAppRevisionsGetter := &MultiClusterAppRevisionsGetterMock{
//             MultiClusterAppRevisionsFunc: func(namespace string) v3.MultiClusterAppRevisionInterface {
// 	               panic("mock out the MultiClusterAppRevisions method")
//             },
//         }
//
//         // use mockedMultiClusterAppRevisionsGetter in code that requires MultiClusterAppRevisionsGetter
//         // and then make assertions.
//
//     }
type MultiClusterAppRevisionsGetterMock struct {
	// MultiClusterAppRevisionsFunc mocks the MultiClusterAppRevisions method.
	MultiClusterAppRevisionsFunc func(namespace string) v3.MultiClusterAppRevisionInterface

	// calls tracks calls to the methods.
	calls struct {
		// MultiClusterAppRevisions holds details about calls to the MultiClusterAppRevisions method.
		MultiClusterAppRevisions []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// MultiClusterAppRevisions calls MultiClusterAppRevisionsFunc.
func (mock *MultiClusterAppRevisionsGetterMock) MultiClusterAppRevisions(namespace string) v3.MultiClusterAppRevisionInterface {
	if mock.MultiClusterAppRevisionsFunc == nil {
		panic("MultiClusterAppRevisionsGetterMock.MultiClusterAppRevisionsFunc: method is nil but MultiClusterAppRevisionsGetter.MultiClusterAppRevisions was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockMultiClusterAppRevisionsGetterMockMultiClusterAppRevisions.Lock()
	mock.calls.MultiClusterAppRevisions = append(mock.calls.MultiClusterAppRevisions, callInfo)
	lockMultiClusterAppRevisionsGetterMockMultiClusterAppRevisions.Unlock()
	return mock.MultiClusterAppRevisionsFunc(namespace)
}

// MultiClusterAppRevisionsCalls gets all the calls that were made to MultiClusterAppRevisions.
// Check the length with:
//     len(mockedMultiClusterAppRevisionsGetter.MultiClusterAppRevisionsCalls())
func (mock *MultiClusterAppRevisionsGetterMock) MultiClusterAppRevisionsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockMultiClusterAppRevisionsGetterMockMultiClusterAppRevisions.RLock()
	calls = mock.calls.MultiClusterAppRevisions
	lockMultiClusterAppRevisionsGetterMockMultiClusterAppRevisions.RUnlock()
	return calls
}
