// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockProjectRoleTemplateBindingListerMockGet  sync.RWMutex
	lockProjectRoleTemplateBindingListerMockList sync.RWMutex
)

// Ensure, that ProjectRoleTemplateBindingListerMock does implement ProjectRoleTemplateBindingLister.
// If this is not the case, regenerate this file with moq.
var _ v3.ProjectRoleTemplateBindingLister = &ProjectRoleTemplateBindingListerMock{}

// ProjectRoleTemplateBindingListerMock is a mock implementation of ProjectRoleTemplateBindingLister.
//
//     func TestSomethingThatUsesProjectRoleTemplateBindingLister(t *testing.T) {
//
//         // make and configure a mocked ProjectRoleTemplateBindingLister
//         mockedProjectRoleTemplateBindingLister := &ProjectRoleTemplateBindingListerMock{
//             GetFunc: func(namespace string, name string) (*v3.ProjectRoleTemplateBinding, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.ProjectRoleTemplateBinding, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedProjectRoleTemplateBindingLister in code that requires ProjectRoleTemplateBindingLister
//         // and then make assertions.
//
//     }
type ProjectRoleTemplateBindingListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.ProjectRoleTemplateBinding, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.ProjectRoleTemplateBinding, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *ProjectRoleTemplateBindingListerMock) Get(namespace string, name string) (*v3.ProjectRoleTemplateBinding, error) {
	if mock.GetFunc == nil {
		panic("ProjectRoleTemplateBindingListerMock.GetFunc: method is nil but ProjectRoleTemplateBindingLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockProjectRoleTemplateBindingListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockProjectRoleTemplateBindingListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingLister.GetCalls())
func (mock *ProjectRoleTemplateBindingListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockProjectRoleTemplateBindingListerMockGet.RLock()
	calls = mock.calls.Get
	lockProjectRoleTemplateBindingListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ProjectRoleTemplateBindingListerMock) List(namespace string, selector labels.Selector) ([]*v3.ProjectRoleTemplateBinding, error) {
	if mock.ListFunc == nil {
		panic("ProjectRoleTemplateBindingListerMock.ListFunc: method is nil but ProjectRoleTemplateBindingLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockProjectRoleTemplateBindingListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockProjectRoleTemplateBindingListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingLister.ListCalls())
func (mock *ProjectRoleTemplateBindingListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockProjectRoleTemplateBindingListerMockList.RLock()
	calls = mock.calls.List
	lockProjectRoleTemplateBindingListerMockList.RUnlock()
	return calls
}

var (
	lockProjectRoleTemplateBindingControllerMockAddClusterScopedHandler sync.RWMutex
	lockProjectRoleTemplateBindingControllerMockAddFeatureHandler       sync.RWMutex
	lockProjectRoleTemplateBindingControllerMockAddHandler              sync.RWMutex
	lockProjectRoleTemplateBindingControllerMockEnqueue                 sync.RWMutex
	lockProjectRoleTemplateBindingControllerMockGeneric                 sync.RWMutex
	lockProjectRoleTemplateBindingControllerMockInformer                sync.RWMutex
	lockProjectRoleTemplateBindingControllerMockLister                  sync.RWMutex
	lockProjectRoleTemplateBindingControllerMockStart                   sync.RWMutex
	lockProjectRoleTemplateBindingControllerMockSync                    sync.RWMutex
)

// Ensure, that ProjectRoleTemplateBindingControllerMock does implement ProjectRoleTemplateBindingController.
// If this is not the case, regenerate this file with moq.
var _ v3.ProjectRoleTemplateBindingController = &ProjectRoleTemplateBindingControllerMock{}

// ProjectRoleTemplateBindingControllerMock is a mock implementation of ProjectRoleTemplateBindingController.
//
//     func TestSomethingThatUsesProjectRoleTemplateBindingController(t *testing.T) {
//
//         // make and configure a mocked ProjectRoleTemplateBindingController
//         mockedProjectRoleTemplateBindingController := &ProjectRoleTemplateBindingControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.ProjectRoleTemplateBindingHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ProjectRoleTemplateBindingHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.ProjectRoleTemplateBindingHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.ProjectRoleTemplateBindingLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedProjectRoleTemplateBindingController in code that requires ProjectRoleTemplateBindingController
//         // and then make assertions.
//
//     }
type ProjectRoleTemplateBindingControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.ProjectRoleTemplateBindingHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ProjectRoleTemplateBindingHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.ProjectRoleTemplateBindingHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.ProjectRoleTemplateBindingLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.ProjectRoleTemplateBindingHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ProjectRoleTemplateBindingHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.ProjectRoleTemplateBindingHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ProjectRoleTemplateBindingControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.ProjectRoleTemplateBindingHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ProjectRoleTemplateBindingControllerMock.AddClusterScopedHandlerFunc: method is nil but ProjectRoleTemplateBindingController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.ProjectRoleTemplateBindingHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockProjectRoleTemplateBindingControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockProjectRoleTemplateBindingControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingController.AddClusterScopedHandlerCalls())
func (mock *ProjectRoleTemplateBindingControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.ProjectRoleTemplateBindingHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.ProjectRoleTemplateBindingHandlerFunc
	}
	lockProjectRoleTemplateBindingControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockProjectRoleTemplateBindingControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *ProjectRoleTemplateBindingControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ProjectRoleTemplateBindingHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("ProjectRoleTemplateBindingControllerMock.AddFeatureHandlerFunc: method is nil but ProjectRoleTemplateBindingController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ProjectRoleTemplateBindingHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockProjectRoleTemplateBindingControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockProjectRoleTemplateBindingControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingController.AddFeatureHandlerCalls())
func (mock *ProjectRoleTemplateBindingControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.ProjectRoleTemplateBindingHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ProjectRoleTemplateBindingHandlerFunc
	}
	lockProjectRoleTemplateBindingControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockProjectRoleTemplateBindingControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ProjectRoleTemplateBindingControllerMock) AddHandler(ctx context.Context, name string, handler v3.ProjectRoleTemplateBindingHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ProjectRoleTemplateBindingControllerMock.AddHandlerFunc: method is nil but ProjectRoleTemplateBindingController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.ProjectRoleTemplateBindingHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockProjectRoleTemplateBindingControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockProjectRoleTemplateBindingControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingController.AddHandlerCalls())
func (mock *ProjectRoleTemplateBindingControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.ProjectRoleTemplateBindingHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.ProjectRoleTemplateBindingHandlerFunc
	}
	lockProjectRoleTemplateBindingControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockProjectRoleTemplateBindingControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ProjectRoleTemplateBindingControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("ProjectRoleTemplateBindingControllerMock.EnqueueFunc: method is nil but ProjectRoleTemplateBindingController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockProjectRoleTemplateBindingControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockProjectRoleTemplateBindingControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingController.EnqueueCalls())
func (mock *ProjectRoleTemplateBindingControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockProjectRoleTemplateBindingControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockProjectRoleTemplateBindingControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *ProjectRoleTemplateBindingControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("ProjectRoleTemplateBindingControllerMock.GenericFunc: method is nil but ProjectRoleTemplateBindingController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockProjectRoleTemplateBindingControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockProjectRoleTemplateBindingControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingController.GenericCalls())
func (mock *ProjectRoleTemplateBindingControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockProjectRoleTemplateBindingControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockProjectRoleTemplateBindingControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ProjectRoleTemplateBindingControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ProjectRoleTemplateBindingControllerMock.InformerFunc: method is nil but ProjectRoleTemplateBindingController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockProjectRoleTemplateBindingControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockProjectRoleTemplateBindingControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingController.InformerCalls())
func (mock *ProjectRoleTemplateBindingControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockProjectRoleTemplateBindingControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockProjectRoleTemplateBindingControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *ProjectRoleTemplateBindingControllerMock) Lister() v3.ProjectRoleTemplateBindingLister {
	if mock.ListerFunc == nil {
		panic("ProjectRoleTemplateBindingControllerMock.ListerFunc: method is nil but ProjectRoleTemplateBindingController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockProjectRoleTemplateBindingControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockProjectRoleTemplateBindingControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingController.ListerCalls())
func (mock *ProjectRoleTemplateBindingControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockProjectRoleTemplateBindingControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockProjectRoleTemplateBindingControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *ProjectRoleTemplateBindingControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("ProjectRoleTemplateBindingControllerMock.StartFunc: method is nil but ProjectRoleTemplateBindingController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockProjectRoleTemplateBindingControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockProjectRoleTemplateBindingControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingController.StartCalls())
func (mock *ProjectRoleTemplateBindingControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockProjectRoleTemplateBindingControllerMockStart.RLock()
	calls = mock.calls.Start
	lockProjectRoleTemplateBindingControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *ProjectRoleTemplateBindingControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("ProjectRoleTemplateBindingControllerMock.SyncFunc: method is nil but ProjectRoleTemplateBindingController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockProjectRoleTemplateBindingControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockProjectRoleTemplateBindingControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingController.SyncCalls())
func (mock *ProjectRoleTemplateBindingControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockProjectRoleTemplateBindingControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockProjectRoleTemplateBindingControllerMockSync.RUnlock()
	return calls
}

var (
	lockProjectRoleTemplateBindingInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockAddFeatureHandler         sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockAddHandler                sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockAddLifecycle              sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockController                sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockCreate                    sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockDelete                    sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockDeleteCollection          sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockDeleteNamespaced          sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockGet                       sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockGetNamespaced             sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockList                      sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockObjectClient              sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockUpdate                    sync.RWMutex
	lockProjectRoleTemplateBindingInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that ProjectRoleTemplateBindingInterfaceMock does implement ProjectRoleTemplateBindingInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.ProjectRoleTemplateBindingInterface = &ProjectRoleTemplateBindingInterfaceMock{}

// ProjectRoleTemplateBindingInterfaceMock is a mock implementation of ProjectRoleTemplateBindingInterface.
//
//     func TestSomethingThatUsesProjectRoleTemplateBindingInterface(t *testing.T) {
//
//         // make and configure a mocked ProjectRoleTemplateBindingInterface
//         mockedProjectRoleTemplateBindingInterface := &ProjectRoleTemplateBindingInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.ProjectRoleTemplateBindingHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.ProjectRoleTemplateBindingLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ProjectRoleTemplateBindingHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.ProjectRoleTemplateBindingLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.ProjectRoleTemplateBindingHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.ProjectRoleTemplateBindingLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.ProjectRoleTemplateBindingController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.ProjectRoleTemplateBinding) (*v3.ProjectRoleTemplateBinding, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.ProjectRoleTemplateBinding, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.ProjectRoleTemplateBinding, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.ProjectRoleTemplateBindingList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.ProjectRoleTemplateBinding) (*v3.ProjectRoleTemplateBinding, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedProjectRoleTemplateBindingInterface in code that requires ProjectRoleTemplateBindingInterface
//         // and then make assertions.
//
//     }
type ProjectRoleTemplateBindingInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.ProjectRoleTemplateBindingHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.ProjectRoleTemplateBindingLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ProjectRoleTemplateBindingHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.ProjectRoleTemplateBindingLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.ProjectRoleTemplateBindingHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.ProjectRoleTemplateBindingLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.ProjectRoleTemplateBindingController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.ProjectRoleTemplateBinding) (*v3.ProjectRoleTemplateBinding, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.ProjectRoleTemplateBinding, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.ProjectRoleTemplateBinding, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.ProjectRoleTemplateBindingList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.ProjectRoleTemplateBinding) (*v3.ProjectRoleTemplateBinding, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.ProjectRoleTemplateBindingHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ProjectRoleTemplateBindingLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ProjectRoleTemplateBindingHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ProjectRoleTemplateBindingLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ProjectRoleTemplateBindingHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ProjectRoleTemplateBindingLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.ProjectRoleTemplateBinding
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.ProjectRoleTemplateBinding
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.ProjectRoleTemplateBindingHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.AddClusterScopedHandlerFunc: method is nil but ProjectRoleTemplateBindingInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.ProjectRoleTemplateBindingHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockProjectRoleTemplateBindingInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.AddClusterScopedHandlerCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.ProjectRoleTemplateBindingHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.ProjectRoleTemplateBindingHandlerFunc
	}
	lockProjectRoleTemplateBindingInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockProjectRoleTemplateBindingInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.ProjectRoleTemplateBindingLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but ProjectRoleTemplateBindingInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.ProjectRoleTemplateBindingLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockProjectRoleTemplateBindingInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.AddClusterScopedLifecycleCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.ProjectRoleTemplateBindingLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.ProjectRoleTemplateBindingLifecycle
	}
	lockProjectRoleTemplateBindingInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockProjectRoleTemplateBindingInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ProjectRoleTemplateBindingHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.AddFeatureHandlerFunc: method is nil but ProjectRoleTemplateBindingInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ProjectRoleTemplateBindingHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockProjectRoleTemplateBindingInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.AddFeatureHandlerCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.ProjectRoleTemplateBindingHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ProjectRoleTemplateBindingHandlerFunc
	}
	lockProjectRoleTemplateBindingInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockProjectRoleTemplateBindingInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.ProjectRoleTemplateBindingLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.AddFeatureLifecycleFunc: method is nil but ProjectRoleTemplateBindingInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.ProjectRoleTemplateBindingLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockProjectRoleTemplateBindingInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.AddFeatureLifecycleCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v3.ProjectRoleTemplateBindingLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.ProjectRoleTemplateBindingLifecycle
	}
	lockProjectRoleTemplateBindingInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockProjectRoleTemplateBindingInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.ProjectRoleTemplateBindingHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.AddHandlerFunc: method is nil but ProjectRoleTemplateBindingInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.ProjectRoleTemplateBindingHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockProjectRoleTemplateBindingInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.AddHandlerCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.ProjectRoleTemplateBindingHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.ProjectRoleTemplateBindingHandlerFunc
	}
	lockProjectRoleTemplateBindingInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockProjectRoleTemplateBindingInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.ProjectRoleTemplateBindingLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.AddLifecycleFunc: method is nil but ProjectRoleTemplateBindingInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.ProjectRoleTemplateBindingLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockProjectRoleTemplateBindingInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.AddLifecycleCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.ProjectRoleTemplateBindingLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.ProjectRoleTemplateBindingLifecycle
	}
	lockProjectRoleTemplateBindingInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockProjectRoleTemplateBindingInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) Controller() v3.ProjectRoleTemplateBindingController {
	if mock.ControllerFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.ControllerFunc: method is nil but ProjectRoleTemplateBindingInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockProjectRoleTemplateBindingInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.ControllerCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockProjectRoleTemplateBindingInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockProjectRoleTemplateBindingInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) Create(in1 *v3.ProjectRoleTemplateBinding) (*v3.ProjectRoleTemplateBinding, error) {
	if mock.CreateFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.CreateFunc: method is nil but ProjectRoleTemplateBindingInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.ProjectRoleTemplateBinding
	}{
		In1: in1,
	}
	lockProjectRoleTemplateBindingInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.CreateCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) CreateCalls() []struct {
	In1 *v3.ProjectRoleTemplateBinding
} {
	var calls []struct {
		In1 *v3.ProjectRoleTemplateBinding
	}
	lockProjectRoleTemplateBindingInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockProjectRoleTemplateBindingInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.DeleteFunc: method is nil but ProjectRoleTemplateBindingInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockProjectRoleTemplateBindingInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.DeleteCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockProjectRoleTemplateBindingInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockProjectRoleTemplateBindingInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.DeleteCollectionFunc: method is nil but ProjectRoleTemplateBindingInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockProjectRoleTemplateBindingInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.DeleteCollectionCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockProjectRoleTemplateBindingInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockProjectRoleTemplateBindingInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.DeleteNamespacedFunc: method is nil but ProjectRoleTemplateBindingInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockProjectRoleTemplateBindingInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.DeleteNamespacedCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockProjectRoleTemplateBindingInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockProjectRoleTemplateBindingInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.ProjectRoleTemplateBinding, error) {
	if mock.GetFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.GetFunc: method is nil but ProjectRoleTemplateBindingInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockProjectRoleTemplateBindingInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.GetCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockProjectRoleTemplateBindingInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockProjectRoleTemplateBindingInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.ProjectRoleTemplateBinding, error) {
	if mock.GetNamespacedFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.GetNamespacedFunc: method is nil but ProjectRoleTemplateBindingInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockProjectRoleTemplateBindingInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.GetNamespacedCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockProjectRoleTemplateBindingInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockProjectRoleTemplateBindingInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) List(opts v1.ListOptions) (*v3.ProjectRoleTemplateBindingList, error) {
	if mock.ListFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.ListFunc: method is nil but ProjectRoleTemplateBindingInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockProjectRoleTemplateBindingInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.ListCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockProjectRoleTemplateBindingInterfaceMockList.RLock()
	calls = mock.calls.List
	lockProjectRoleTemplateBindingInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.ObjectClientFunc: method is nil but ProjectRoleTemplateBindingInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockProjectRoleTemplateBindingInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.ObjectClientCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockProjectRoleTemplateBindingInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockProjectRoleTemplateBindingInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) Update(in1 *v3.ProjectRoleTemplateBinding) (*v3.ProjectRoleTemplateBinding, error) {
	if mock.UpdateFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.UpdateFunc: method is nil but ProjectRoleTemplateBindingInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.ProjectRoleTemplateBinding
	}{
		In1: in1,
	}
	lockProjectRoleTemplateBindingInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.UpdateCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) UpdateCalls() []struct {
	In1 *v3.ProjectRoleTemplateBinding
} {
	var calls []struct {
		In1 *v3.ProjectRoleTemplateBinding
	}
	lockProjectRoleTemplateBindingInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockProjectRoleTemplateBindingInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ProjectRoleTemplateBindingInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ProjectRoleTemplateBindingInterfaceMock.WatchFunc: method is nil but ProjectRoleTemplateBindingInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockProjectRoleTemplateBindingInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockProjectRoleTemplateBindingInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingInterface.WatchCalls())
func (mock *ProjectRoleTemplateBindingInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockProjectRoleTemplateBindingInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockProjectRoleTemplateBindingInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockProjectRoleTemplateBindingsGetterMockProjectRoleTemplateBindings sync.RWMutex
)

// Ensure, that ProjectRoleTemplateBindingsGetterMock does implement ProjectRoleTemplateBindingsGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.ProjectRoleTemplateBindingsGetter = &ProjectRoleTemplateBindingsGetterMock{}

// ProjectRoleTemplateBindingsGetterMock is a mock implementation of ProjectRoleTemplateBindingsGetter.
//
//     func TestSomethingThatUsesProjectRoleTemplateBindingsGetter(t *testing.T) {
//
//         // make and configure a mocked ProjectRoleTemplateBindingsGetter
//         mockedProjectRoleTemplateBindingsGetter := &ProjectRoleTemplateBindingsGetterMock{
//             ProjectRoleTemplateBindingsFunc: func(namespace string) v3.ProjectRoleTemplateBindingInterface {
// 	               panic("mock out the ProjectRoleTemplateBindings method")
//             },
//         }
//
//         // use mockedProjectRoleTemplateBindingsGetter in code that requires ProjectRoleTemplateBindingsGetter
//         // and then make assertions.
//
//     }
type ProjectRoleTemplateBindingsGetterMock struct {
	// ProjectRoleTemplateBindingsFunc mocks the ProjectRoleTemplateBindings method.
	ProjectRoleTemplateBindingsFunc func(namespace string) v3.ProjectRoleTemplateBindingInterface

	// calls tracks calls to the methods.
	calls struct {
		// ProjectRoleTemplateBindings holds details about calls to the ProjectRoleTemplateBindings method.
		ProjectRoleTemplateBindings []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// ProjectRoleTemplateBindings calls ProjectRoleTemplateBindingsFunc.
func (mock *ProjectRoleTemplateBindingsGetterMock) ProjectRoleTemplateBindings(namespace string) v3.ProjectRoleTemplateBindingInterface {
	if mock.ProjectRoleTemplateBindingsFunc == nil {
		panic("ProjectRoleTemplateBindingsGetterMock.ProjectRoleTemplateBindingsFunc: method is nil but ProjectRoleTemplateBindingsGetter.ProjectRoleTemplateBindings was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockProjectRoleTemplateBindingsGetterMockProjectRoleTemplateBindings.Lock()
	mock.calls.ProjectRoleTemplateBindings = append(mock.calls.ProjectRoleTemplateBindings, callInfo)
	lockProjectRoleTemplateBindingsGetterMockProjectRoleTemplateBindings.Unlock()
	return mock.ProjectRoleTemplateBindingsFunc(namespace)
}

// ProjectRoleTemplateBindingsCalls gets all the calls that were made to ProjectRoleTemplateBindings.
// Check the length with:
//     len(mockedProjectRoleTemplateBindingsGetter.ProjectRoleTemplateBindingsCalls())
func (mock *ProjectRoleTemplateBindingsGetterMock) ProjectRoleTemplateBindingsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockProjectRoleTemplateBindingsGetterMockProjectRoleTemplateBindings.RLock()
	calls = mock.calls.ProjectRoleTemplateBindings
	lockProjectRoleTemplateBindingsGetterMockProjectRoleTemplateBindings.RUnlock()
	return calls
}
