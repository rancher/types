// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockClusterRandomizerListerMockGet  sync.RWMutex
	lockClusterRandomizerListerMockList sync.RWMutex
)

// Ensure, that ClusterRandomizerListerMock does implement ClusterRandomizerLister.
// If this is not the case, regenerate this file with moq.
var _ v3.ClusterRandomizerLister = &ClusterRandomizerListerMock{}

// ClusterRandomizerListerMock is a mock implementation of ClusterRandomizerLister.
//
//     func TestSomethingThatUsesClusterRandomizerLister(t *testing.T) {
//
//         // make and configure a mocked ClusterRandomizerLister
//         mockedClusterRandomizerLister := &ClusterRandomizerListerMock{
//             GetFunc: func(namespace string, name string) (*v3.ClusterRandomizer, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.ClusterRandomizer, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedClusterRandomizerLister in code that requires ClusterRandomizerLister
//         // and then make assertions.
//
//     }
type ClusterRandomizerListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.ClusterRandomizer, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.ClusterRandomizer, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *ClusterRandomizerListerMock) Get(namespace string, name string) (*v3.ClusterRandomizer, error) {
	if mock.GetFunc == nil {
		panic("ClusterRandomizerListerMock.GetFunc: method is nil but ClusterRandomizerLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockClusterRandomizerListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterRandomizerListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterRandomizerLister.GetCalls())
func (mock *ClusterRandomizerListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockClusterRandomizerListerMockGet.RLock()
	calls = mock.calls.Get
	lockClusterRandomizerListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterRandomizerListerMock) List(namespace string, selector labels.Selector) ([]*v3.ClusterRandomizer, error) {
	if mock.ListFunc == nil {
		panic("ClusterRandomizerListerMock.ListFunc: method is nil but ClusterRandomizerLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockClusterRandomizerListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterRandomizerListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterRandomizerLister.ListCalls())
func (mock *ClusterRandomizerListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockClusterRandomizerListerMockList.RLock()
	calls = mock.calls.List
	lockClusterRandomizerListerMockList.RUnlock()
	return calls
}

var (
	lockClusterRandomizerControllerMockAddClusterScopedHandler sync.RWMutex
	lockClusterRandomizerControllerMockAddFeatureHandler       sync.RWMutex
	lockClusterRandomizerControllerMockAddHandler              sync.RWMutex
	lockClusterRandomizerControllerMockEnqueue                 sync.RWMutex
	lockClusterRandomizerControllerMockGeneric                 sync.RWMutex
	lockClusterRandomizerControllerMockInformer                sync.RWMutex
	lockClusterRandomizerControllerMockLister                  sync.RWMutex
	lockClusterRandomizerControllerMockStart                   sync.RWMutex
	lockClusterRandomizerControllerMockSync                    sync.RWMutex
)

// Ensure, that ClusterRandomizerControllerMock does implement ClusterRandomizerController.
// If this is not the case, regenerate this file with moq.
var _ v3.ClusterRandomizerController = &ClusterRandomizerControllerMock{}

// ClusterRandomizerControllerMock is a mock implementation of ClusterRandomizerController.
//
//     func TestSomethingThatUsesClusterRandomizerController(t *testing.T) {
//
//         // make and configure a mocked ClusterRandomizerController
//         mockedClusterRandomizerController := &ClusterRandomizerControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.ClusterRandomizerHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterRandomizerHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.ClusterRandomizerHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.ClusterRandomizerLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedClusterRandomizerController in code that requires ClusterRandomizerController
//         // and then make assertions.
//
//     }
type ClusterRandomizerControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.ClusterRandomizerHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterRandomizerHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.ClusterRandomizerHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.ClusterRandomizerLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.ClusterRandomizerHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ClusterRandomizerHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.ClusterRandomizerHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ClusterRandomizerControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.ClusterRandomizerHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ClusterRandomizerControllerMock.AddClusterScopedHandlerFunc: method is nil but ClusterRandomizerController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.ClusterRandomizerHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockClusterRandomizerControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockClusterRandomizerControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedClusterRandomizerController.AddClusterScopedHandlerCalls())
func (mock *ClusterRandomizerControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.ClusterRandomizerHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.ClusterRandomizerHandlerFunc
	}
	lockClusterRandomizerControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockClusterRandomizerControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *ClusterRandomizerControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterRandomizerHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("ClusterRandomizerControllerMock.AddFeatureHandlerFunc: method is nil but ClusterRandomizerController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ClusterRandomizerHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockClusterRandomizerControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockClusterRandomizerControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedClusterRandomizerController.AddFeatureHandlerCalls())
func (mock *ClusterRandomizerControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.ClusterRandomizerHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ClusterRandomizerHandlerFunc
	}
	lockClusterRandomizerControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockClusterRandomizerControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ClusterRandomizerControllerMock) AddHandler(ctx context.Context, name string, handler v3.ClusterRandomizerHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ClusterRandomizerControllerMock.AddHandlerFunc: method is nil but ClusterRandomizerController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.ClusterRandomizerHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockClusterRandomizerControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockClusterRandomizerControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedClusterRandomizerController.AddHandlerCalls())
func (mock *ClusterRandomizerControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.ClusterRandomizerHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.ClusterRandomizerHandlerFunc
	}
	lockClusterRandomizerControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockClusterRandomizerControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ClusterRandomizerControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("ClusterRandomizerControllerMock.EnqueueFunc: method is nil but ClusterRandomizerController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockClusterRandomizerControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockClusterRandomizerControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedClusterRandomizerController.EnqueueCalls())
func (mock *ClusterRandomizerControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockClusterRandomizerControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockClusterRandomizerControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *ClusterRandomizerControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("ClusterRandomizerControllerMock.GenericFunc: method is nil but ClusterRandomizerController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRandomizerControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockClusterRandomizerControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedClusterRandomizerController.GenericCalls())
func (mock *ClusterRandomizerControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRandomizerControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockClusterRandomizerControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ClusterRandomizerControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ClusterRandomizerControllerMock.InformerFunc: method is nil but ClusterRandomizerController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRandomizerControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockClusterRandomizerControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedClusterRandomizerController.InformerCalls())
func (mock *ClusterRandomizerControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRandomizerControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockClusterRandomizerControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *ClusterRandomizerControllerMock) Lister() v3.ClusterRandomizerLister {
	if mock.ListerFunc == nil {
		panic("ClusterRandomizerControllerMock.ListerFunc: method is nil but ClusterRandomizerController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRandomizerControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockClusterRandomizerControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedClusterRandomizerController.ListerCalls())
func (mock *ClusterRandomizerControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRandomizerControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockClusterRandomizerControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *ClusterRandomizerControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("ClusterRandomizerControllerMock.StartFunc: method is nil but ClusterRandomizerController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockClusterRandomizerControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockClusterRandomizerControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedClusterRandomizerController.StartCalls())
func (mock *ClusterRandomizerControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockClusterRandomizerControllerMockStart.RLock()
	calls = mock.calls.Start
	lockClusterRandomizerControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *ClusterRandomizerControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("ClusterRandomizerControllerMock.SyncFunc: method is nil but ClusterRandomizerController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockClusterRandomizerControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockClusterRandomizerControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedClusterRandomizerController.SyncCalls())
func (mock *ClusterRandomizerControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockClusterRandomizerControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockClusterRandomizerControllerMockSync.RUnlock()
	return calls
}

var (
	lockClusterRandomizerInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockClusterRandomizerInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockClusterRandomizerInterfaceMockAddFeatureHandler         sync.RWMutex
	lockClusterRandomizerInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockClusterRandomizerInterfaceMockAddHandler                sync.RWMutex
	lockClusterRandomizerInterfaceMockAddLifecycle              sync.RWMutex
	lockClusterRandomizerInterfaceMockController                sync.RWMutex
	lockClusterRandomizerInterfaceMockCreate                    sync.RWMutex
	lockClusterRandomizerInterfaceMockDelete                    sync.RWMutex
	lockClusterRandomizerInterfaceMockDeleteCollection          sync.RWMutex
	lockClusterRandomizerInterfaceMockDeleteNamespaced          sync.RWMutex
	lockClusterRandomizerInterfaceMockGet                       sync.RWMutex
	lockClusterRandomizerInterfaceMockGetNamespaced             sync.RWMutex
	lockClusterRandomizerInterfaceMockList                      sync.RWMutex
	lockClusterRandomizerInterfaceMockObjectClient              sync.RWMutex
	lockClusterRandomizerInterfaceMockUpdate                    sync.RWMutex
	lockClusterRandomizerInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that ClusterRandomizerInterfaceMock does implement ClusterRandomizerInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.ClusterRandomizerInterface = &ClusterRandomizerInterfaceMock{}

// ClusterRandomizerInterfaceMock is a mock implementation of ClusterRandomizerInterface.
//
//     func TestSomethingThatUsesClusterRandomizerInterface(t *testing.T) {
//
//         // make and configure a mocked ClusterRandomizerInterface
//         mockedClusterRandomizerInterface := &ClusterRandomizerInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.ClusterRandomizerHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.ClusterRandomizerLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterRandomizerHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.ClusterRandomizerLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.ClusterRandomizerHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.ClusterRandomizerLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.ClusterRandomizerController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.ClusterRandomizer) (*v3.ClusterRandomizer, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.ClusterRandomizer, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.ClusterRandomizer, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.ClusterRandomizerList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.ClusterRandomizer) (*v3.ClusterRandomizer, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedClusterRandomizerInterface in code that requires ClusterRandomizerInterface
//         // and then make assertions.
//
//     }
type ClusterRandomizerInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.ClusterRandomizerHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.ClusterRandomizerLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterRandomizerHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.ClusterRandomizerLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.ClusterRandomizerHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.ClusterRandomizerLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.ClusterRandomizerController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.ClusterRandomizer) (*v3.ClusterRandomizer, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.ClusterRandomizer, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.ClusterRandomizer, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.ClusterRandomizerList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.ClusterRandomizer) (*v3.ClusterRandomizer, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.ClusterRandomizerHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ClusterRandomizerLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ClusterRandomizerHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ClusterRandomizerLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ClusterRandomizerHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ClusterRandomizerLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.ClusterRandomizer
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.ClusterRandomizer
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ClusterRandomizerInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.ClusterRandomizerHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ClusterRandomizerInterfaceMock.AddClusterScopedHandlerFunc: method is nil but ClusterRandomizerInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.ClusterRandomizerHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockClusterRandomizerInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockClusterRandomizerInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedClusterRandomizerInterface.AddClusterScopedHandlerCalls())
func (mock *ClusterRandomizerInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.ClusterRandomizerHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.ClusterRandomizerHandlerFunc
	}
	lockClusterRandomizerInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockClusterRandomizerInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *ClusterRandomizerInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.ClusterRandomizerLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("ClusterRandomizerInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but ClusterRandomizerInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.ClusterRandomizerLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockClusterRandomizerInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockClusterRandomizerInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedClusterRandomizerInterface.AddClusterScopedLifecycleCalls())
func (mock *ClusterRandomizerInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.ClusterRandomizerLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.ClusterRandomizerLifecycle
	}
	lockClusterRandomizerInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockClusterRandomizerInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *ClusterRandomizerInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterRandomizerHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("ClusterRandomizerInterfaceMock.AddFeatureHandlerFunc: method is nil but ClusterRandomizerInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ClusterRandomizerHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockClusterRandomizerInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockClusterRandomizerInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedClusterRandomizerInterface.AddFeatureHandlerCalls())
func (mock *ClusterRandomizerInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.ClusterRandomizerHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ClusterRandomizerHandlerFunc
	}
	lockClusterRandomizerInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockClusterRandomizerInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *ClusterRandomizerInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.ClusterRandomizerLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("ClusterRandomizerInterfaceMock.AddFeatureLifecycleFunc: method is nil but ClusterRandomizerInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.ClusterRandomizerLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockClusterRandomizerInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockClusterRandomizerInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedClusterRandomizerInterface.AddFeatureLifecycleCalls())
func (mock *ClusterRandomizerInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v3.ClusterRandomizerLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.ClusterRandomizerLifecycle
	}
	lockClusterRandomizerInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockClusterRandomizerInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ClusterRandomizerInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.ClusterRandomizerHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ClusterRandomizerInterfaceMock.AddHandlerFunc: method is nil but ClusterRandomizerInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.ClusterRandomizerHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockClusterRandomizerInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockClusterRandomizerInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedClusterRandomizerInterface.AddHandlerCalls())
func (mock *ClusterRandomizerInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.ClusterRandomizerHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.ClusterRandomizerHandlerFunc
	}
	lockClusterRandomizerInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockClusterRandomizerInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *ClusterRandomizerInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.ClusterRandomizerLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("ClusterRandomizerInterfaceMock.AddLifecycleFunc: method is nil but ClusterRandomizerInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.ClusterRandomizerLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockClusterRandomizerInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockClusterRandomizerInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedClusterRandomizerInterface.AddLifecycleCalls())
func (mock *ClusterRandomizerInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.ClusterRandomizerLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.ClusterRandomizerLifecycle
	}
	lockClusterRandomizerInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockClusterRandomizerInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *ClusterRandomizerInterfaceMock) Controller() v3.ClusterRandomizerController {
	if mock.ControllerFunc == nil {
		panic("ClusterRandomizerInterfaceMock.ControllerFunc: method is nil but ClusterRandomizerInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRandomizerInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockClusterRandomizerInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedClusterRandomizerInterface.ControllerCalls())
func (mock *ClusterRandomizerInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRandomizerInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockClusterRandomizerInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ClusterRandomizerInterfaceMock) Create(in1 *v3.ClusterRandomizer) (*v3.ClusterRandomizer, error) {
	if mock.CreateFunc == nil {
		panic("ClusterRandomizerInterfaceMock.CreateFunc: method is nil but ClusterRandomizerInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.ClusterRandomizer
	}{
		In1: in1,
	}
	lockClusterRandomizerInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockClusterRandomizerInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterRandomizerInterface.CreateCalls())
func (mock *ClusterRandomizerInterfaceMock) CreateCalls() []struct {
	In1 *v3.ClusterRandomizer
} {
	var calls []struct {
		In1 *v3.ClusterRandomizer
	}
	lockClusterRandomizerInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockClusterRandomizerInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ClusterRandomizerInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ClusterRandomizerInterfaceMock.DeleteFunc: method is nil but ClusterRandomizerInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterRandomizerInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockClusterRandomizerInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedClusterRandomizerInterface.DeleteCalls())
func (mock *ClusterRandomizerInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockClusterRandomizerInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockClusterRandomizerInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *ClusterRandomizerInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("ClusterRandomizerInterfaceMock.DeleteCollectionFunc: method is nil but ClusterRandomizerInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockClusterRandomizerInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockClusterRandomizerInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedClusterRandomizerInterface.DeleteCollectionCalls())
func (mock *ClusterRandomizerInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockClusterRandomizerInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockClusterRandomizerInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *ClusterRandomizerInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("ClusterRandomizerInterfaceMock.DeleteNamespacedFunc: method is nil but ClusterRandomizerInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockClusterRandomizerInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockClusterRandomizerInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedClusterRandomizerInterface.DeleteNamespacedCalls())
func (mock *ClusterRandomizerInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockClusterRandomizerInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockClusterRandomizerInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ClusterRandomizerInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.ClusterRandomizer, error) {
	if mock.GetFunc == nil {
		panic("ClusterRandomizerInterfaceMock.GetFunc: method is nil but ClusterRandomizerInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockClusterRandomizerInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterRandomizerInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterRandomizerInterface.GetCalls())
func (mock *ClusterRandomizerInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockClusterRandomizerInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockClusterRandomizerInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *ClusterRandomizerInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.ClusterRandomizer, error) {
	if mock.GetNamespacedFunc == nil {
		panic("ClusterRandomizerInterfaceMock.GetNamespacedFunc: method is nil but ClusterRandomizerInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockClusterRandomizerInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockClusterRandomizerInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedClusterRandomizerInterface.GetNamespacedCalls())
func (mock *ClusterRandomizerInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockClusterRandomizerInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockClusterRandomizerInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterRandomizerInterfaceMock) List(opts v1.ListOptions) (*v3.ClusterRandomizerList, error) {
	if mock.ListFunc == nil {
		panic("ClusterRandomizerInterfaceMock.ListFunc: method is nil but ClusterRandomizerInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockClusterRandomizerInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterRandomizerInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterRandomizerInterface.ListCalls())
func (mock *ClusterRandomizerInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockClusterRandomizerInterfaceMockList.RLock()
	calls = mock.calls.List
	lockClusterRandomizerInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *ClusterRandomizerInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("ClusterRandomizerInterfaceMock.ObjectClientFunc: method is nil but ClusterRandomizerInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRandomizerInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockClusterRandomizerInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedClusterRandomizerInterface.ObjectClientCalls())
func (mock *ClusterRandomizerInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRandomizerInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockClusterRandomizerInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ClusterRandomizerInterfaceMock) Update(in1 *v3.ClusterRandomizer) (*v3.ClusterRandomizer, error) {
	if mock.UpdateFunc == nil {
		panic("ClusterRandomizerInterfaceMock.UpdateFunc: method is nil but ClusterRandomizerInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.ClusterRandomizer
	}{
		In1: in1,
	}
	lockClusterRandomizerInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockClusterRandomizerInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedClusterRandomizerInterface.UpdateCalls())
func (mock *ClusterRandomizerInterfaceMock) UpdateCalls() []struct {
	In1 *v3.ClusterRandomizer
} {
	var calls []struct {
		In1 *v3.ClusterRandomizer
	}
	lockClusterRandomizerInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockClusterRandomizerInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ClusterRandomizerInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ClusterRandomizerInterfaceMock.WatchFunc: method is nil but ClusterRandomizerInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockClusterRandomizerInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockClusterRandomizerInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedClusterRandomizerInterface.WatchCalls())
func (mock *ClusterRandomizerInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockClusterRandomizerInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockClusterRandomizerInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockClusterRandomizersGetterMockClusterRandomizers sync.RWMutex
)

// Ensure, that ClusterRandomizersGetterMock does implement ClusterRandomizersGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.ClusterRandomizersGetter = &ClusterRandomizersGetterMock{}

// ClusterRandomizersGetterMock is a mock implementation of ClusterRandomizersGetter.
//
//     func TestSomethingThatUsesClusterRandomizersGetter(t *testing.T) {
//
//         // make and configure a mocked ClusterRandomizersGetter
//         mockedClusterRandomizersGetter := &ClusterRandomizersGetterMock{
//             ClusterRandomizersFunc: func(namespace string) v3.ClusterRandomizerInterface {
// 	               panic("mock out the ClusterRandomizers method")
//             },
//         }
//
//         // use mockedClusterRandomizersGetter in code that requires ClusterRandomizersGetter
//         // and then make assertions.
//
//     }
type ClusterRandomizersGetterMock struct {
	// ClusterRandomizersFunc mocks the ClusterRandomizers method.
	ClusterRandomizersFunc func(namespace string) v3.ClusterRandomizerInterface

	// calls tracks calls to the methods.
	calls struct {
		// ClusterRandomizers holds details about calls to the ClusterRandomizers method.
		ClusterRandomizers []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// ClusterRandomizers calls ClusterRandomizersFunc.
func (mock *ClusterRandomizersGetterMock) ClusterRandomizers(namespace string) v3.ClusterRandomizerInterface {
	if mock.ClusterRandomizersFunc == nil {
		panic("ClusterRandomizersGetterMock.ClusterRandomizersFunc: method is nil but ClusterRandomizersGetter.ClusterRandomizers was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockClusterRandomizersGetterMockClusterRandomizers.Lock()
	mock.calls.ClusterRandomizers = append(mock.calls.ClusterRandomizers, callInfo)
	lockClusterRandomizersGetterMockClusterRandomizers.Unlock()
	return mock.ClusterRandomizersFunc(namespace)
}

// ClusterRandomizersCalls gets all the calls that were made to ClusterRandomizers.
// Check the length with:
//     len(mockedClusterRandomizersGetter.ClusterRandomizersCalls())
func (mock *ClusterRandomizersGetterMock) ClusterRandomizersCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockClusterRandomizersGetterMockClusterRandomizers.RLock()
	calls = mock.calls.ClusterRandomizers
	lockClusterRandomizersGetterMockClusterRandomizers.RUnlock()
	return calls
}
