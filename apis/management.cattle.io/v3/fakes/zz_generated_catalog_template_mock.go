// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockCatalogTemplateListerMockGet  sync.RWMutex
	lockCatalogTemplateListerMockList sync.RWMutex
)

// Ensure, that CatalogTemplateListerMock does implement CatalogTemplateLister.
// If this is not the case, regenerate this file with moq.
var _ v3.CatalogTemplateLister = &CatalogTemplateListerMock{}

// CatalogTemplateListerMock is a mock implementation of CatalogTemplateLister.
//
//     func TestSomethingThatUsesCatalogTemplateLister(t *testing.T) {
//
//         // make and configure a mocked CatalogTemplateLister
//         mockedCatalogTemplateLister := &CatalogTemplateListerMock{
//             GetFunc: func(namespace string, name string) (*v3.CatalogTemplate, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.CatalogTemplate, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedCatalogTemplateLister in code that requires CatalogTemplateLister
//         // and then make assertions.
//
//     }
type CatalogTemplateListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.CatalogTemplate, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.CatalogTemplate, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *CatalogTemplateListerMock) Get(namespace string, name string) (*v3.CatalogTemplate, error) {
	if mock.GetFunc == nil {
		panic("CatalogTemplateListerMock.GetFunc: method is nil but CatalogTemplateLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockCatalogTemplateListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCatalogTemplateListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCatalogTemplateLister.GetCalls())
func (mock *CatalogTemplateListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockCatalogTemplateListerMockGet.RLock()
	calls = mock.calls.Get
	lockCatalogTemplateListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *CatalogTemplateListerMock) List(namespace string, selector labels.Selector) ([]*v3.CatalogTemplate, error) {
	if mock.ListFunc == nil {
		panic("CatalogTemplateListerMock.ListFunc: method is nil but CatalogTemplateLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockCatalogTemplateListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockCatalogTemplateListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedCatalogTemplateLister.ListCalls())
func (mock *CatalogTemplateListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockCatalogTemplateListerMockList.RLock()
	calls = mock.calls.List
	lockCatalogTemplateListerMockList.RUnlock()
	return calls
}

var (
	lockCatalogTemplateControllerMockAddClusterScopedHandler sync.RWMutex
	lockCatalogTemplateControllerMockAddFeatureHandler       sync.RWMutex
	lockCatalogTemplateControllerMockAddHandler              sync.RWMutex
	lockCatalogTemplateControllerMockEnqueue                 sync.RWMutex
	lockCatalogTemplateControllerMockGeneric                 sync.RWMutex
	lockCatalogTemplateControllerMockInformer                sync.RWMutex
	lockCatalogTemplateControllerMockLister                  sync.RWMutex
	lockCatalogTemplateControllerMockStart                   sync.RWMutex
	lockCatalogTemplateControllerMockSync                    sync.RWMutex
)

// Ensure, that CatalogTemplateControllerMock does implement CatalogTemplateController.
// If this is not the case, regenerate this file with moq.
var _ v3.CatalogTemplateController = &CatalogTemplateControllerMock{}

// CatalogTemplateControllerMock is a mock implementation of CatalogTemplateController.
//
//     func TestSomethingThatUsesCatalogTemplateController(t *testing.T) {
//
//         // make and configure a mocked CatalogTemplateController
//         mockedCatalogTemplateController := &CatalogTemplateControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.CatalogTemplateHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.CatalogTemplateHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.CatalogTemplateHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.CatalogTemplateLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedCatalogTemplateController in code that requires CatalogTemplateController
//         // and then make assertions.
//
//     }
type CatalogTemplateControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.CatalogTemplateHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.CatalogTemplateHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.CatalogTemplateHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.CatalogTemplateLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.CatalogTemplateHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.CatalogTemplateHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.CatalogTemplateHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *CatalogTemplateControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.CatalogTemplateHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("CatalogTemplateControllerMock.AddClusterScopedHandlerFunc: method is nil but CatalogTemplateController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.CatalogTemplateHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockCatalogTemplateControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockCatalogTemplateControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedCatalogTemplateController.AddClusterScopedHandlerCalls())
func (mock *CatalogTemplateControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.CatalogTemplateHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.CatalogTemplateHandlerFunc
	}
	lockCatalogTemplateControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockCatalogTemplateControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *CatalogTemplateControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.CatalogTemplateHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("CatalogTemplateControllerMock.AddFeatureHandlerFunc: method is nil but CatalogTemplateController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.CatalogTemplateHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockCatalogTemplateControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockCatalogTemplateControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedCatalogTemplateController.AddFeatureHandlerCalls())
func (mock *CatalogTemplateControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.CatalogTemplateHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.CatalogTemplateHandlerFunc
	}
	lockCatalogTemplateControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockCatalogTemplateControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *CatalogTemplateControllerMock) AddHandler(ctx context.Context, name string, handler v3.CatalogTemplateHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("CatalogTemplateControllerMock.AddHandlerFunc: method is nil but CatalogTemplateController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.CatalogTemplateHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockCatalogTemplateControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockCatalogTemplateControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedCatalogTemplateController.AddHandlerCalls())
func (mock *CatalogTemplateControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.CatalogTemplateHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.CatalogTemplateHandlerFunc
	}
	lockCatalogTemplateControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockCatalogTemplateControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *CatalogTemplateControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("CatalogTemplateControllerMock.EnqueueFunc: method is nil but CatalogTemplateController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockCatalogTemplateControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockCatalogTemplateControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedCatalogTemplateController.EnqueueCalls())
func (mock *CatalogTemplateControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockCatalogTemplateControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockCatalogTemplateControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *CatalogTemplateControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("CatalogTemplateControllerMock.GenericFunc: method is nil but CatalogTemplateController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockCatalogTemplateControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockCatalogTemplateControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedCatalogTemplateController.GenericCalls())
func (mock *CatalogTemplateControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockCatalogTemplateControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockCatalogTemplateControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *CatalogTemplateControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("CatalogTemplateControllerMock.InformerFunc: method is nil but CatalogTemplateController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockCatalogTemplateControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockCatalogTemplateControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedCatalogTemplateController.InformerCalls())
func (mock *CatalogTemplateControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockCatalogTemplateControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockCatalogTemplateControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *CatalogTemplateControllerMock) Lister() v3.CatalogTemplateLister {
	if mock.ListerFunc == nil {
		panic("CatalogTemplateControllerMock.ListerFunc: method is nil but CatalogTemplateController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockCatalogTemplateControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockCatalogTemplateControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedCatalogTemplateController.ListerCalls())
func (mock *CatalogTemplateControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockCatalogTemplateControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockCatalogTemplateControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *CatalogTemplateControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("CatalogTemplateControllerMock.StartFunc: method is nil but CatalogTemplateController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockCatalogTemplateControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockCatalogTemplateControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedCatalogTemplateController.StartCalls())
func (mock *CatalogTemplateControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockCatalogTemplateControllerMockStart.RLock()
	calls = mock.calls.Start
	lockCatalogTemplateControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *CatalogTemplateControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("CatalogTemplateControllerMock.SyncFunc: method is nil but CatalogTemplateController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockCatalogTemplateControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockCatalogTemplateControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedCatalogTemplateController.SyncCalls())
func (mock *CatalogTemplateControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockCatalogTemplateControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockCatalogTemplateControllerMockSync.RUnlock()
	return calls
}

var (
	lockCatalogTemplateInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockCatalogTemplateInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockCatalogTemplateInterfaceMockAddFeatureHandler         sync.RWMutex
	lockCatalogTemplateInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockCatalogTemplateInterfaceMockAddHandler                sync.RWMutex
	lockCatalogTemplateInterfaceMockAddLifecycle              sync.RWMutex
	lockCatalogTemplateInterfaceMockController                sync.RWMutex
	lockCatalogTemplateInterfaceMockCreate                    sync.RWMutex
	lockCatalogTemplateInterfaceMockDelete                    sync.RWMutex
	lockCatalogTemplateInterfaceMockDeleteCollection          sync.RWMutex
	lockCatalogTemplateInterfaceMockDeleteNamespaced          sync.RWMutex
	lockCatalogTemplateInterfaceMockGet                       sync.RWMutex
	lockCatalogTemplateInterfaceMockGetNamespaced             sync.RWMutex
	lockCatalogTemplateInterfaceMockList                      sync.RWMutex
	lockCatalogTemplateInterfaceMockObjectClient              sync.RWMutex
	lockCatalogTemplateInterfaceMockUpdate                    sync.RWMutex
	lockCatalogTemplateInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that CatalogTemplateInterfaceMock does implement CatalogTemplateInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.CatalogTemplateInterface = &CatalogTemplateInterfaceMock{}

// CatalogTemplateInterfaceMock is a mock implementation of CatalogTemplateInterface.
//
//     func TestSomethingThatUsesCatalogTemplateInterface(t *testing.T) {
//
//         // make and configure a mocked CatalogTemplateInterface
//         mockedCatalogTemplateInterface := &CatalogTemplateInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.CatalogTemplateHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.CatalogTemplateLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.CatalogTemplateHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.CatalogTemplateLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.CatalogTemplateHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.CatalogTemplateLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.CatalogTemplateController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.CatalogTemplate) (*v3.CatalogTemplate, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.CatalogTemplate, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.CatalogTemplate, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.CatalogTemplateList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.CatalogTemplate) (*v3.CatalogTemplate, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedCatalogTemplateInterface in code that requires CatalogTemplateInterface
//         // and then make assertions.
//
//     }
type CatalogTemplateInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.CatalogTemplateHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.CatalogTemplateLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.CatalogTemplateHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.CatalogTemplateLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.CatalogTemplateHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.CatalogTemplateLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.CatalogTemplateController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.CatalogTemplate) (*v3.CatalogTemplate, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.CatalogTemplate, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.CatalogTemplate, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.CatalogTemplateList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.CatalogTemplate) (*v3.CatalogTemplate, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.CatalogTemplateHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.CatalogTemplateLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.CatalogTemplateHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.CatalogTemplateLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.CatalogTemplateHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.CatalogTemplateLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.CatalogTemplate
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.CatalogTemplate
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *CatalogTemplateInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.CatalogTemplateHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("CatalogTemplateInterfaceMock.AddClusterScopedHandlerFunc: method is nil but CatalogTemplateInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.CatalogTemplateHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockCatalogTemplateInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockCatalogTemplateInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedCatalogTemplateInterface.AddClusterScopedHandlerCalls())
func (mock *CatalogTemplateInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.CatalogTemplateHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.CatalogTemplateHandlerFunc
	}
	lockCatalogTemplateInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockCatalogTemplateInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *CatalogTemplateInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.CatalogTemplateLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("CatalogTemplateInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but CatalogTemplateInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.CatalogTemplateLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockCatalogTemplateInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockCatalogTemplateInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedCatalogTemplateInterface.AddClusterScopedLifecycleCalls())
func (mock *CatalogTemplateInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.CatalogTemplateLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.CatalogTemplateLifecycle
	}
	lockCatalogTemplateInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockCatalogTemplateInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *CatalogTemplateInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.CatalogTemplateHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("CatalogTemplateInterfaceMock.AddFeatureHandlerFunc: method is nil but CatalogTemplateInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.CatalogTemplateHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockCatalogTemplateInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockCatalogTemplateInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedCatalogTemplateInterface.AddFeatureHandlerCalls())
func (mock *CatalogTemplateInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.CatalogTemplateHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.CatalogTemplateHandlerFunc
	}
	lockCatalogTemplateInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockCatalogTemplateInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *CatalogTemplateInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.CatalogTemplateLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("CatalogTemplateInterfaceMock.AddFeatureLifecycleFunc: method is nil but CatalogTemplateInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.CatalogTemplateLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockCatalogTemplateInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockCatalogTemplateInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedCatalogTemplateInterface.AddFeatureLifecycleCalls())
func (mock *CatalogTemplateInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v3.CatalogTemplateLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.CatalogTemplateLifecycle
	}
	lockCatalogTemplateInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockCatalogTemplateInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *CatalogTemplateInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.CatalogTemplateHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("CatalogTemplateInterfaceMock.AddHandlerFunc: method is nil but CatalogTemplateInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.CatalogTemplateHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockCatalogTemplateInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockCatalogTemplateInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedCatalogTemplateInterface.AddHandlerCalls())
func (mock *CatalogTemplateInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.CatalogTemplateHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.CatalogTemplateHandlerFunc
	}
	lockCatalogTemplateInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockCatalogTemplateInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *CatalogTemplateInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.CatalogTemplateLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("CatalogTemplateInterfaceMock.AddLifecycleFunc: method is nil but CatalogTemplateInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.CatalogTemplateLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockCatalogTemplateInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockCatalogTemplateInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedCatalogTemplateInterface.AddLifecycleCalls())
func (mock *CatalogTemplateInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.CatalogTemplateLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.CatalogTemplateLifecycle
	}
	lockCatalogTemplateInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockCatalogTemplateInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *CatalogTemplateInterfaceMock) Controller() v3.CatalogTemplateController {
	if mock.ControllerFunc == nil {
		panic("CatalogTemplateInterfaceMock.ControllerFunc: method is nil but CatalogTemplateInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockCatalogTemplateInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockCatalogTemplateInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedCatalogTemplateInterface.ControllerCalls())
func (mock *CatalogTemplateInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockCatalogTemplateInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockCatalogTemplateInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *CatalogTemplateInterfaceMock) Create(in1 *v3.CatalogTemplate) (*v3.CatalogTemplate, error) {
	if mock.CreateFunc == nil {
		panic("CatalogTemplateInterfaceMock.CreateFunc: method is nil but CatalogTemplateInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.CatalogTemplate
	}{
		In1: in1,
	}
	lockCatalogTemplateInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockCatalogTemplateInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedCatalogTemplateInterface.CreateCalls())
func (mock *CatalogTemplateInterfaceMock) CreateCalls() []struct {
	In1 *v3.CatalogTemplate
} {
	var calls []struct {
		In1 *v3.CatalogTemplate
	}
	lockCatalogTemplateInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockCatalogTemplateInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *CatalogTemplateInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("CatalogTemplateInterfaceMock.DeleteFunc: method is nil but CatalogTemplateInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockCatalogTemplateInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockCatalogTemplateInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedCatalogTemplateInterface.DeleteCalls())
func (mock *CatalogTemplateInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockCatalogTemplateInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockCatalogTemplateInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *CatalogTemplateInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("CatalogTemplateInterfaceMock.DeleteCollectionFunc: method is nil but CatalogTemplateInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockCatalogTemplateInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockCatalogTemplateInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedCatalogTemplateInterface.DeleteCollectionCalls())
func (mock *CatalogTemplateInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockCatalogTemplateInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockCatalogTemplateInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *CatalogTemplateInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("CatalogTemplateInterfaceMock.DeleteNamespacedFunc: method is nil but CatalogTemplateInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockCatalogTemplateInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockCatalogTemplateInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedCatalogTemplateInterface.DeleteNamespacedCalls())
func (mock *CatalogTemplateInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockCatalogTemplateInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockCatalogTemplateInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CatalogTemplateInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.CatalogTemplate, error) {
	if mock.GetFunc == nil {
		panic("CatalogTemplateInterfaceMock.GetFunc: method is nil but CatalogTemplateInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockCatalogTemplateInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCatalogTemplateInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCatalogTemplateInterface.GetCalls())
func (mock *CatalogTemplateInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockCatalogTemplateInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockCatalogTemplateInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *CatalogTemplateInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.CatalogTemplate, error) {
	if mock.GetNamespacedFunc == nil {
		panic("CatalogTemplateInterfaceMock.GetNamespacedFunc: method is nil but CatalogTemplateInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockCatalogTemplateInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockCatalogTemplateInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedCatalogTemplateInterface.GetNamespacedCalls())
func (mock *CatalogTemplateInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockCatalogTemplateInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockCatalogTemplateInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *CatalogTemplateInterfaceMock) List(opts v1.ListOptions) (*v3.CatalogTemplateList, error) {
	if mock.ListFunc == nil {
		panic("CatalogTemplateInterfaceMock.ListFunc: method is nil but CatalogTemplateInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockCatalogTemplateInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockCatalogTemplateInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedCatalogTemplateInterface.ListCalls())
func (mock *CatalogTemplateInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockCatalogTemplateInterfaceMockList.RLock()
	calls = mock.calls.List
	lockCatalogTemplateInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *CatalogTemplateInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("CatalogTemplateInterfaceMock.ObjectClientFunc: method is nil but CatalogTemplateInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockCatalogTemplateInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockCatalogTemplateInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedCatalogTemplateInterface.ObjectClientCalls())
func (mock *CatalogTemplateInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockCatalogTemplateInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockCatalogTemplateInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *CatalogTemplateInterfaceMock) Update(in1 *v3.CatalogTemplate) (*v3.CatalogTemplate, error) {
	if mock.UpdateFunc == nil {
		panic("CatalogTemplateInterfaceMock.UpdateFunc: method is nil but CatalogTemplateInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.CatalogTemplate
	}{
		In1: in1,
	}
	lockCatalogTemplateInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockCatalogTemplateInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedCatalogTemplateInterface.UpdateCalls())
func (mock *CatalogTemplateInterfaceMock) UpdateCalls() []struct {
	In1 *v3.CatalogTemplate
} {
	var calls []struct {
		In1 *v3.CatalogTemplate
	}
	lockCatalogTemplateInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockCatalogTemplateInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *CatalogTemplateInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("CatalogTemplateInterfaceMock.WatchFunc: method is nil but CatalogTemplateInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockCatalogTemplateInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockCatalogTemplateInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedCatalogTemplateInterface.WatchCalls())
func (mock *CatalogTemplateInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockCatalogTemplateInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockCatalogTemplateInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockCatalogTemplatesGetterMockCatalogTemplates sync.RWMutex
)

// Ensure, that CatalogTemplatesGetterMock does implement CatalogTemplatesGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.CatalogTemplatesGetter = &CatalogTemplatesGetterMock{}

// CatalogTemplatesGetterMock is a mock implementation of CatalogTemplatesGetter.
//
//     func TestSomethingThatUsesCatalogTemplatesGetter(t *testing.T) {
//
//         // make and configure a mocked CatalogTemplatesGetter
//         mockedCatalogTemplatesGetter := &CatalogTemplatesGetterMock{
//             CatalogTemplatesFunc: func(namespace string) v3.CatalogTemplateInterface {
// 	               panic("mock out the CatalogTemplates method")
//             },
//         }
//
//         // use mockedCatalogTemplatesGetter in code that requires CatalogTemplatesGetter
//         // and then make assertions.
//
//     }
type CatalogTemplatesGetterMock struct {
	// CatalogTemplatesFunc mocks the CatalogTemplates method.
	CatalogTemplatesFunc func(namespace string) v3.CatalogTemplateInterface

	// calls tracks calls to the methods.
	calls struct {
		// CatalogTemplates holds details about calls to the CatalogTemplates method.
		CatalogTemplates []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// CatalogTemplates calls CatalogTemplatesFunc.
func (mock *CatalogTemplatesGetterMock) CatalogTemplates(namespace string) v3.CatalogTemplateInterface {
	if mock.CatalogTemplatesFunc == nil {
		panic("CatalogTemplatesGetterMock.CatalogTemplatesFunc: method is nil but CatalogTemplatesGetter.CatalogTemplates was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockCatalogTemplatesGetterMockCatalogTemplates.Lock()
	mock.calls.CatalogTemplates = append(mock.calls.CatalogTemplates, callInfo)
	lockCatalogTemplatesGetterMockCatalogTemplates.Unlock()
	return mock.CatalogTemplatesFunc(namespace)
}

// CatalogTemplatesCalls gets all the calls that were made to CatalogTemplates.
// Check the length with:
//     len(mockedCatalogTemplatesGetter.CatalogTemplatesCalls())
func (mock *CatalogTemplatesGetterMock) CatalogTemplatesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockCatalogTemplatesGetterMockCatalogTemplates.RLock()
	calls = mock.calls.CatalogTemplates
	lockCatalogTemplatesGetterMockCatalogTemplates.RUnlock()
	return calls
}
