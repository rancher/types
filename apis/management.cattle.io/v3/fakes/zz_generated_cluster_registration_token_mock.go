// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockClusterRegistrationTokenListerMockGet  sync.RWMutex
	lockClusterRegistrationTokenListerMockList sync.RWMutex
)

// Ensure, that ClusterRegistrationTokenListerMock does implement ClusterRegistrationTokenLister.
// If this is not the case, regenerate this file with moq.
var _ v3.ClusterRegistrationTokenLister = &ClusterRegistrationTokenListerMock{}

// ClusterRegistrationTokenListerMock is a mock implementation of ClusterRegistrationTokenLister.
//
//     func TestSomethingThatUsesClusterRegistrationTokenLister(t *testing.T) {
//
//         // make and configure a mocked ClusterRegistrationTokenLister
//         mockedClusterRegistrationTokenLister := &ClusterRegistrationTokenListerMock{
//             GetFunc: func(namespace string, name string) (*v3.ClusterRegistrationToken, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.ClusterRegistrationToken, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedClusterRegistrationTokenLister in code that requires ClusterRegistrationTokenLister
//         // and then make assertions.
//
//     }
type ClusterRegistrationTokenListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.ClusterRegistrationToken, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.ClusterRegistrationToken, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *ClusterRegistrationTokenListerMock) Get(namespace string, name string) (*v3.ClusterRegistrationToken, error) {
	if mock.GetFunc == nil {
		panic("ClusterRegistrationTokenListerMock.GetFunc: method is nil but ClusterRegistrationTokenLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockClusterRegistrationTokenListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterRegistrationTokenListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterRegistrationTokenLister.GetCalls())
func (mock *ClusterRegistrationTokenListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockClusterRegistrationTokenListerMockGet.RLock()
	calls = mock.calls.Get
	lockClusterRegistrationTokenListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterRegistrationTokenListerMock) List(namespace string, selector labels.Selector) ([]*v3.ClusterRegistrationToken, error) {
	if mock.ListFunc == nil {
		panic("ClusterRegistrationTokenListerMock.ListFunc: method is nil but ClusterRegistrationTokenLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockClusterRegistrationTokenListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterRegistrationTokenListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterRegistrationTokenLister.ListCalls())
func (mock *ClusterRegistrationTokenListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockClusterRegistrationTokenListerMockList.RLock()
	calls = mock.calls.List
	lockClusterRegistrationTokenListerMockList.RUnlock()
	return calls
}

var (
	lockClusterRegistrationTokenControllerMockAddClusterScopedHandler sync.RWMutex
	lockClusterRegistrationTokenControllerMockAddFeatureHandler       sync.RWMutex
	lockClusterRegistrationTokenControllerMockAddHandler              sync.RWMutex
	lockClusterRegistrationTokenControllerMockEnqueue                 sync.RWMutex
	lockClusterRegistrationTokenControllerMockGeneric                 sync.RWMutex
	lockClusterRegistrationTokenControllerMockInformer                sync.RWMutex
	lockClusterRegistrationTokenControllerMockLister                  sync.RWMutex
	lockClusterRegistrationTokenControllerMockStart                   sync.RWMutex
	lockClusterRegistrationTokenControllerMockSync                    sync.RWMutex
)

// Ensure, that ClusterRegistrationTokenControllerMock does implement ClusterRegistrationTokenController.
// If this is not the case, regenerate this file with moq.
var _ v3.ClusterRegistrationTokenController = &ClusterRegistrationTokenControllerMock{}

// ClusterRegistrationTokenControllerMock is a mock implementation of ClusterRegistrationTokenController.
//
//     func TestSomethingThatUsesClusterRegistrationTokenController(t *testing.T) {
//
//         // make and configure a mocked ClusterRegistrationTokenController
//         mockedClusterRegistrationTokenController := &ClusterRegistrationTokenControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.ClusterRegistrationTokenHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterRegistrationTokenHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.ClusterRegistrationTokenHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.ClusterRegistrationTokenLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedClusterRegistrationTokenController in code that requires ClusterRegistrationTokenController
//         // and then make assertions.
//
//     }
type ClusterRegistrationTokenControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.ClusterRegistrationTokenHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterRegistrationTokenHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.ClusterRegistrationTokenHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.ClusterRegistrationTokenLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.ClusterRegistrationTokenHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ClusterRegistrationTokenHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.ClusterRegistrationTokenHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ClusterRegistrationTokenControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.ClusterRegistrationTokenHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ClusterRegistrationTokenControllerMock.AddClusterScopedHandlerFunc: method is nil but ClusterRegistrationTokenController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.ClusterRegistrationTokenHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockClusterRegistrationTokenControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockClusterRegistrationTokenControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedClusterRegistrationTokenController.AddClusterScopedHandlerCalls())
func (mock *ClusterRegistrationTokenControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.ClusterRegistrationTokenHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.ClusterRegistrationTokenHandlerFunc
	}
	lockClusterRegistrationTokenControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockClusterRegistrationTokenControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *ClusterRegistrationTokenControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterRegistrationTokenHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("ClusterRegistrationTokenControllerMock.AddFeatureHandlerFunc: method is nil but ClusterRegistrationTokenController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ClusterRegistrationTokenHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockClusterRegistrationTokenControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockClusterRegistrationTokenControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedClusterRegistrationTokenController.AddFeatureHandlerCalls())
func (mock *ClusterRegistrationTokenControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.ClusterRegistrationTokenHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ClusterRegistrationTokenHandlerFunc
	}
	lockClusterRegistrationTokenControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockClusterRegistrationTokenControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ClusterRegistrationTokenControllerMock) AddHandler(ctx context.Context, name string, handler v3.ClusterRegistrationTokenHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ClusterRegistrationTokenControllerMock.AddHandlerFunc: method is nil but ClusterRegistrationTokenController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.ClusterRegistrationTokenHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockClusterRegistrationTokenControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockClusterRegistrationTokenControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedClusterRegistrationTokenController.AddHandlerCalls())
func (mock *ClusterRegistrationTokenControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.ClusterRegistrationTokenHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.ClusterRegistrationTokenHandlerFunc
	}
	lockClusterRegistrationTokenControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockClusterRegistrationTokenControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ClusterRegistrationTokenControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("ClusterRegistrationTokenControllerMock.EnqueueFunc: method is nil but ClusterRegistrationTokenController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockClusterRegistrationTokenControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockClusterRegistrationTokenControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedClusterRegistrationTokenController.EnqueueCalls())
func (mock *ClusterRegistrationTokenControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockClusterRegistrationTokenControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockClusterRegistrationTokenControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *ClusterRegistrationTokenControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("ClusterRegistrationTokenControllerMock.GenericFunc: method is nil but ClusterRegistrationTokenController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRegistrationTokenControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockClusterRegistrationTokenControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedClusterRegistrationTokenController.GenericCalls())
func (mock *ClusterRegistrationTokenControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRegistrationTokenControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockClusterRegistrationTokenControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ClusterRegistrationTokenControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ClusterRegistrationTokenControllerMock.InformerFunc: method is nil but ClusterRegistrationTokenController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRegistrationTokenControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockClusterRegistrationTokenControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedClusterRegistrationTokenController.InformerCalls())
func (mock *ClusterRegistrationTokenControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRegistrationTokenControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockClusterRegistrationTokenControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *ClusterRegistrationTokenControllerMock) Lister() v3.ClusterRegistrationTokenLister {
	if mock.ListerFunc == nil {
		panic("ClusterRegistrationTokenControllerMock.ListerFunc: method is nil but ClusterRegistrationTokenController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRegistrationTokenControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockClusterRegistrationTokenControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedClusterRegistrationTokenController.ListerCalls())
func (mock *ClusterRegistrationTokenControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRegistrationTokenControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockClusterRegistrationTokenControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *ClusterRegistrationTokenControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("ClusterRegistrationTokenControllerMock.StartFunc: method is nil but ClusterRegistrationTokenController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockClusterRegistrationTokenControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockClusterRegistrationTokenControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedClusterRegistrationTokenController.StartCalls())
func (mock *ClusterRegistrationTokenControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockClusterRegistrationTokenControllerMockStart.RLock()
	calls = mock.calls.Start
	lockClusterRegistrationTokenControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *ClusterRegistrationTokenControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("ClusterRegistrationTokenControllerMock.SyncFunc: method is nil but ClusterRegistrationTokenController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockClusterRegistrationTokenControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockClusterRegistrationTokenControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedClusterRegistrationTokenController.SyncCalls())
func (mock *ClusterRegistrationTokenControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockClusterRegistrationTokenControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockClusterRegistrationTokenControllerMockSync.RUnlock()
	return calls
}

var (
	lockClusterRegistrationTokenInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockAddFeatureHandler         sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockAddHandler                sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockAddLifecycle              sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockController                sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockCreate                    sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockDelete                    sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockDeleteCollection          sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockDeleteNamespaced          sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockGet                       sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockGetNamespaced             sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockList                      sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockObjectClient              sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockUpdate                    sync.RWMutex
	lockClusterRegistrationTokenInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that ClusterRegistrationTokenInterfaceMock does implement ClusterRegistrationTokenInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.ClusterRegistrationTokenInterface = &ClusterRegistrationTokenInterfaceMock{}

// ClusterRegistrationTokenInterfaceMock is a mock implementation of ClusterRegistrationTokenInterface.
//
//     func TestSomethingThatUsesClusterRegistrationTokenInterface(t *testing.T) {
//
//         // make and configure a mocked ClusterRegistrationTokenInterface
//         mockedClusterRegistrationTokenInterface := &ClusterRegistrationTokenInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.ClusterRegistrationTokenHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.ClusterRegistrationTokenLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterRegistrationTokenHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.ClusterRegistrationTokenLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.ClusterRegistrationTokenHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.ClusterRegistrationTokenLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.ClusterRegistrationTokenController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.ClusterRegistrationToken) (*v3.ClusterRegistrationToken, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.ClusterRegistrationToken, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.ClusterRegistrationToken, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.ClusterRegistrationTokenList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.ClusterRegistrationToken) (*v3.ClusterRegistrationToken, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedClusterRegistrationTokenInterface in code that requires ClusterRegistrationTokenInterface
//         // and then make assertions.
//
//     }
type ClusterRegistrationTokenInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.ClusterRegistrationTokenHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.ClusterRegistrationTokenLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterRegistrationTokenHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.ClusterRegistrationTokenLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.ClusterRegistrationTokenHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.ClusterRegistrationTokenLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.ClusterRegistrationTokenController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.ClusterRegistrationToken) (*v3.ClusterRegistrationToken, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.ClusterRegistrationToken, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.ClusterRegistrationToken, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.ClusterRegistrationTokenList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.ClusterRegistrationToken) (*v3.ClusterRegistrationToken, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.ClusterRegistrationTokenHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ClusterRegistrationTokenLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ClusterRegistrationTokenHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ClusterRegistrationTokenLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ClusterRegistrationTokenHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ClusterRegistrationTokenLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.ClusterRegistrationToken
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.ClusterRegistrationToken
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.ClusterRegistrationTokenHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.AddClusterScopedHandlerFunc: method is nil but ClusterRegistrationTokenInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.ClusterRegistrationTokenHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockClusterRegistrationTokenInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockClusterRegistrationTokenInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.AddClusterScopedHandlerCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.ClusterRegistrationTokenHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.ClusterRegistrationTokenHandlerFunc
	}
	lockClusterRegistrationTokenInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockClusterRegistrationTokenInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.ClusterRegistrationTokenLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but ClusterRegistrationTokenInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.ClusterRegistrationTokenLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockClusterRegistrationTokenInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockClusterRegistrationTokenInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.AddClusterScopedLifecycleCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.ClusterRegistrationTokenLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.ClusterRegistrationTokenLifecycle
	}
	lockClusterRegistrationTokenInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockClusterRegistrationTokenInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterRegistrationTokenHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.AddFeatureHandlerFunc: method is nil but ClusterRegistrationTokenInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ClusterRegistrationTokenHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockClusterRegistrationTokenInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockClusterRegistrationTokenInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.AddFeatureHandlerCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.ClusterRegistrationTokenHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ClusterRegistrationTokenHandlerFunc
	}
	lockClusterRegistrationTokenInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockClusterRegistrationTokenInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.ClusterRegistrationTokenLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.AddFeatureLifecycleFunc: method is nil but ClusterRegistrationTokenInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.ClusterRegistrationTokenLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockClusterRegistrationTokenInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockClusterRegistrationTokenInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.AddFeatureLifecycleCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v3.ClusterRegistrationTokenLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.ClusterRegistrationTokenLifecycle
	}
	lockClusterRegistrationTokenInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockClusterRegistrationTokenInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.ClusterRegistrationTokenHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.AddHandlerFunc: method is nil but ClusterRegistrationTokenInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.ClusterRegistrationTokenHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockClusterRegistrationTokenInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockClusterRegistrationTokenInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.AddHandlerCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.ClusterRegistrationTokenHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.ClusterRegistrationTokenHandlerFunc
	}
	lockClusterRegistrationTokenInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockClusterRegistrationTokenInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.ClusterRegistrationTokenLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.AddLifecycleFunc: method is nil but ClusterRegistrationTokenInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.ClusterRegistrationTokenLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockClusterRegistrationTokenInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockClusterRegistrationTokenInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.AddLifecycleCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.ClusterRegistrationTokenLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.ClusterRegistrationTokenLifecycle
	}
	lockClusterRegistrationTokenInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockClusterRegistrationTokenInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) Controller() v3.ClusterRegistrationTokenController {
	if mock.ControllerFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.ControllerFunc: method is nil but ClusterRegistrationTokenInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRegistrationTokenInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockClusterRegistrationTokenInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.ControllerCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRegistrationTokenInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockClusterRegistrationTokenInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) Create(in1 *v3.ClusterRegistrationToken) (*v3.ClusterRegistrationToken, error) {
	if mock.CreateFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.CreateFunc: method is nil but ClusterRegistrationTokenInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.ClusterRegistrationToken
	}{
		In1: in1,
	}
	lockClusterRegistrationTokenInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockClusterRegistrationTokenInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.CreateCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) CreateCalls() []struct {
	In1 *v3.ClusterRegistrationToken
} {
	var calls []struct {
		In1 *v3.ClusterRegistrationToken
	}
	lockClusterRegistrationTokenInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockClusterRegistrationTokenInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.DeleteFunc: method is nil but ClusterRegistrationTokenInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterRegistrationTokenInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockClusterRegistrationTokenInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.DeleteCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockClusterRegistrationTokenInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockClusterRegistrationTokenInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.DeleteCollectionFunc: method is nil but ClusterRegistrationTokenInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockClusterRegistrationTokenInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockClusterRegistrationTokenInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.DeleteCollectionCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockClusterRegistrationTokenInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockClusterRegistrationTokenInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.DeleteNamespacedFunc: method is nil but ClusterRegistrationTokenInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockClusterRegistrationTokenInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockClusterRegistrationTokenInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.DeleteNamespacedCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockClusterRegistrationTokenInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockClusterRegistrationTokenInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.ClusterRegistrationToken, error) {
	if mock.GetFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.GetFunc: method is nil but ClusterRegistrationTokenInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockClusterRegistrationTokenInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterRegistrationTokenInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.GetCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockClusterRegistrationTokenInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockClusterRegistrationTokenInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.ClusterRegistrationToken, error) {
	if mock.GetNamespacedFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.GetNamespacedFunc: method is nil but ClusterRegistrationTokenInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockClusterRegistrationTokenInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockClusterRegistrationTokenInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.GetNamespacedCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockClusterRegistrationTokenInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockClusterRegistrationTokenInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) List(opts v1.ListOptions) (*v3.ClusterRegistrationTokenList, error) {
	if mock.ListFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.ListFunc: method is nil but ClusterRegistrationTokenInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockClusterRegistrationTokenInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterRegistrationTokenInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.ListCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockClusterRegistrationTokenInterfaceMockList.RLock()
	calls = mock.calls.List
	lockClusterRegistrationTokenInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.ObjectClientFunc: method is nil but ClusterRegistrationTokenInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRegistrationTokenInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockClusterRegistrationTokenInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.ObjectClientCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRegistrationTokenInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockClusterRegistrationTokenInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) Update(in1 *v3.ClusterRegistrationToken) (*v3.ClusterRegistrationToken, error) {
	if mock.UpdateFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.UpdateFunc: method is nil but ClusterRegistrationTokenInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.ClusterRegistrationToken
	}{
		In1: in1,
	}
	lockClusterRegistrationTokenInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockClusterRegistrationTokenInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.UpdateCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) UpdateCalls() []struct {
	In1 *v3.ClusterRegistrationToken
} {
	var calls []struct {
		In1 *v3.ClusterRegistrationToken
	}
	lockClusterRegistrationTokenInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockClusterRegistrationTokenInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ClusterRegistrationTokenInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ClusterRegistrationTokenInterfaceMock.WatchFunc: method is nil but ClusterRegistrationTokenInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockClusterRegistrationTokenInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockClusterRegistrationTokenInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedClusterRegistrationTokenInterface.WatchCalls())
func (mock *ClusterRegistrationTokenInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockClusterRegistrationTokenInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockClusterRegistrationTokenInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockClusterRegistrationTokensGetterMockClusterRegistrationTokens sync.RWMutex
)

// Ensure, that ClusterRegistrationTokensGetterMock does implement ClusterRegistrationTokensGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.ClusterRegistrationTokensGetter = &ClusterRegistrationTokensGetterMock{}

// ClusterRegistrationTokensGetterMock is a mock implementation of ClusterRegistrationTokensGetter.
//
//     func TestSomethingThatUsesClusterRegistrationTokensGetter(t *testing.T) {
//
//         // make and configure a mocked ClusterRegistrationTokensGetter
//         mockedClusterRegistrationTokensGetter := &ClusterRegistrationTokensGetterMock{
//             ClusterRegistrationTokensFunc: func(namespace string) v3.ClusterRegistrationTokenInterface {
// 	               panic("mock out the ClusterRegistrationTokens method")
//             },
//         }
//
//         // use mockedClusterRegistrationTokensGetter in code that requires ClusterRegistrationTokensGetter
//         // and then make assertions.
//
//     }
type ClusterRegistrationTokensGetterMock struct {
	// ClusterRegistrationTokensFunc mocks the ClusterRegistrationTokens method.
	ClusterRegistrationTokensFunc func(namespace string) v3.ClusterRegistrationTokenInterface

	// calls tracks calls to the methods.
	calls struct {
		// ClusterRegistrationTokens holds details about calls to the ClusterRegistrationTokens method.
		ClusterRegistrationTokens []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// ClusterRegistrationTokens calls ClusterRegistrationTokensFunc.
func (mock *ClusterRegistrationTokensGetterMock) ClusterRegistrationTokens(namespace string) v3.ClusterRegistrationTokenInterface {
	if mock.ClusterRegistrationTokensFunc == nil {
		panic("ClusterRegistrationTokensGetterMock.ClusterRegistrationTokensFunc: method is nil but ClusterRegistrationTokensGetter.ClusterRegistrationTokens was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockClusterRegistrationTokensGetterMockClusterRegistrationTokens.Lock()
	mock.calls.ClusterRegistrationTokens = append(mock.calls.ClusterRegistrationTokens, callInfo)
	lockClusterRegistrationTokensGetterMockClusterRegistrationTokens.Unlock()
	return mock.ClusterRegistrationTokensFunc(namespace)
}

// ClusterRegistrationTokensCalls gets all the calls that were made to ClusterRegistrationTokens.
// Check the length with:
//     len(mockedClusterRegistrationTokensGetter.ClusterRegistrationTokensCalls())
func (mock *ClusterRegistrationTokensGetterMock) ClusterRegistrationTokensCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockClusterRegistrationTokensGetterMockClusterRegistrationTokens.RLock()
	calls = mock.calls.ClusterRegistrationTokens
	lockClusterRegistrationTokensGetterMockClusterRegistrationTokens.RUnlock()
	return calls
}
