// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockMultiClusterAppListerMockGet  sync.RWMutex
	lockMultiClusterAppListerMockList sync.RWMutex
)

// Ensure, that MultiClusterAppListerMock does implement MultiClusterAppLister.
// If this is not the case, regenerate this file with moq.
var _ v3.MultiClusterAppLister = &MultiClusterAppListerMock{}

// MultiClusterAppListerMock is a mock implementation of MultiClusterAppLister.
//
//     func TestSomethingThatUsesMultiClusterAppLister(t *testing.T) {
//
//         // make and configure a mocked MultiClusterAppLister
//         mockedMultiClusterAppLister := &MultiClusterAppListerMock{
//             GetFunc: func(namespace string, name string) (*v3.MultiClusterApp, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.MultiClusterApp, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedMultiClusterAppLister in code that requires MultiClusterAppLister
//         // and then make assertions.
//
//     }
type MultiClusterAppListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.MultiClusterApp, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.MultiClusterApp, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *MultiClusterAppListerMock) Get(namespace string, name string) (*v3.MultiClusterApp, error) {
	if mock.GetFunc == nil {
		panic("MultiClusterAppListerMock.GetFunc: method is nil but MultiClusterAppLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockMultiClusterAppListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockMultiClusterAppListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedMultiClusterAppLister.GetCalls())
func (mock *MultiClusterAppListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockMultiClusterAppListerMockGet.RLock()
	calls = mock.calls.Get
	lockMultiClusterAppListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *MultiClusterAppListerMock) List(namespace string, selector labels.Selector) ([]*v3.MultiClusterApp, error) {
	if mock.ListFunc == nil {
		panic("MultiClusterAppListerMock.ListFunc: method is nil but MultiClusterAppLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockMultiClusterAppListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockMultiClusterAppListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedMultiClusterAppLister.ListCalls())
func (mock *MultiClusterAppListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockMultiClusterAppListerMockList.RLock()
	calls = mock.calls.List
	lockMultiClusterAppListerMockList.RUnlock()
	return calls
}

var (
	lockMultiClusterAppControllerMockAddClusterScopedHandler sync.RWMutex
	lockMultiClusterAppControllerMockAddFeatureHandler       sync.RWMutex
	lockMultiClusterAppControllerMockAddHandler              sync.RWMutex
	lockMultiClusterAppControllerMockEnqueue                 sync.RWMutex
	lockMultiClusterAppControllerMockGeneric                 sync.RWMutex
	lockMultiClusterAppControllerMockInformer                sync.RWMutex
	lockMultiClusterAppControllerMockLister                  sync.RWMutex
	lockMultiClusterAppControllerMockStart                   sync.RWMutex
	lockMultiClusterAppControllerMockSync                    sync.RWMutex
)

// Ensure, that MultiClusterAppControllerMock does implement MultiClusterAppController.
// If this is not the case, regenerate this file with moq.
var _ v3.MultiClusterAppController = &MultiClusterAppControllerMock{}

// MultiClusterAppControllerMock is a mock implementation of MultiClusterAppController.
//
//     func TestSomethingThatUsesMultiClusterAppController(t *testing.T) {
//
//         // make and configure a mocked MultiClusterAppController
//         mockedMultiClusterAppController := &MultiClusterAppControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.MultiClusterAppHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.MultiClusterAppHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.MultiClusterAppHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.MultiClusterAppLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedMultiClusterAppController in code that requires MultiClusterAppController
//         // and then make assertions.
//
//     }
type MultiClusterAppControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.MultiClusterAppHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.MultiClusterAppHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.MultiClusterAppHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.MultiClusterAppLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.MultiClusterAppHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.MultiClusterAppHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.MultiClusterAppHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *MultiClusterAppControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.MultiClusterAppHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("MultiClusterAppControllerMock.AddClusterScopedHandlerFunc: method is nil but MultiClusterAppController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.MultiClusterAppHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockMultiClusterAppControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockMultiClusterAppControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedMultiClusterAppController.AddClusterScopedHandlerCalls())
func (mock *MultiClusterAppControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.MultiClusterAppHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.MultiClusterAppHandlerFunc
	}
	lockMultiClusterAppControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockMultiClusterAppControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *MultiClusterAppControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.MultiClusterAppHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("MultiClusterAppControllerMock.AddFeatureHandlerFunc: method is nil but MultiClusterAppController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.MultiClusterAppHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockMultiClusterAppControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockMultiClusterAppControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedMultiClusterAppController.AddFeatureHandlerCalls())
func (mock *MultiClusterAppControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.MultiClusterAppHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.MultiClusterAppHandlerFunc
	}
	lockMultiClusterAppControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockMultiClusterAppControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *MultiClusterAppControllerMock) AddHandler(ctx context.Context, name string, handler v3.MultiClusterAppHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("MultiClusterAppControllerMock.AddHandlerFunc: method is nil but MultiClusterAppController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.MultiClusterAppHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockMultiClusterAppControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockMultiClusterAppControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedMultiClusterAppController.AddHandlerCalls())
func (mock *MultiClusterAppControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.MultiClusterAppHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.MultiClusterAppHandlerFunc
	}
	lockMultiClusterAppControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockMultiClusterAppControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *MultiClusterAppControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("MultiClusterAppControllerMock.EnqueueFunc: method is nil but MultiClusterAppController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockMultiClusterAppControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockMultiClusterAppControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedMultiClusterAppController.EnqueueCalls())
func (mock *MultiClusterAppControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockMultiClusterAppControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockMultiClusterAppControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *MultiClusterAppControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("MultiClusterAppControllerMock.GenericFunc: method is nil but MultiClusterAppController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockMultiClusterAppControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockMultiClusterAppControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedMultiClusterAppController.GenericCalls())
func (mock *MultiClusterAppControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockMultiClusterAppControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockMultiClusterAppControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *MultiClusterAppControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("MultiClusterAppControllerMock.InformerFunc: method is nil but MultiClusterAppController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockMultiClusterAppControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockMultiClusterAppControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedMultiClusterAppController.InformerCalls())
func (mock *MultiClusterAppControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockMultiClusterAppControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockMultiClusterAppControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *MultiClusterAppControllerMock) Lister() v3.MultiClusterAppLister {
	if mock.ListerFunc == nil {
		panic("MultiClusterAppControllerMock.ListerFunc: method is nil but MultiClusterAppController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockMultiClusterAppControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockMultiClusterAppControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedMultiClusterAppController.ListerCalls())
func (mock *MultiClusterAppControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockMultiClusterAppControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockMultiClusterAppControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *MultiClusterAppControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("MultiClusterAppControllerMock.StartFunc: method is nil but MultiClusterAppController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockMultiClusterAppControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockMultiClusterAppControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedMultiClusterAppController.StartCalls())
func (mock *MultiClusterAppControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockMultiClusterAppControllerMockStart.RLock()
	calls = mock.calls.Start
	lockMultiClusterAppControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *MultiClusterAppControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("MultiClusterAppControllerMock.SyncFunc: method is nil but MultiClusterAppController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockMultiClusterAppControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockMultiClusterAppControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedMultiClusterAppController.SyncCalls())
func (mock *MultiClusterAppControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockMultiClusterAppControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockMultiClusterAppControllerMockSync.RUnlock()
	return calls
}

var (
	lockMultiClusterAppInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockMultiClusterAppInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockMultiClusterAppInterfaceMockAddFeatureHandler         sync.RWMutex
	lockMultiClusterAppInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockMultiClusterAppInterfaceMockAddHandler                sync.RWMutex
	lockMultiClusterAppInterfaceMockAddLifecycle              sync.RWMutex
	lockMultiClusterAppInterfaceMockController                sync.RWMutex
	lockMultiClusterAppInterfaceMockCreate                    sync.RWMutex
	lockMultiClusterAppInterfaceMockDelete                    sync.RWMutex
	lockMultiClusterAppInterfaceMockDeleteCollection          sync.RWMutex
	lockMultiClusterAppInterfaceMockDeleteNamespaced          sync.RWMutex
	lockMultiClusterAppInterfaceMockGet                       sync.RWMutex
	lockMultiClusterAppInterfaceMockGetNamespaced             sync.RWMutex
	lockMultiClusterAppInterfaceMockList                      sync.RWMutex
	lockMultiClusterAppInterfaceMockObjectClient              sync.RWMutex
	lockMultiClusterAppInterfaceMockUpdate                    sync.RWMutex
	lockMultiClusterAppInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that MultiClusterAppInterfaceMock does implement MultiClusterAppInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.MultiClusterAppInterface = &MultiClusterAppInterfaceMock{}

// MultiClusterAppInterfaceMock is a mock implementation of MultiClusterAppInterface.
//
//     func TestSomethingThatUsesMultiClusterAppInterface(t *testing.T) {
//
//         // make and configure a mocked MultiClusterAppInterface
//         mockedMultiClusterAppInterface := &MultiClusterAppInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.MultiClusterAppHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.MultiClusterAppLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.MultiClusterAppHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.MultiClusterAppLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.MultiClusterAppHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.MultiClusterAppLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.MultiClusterAppController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.MultiClusterApp) (*v3.MultiClusterApp, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.MultiClusterApp, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.MultiClusterApp, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.MultiClusterAppList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.MultiClusterApp) (*v3.MultiClusterApp, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedMultiClusterAppInterface in code that requires MultiClusterAppInterface
//         // and then make assertions.
//
//     }
type MultiClusterAppInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.MultiClusterAppHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.MultiClusterAppLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.MultiClusterAppHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.MultiClusterAppLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.MultiClusterAppHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.MultiClusterAppLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.MultiClusterAppController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.MultiClusterApp) (*v3.MultiClusterApp, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.MultiClusterApp, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.MultiClusterApp, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.MultiClusterAppList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.MultiClusterApp) (*v3.MultiClusterApp, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.MultiClusterAppHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.MultiClusterAppLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.MultiClusterAppHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.MultiClusterAppLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.MultiClusterAppHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.MultiClusterAppLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.MultiClusterApp
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.MultiClusterApp
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *MultiClusterAppInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.MultiClusterAppHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("MultiClusterAppInterfaceMock.AddClusterScopedHandlerFunc: method is nil but MultiClusterAppInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.MultiClusterAppHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockMultiClusterAppInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockMultiClusterAppInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedMultiClusterAppInterface.AddClusterScopedHandlerCalls())
func (mock *MultiClusterAppInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.MultiClusterAppHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.MultiClusterAppHandlerFunc
	}
	lockMultiClusterAppInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockMultiClusterAppInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *MultiClusterAppInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.MultiClusterAppLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("MultiClusterAppInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but MultiClusterAppInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.MultiClusterAppLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockMultiClusterAppInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockMultiClusterAppInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedMultiClusterAppInterface.AddClusterScopedLifecycleCalls())
func (mock *MultiClusterAppInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.MultiClusterAppLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.MultiClusterAppLifecycle
	}
	lockMultiClusterAppInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockMultiClusterAppInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *MultiClusterAppInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.MultiClusterAppHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("MultiClusterAppInterfaceMock.AddFeatureHandlerFunc: method is nil but MultiClusterAppInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.MultiClusterAppHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockMultiClusterAppInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockMultiClusterAppInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedMultiClusterAppInterface.AddFeatureHandlerCalls())
func (mock *MultiClusterAppInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.MultiClusterAppHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.MultiClusterAppHandlerFunc
	}
	lockMultiClusterAppInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockMultiClusterAppInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *MultiClusterAppInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.MultiClusterAppLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("MultiClusterAppInterfaceMock.AddFeatureLifecycleFunc: method is nil but MultiClusterAppInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.MultiClusterAppLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockMultiClusterAppInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockMultiClusterAppInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedMultiClusterAppInterface.AddFeatureLifecycleCalls())
func (mock *MultiClusterAppInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v3.MultiClusterAppLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.MultiClusterAppLifecycle
	}
	lockMultiClusterAppInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockMultiClusterAppInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *MultiClusterAppInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.MultiClusterAppHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("MultiClusterAppInterfaceMock.AddHandlerFunc: method is nil but MultiClusterAppInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.MultiClusterAppHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockMultiClusterAppInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockMultiClusterAppInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedMultiClusterAppInterface.AddHandlerCalls())
func (mock *MultiClusterAppInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.MultiClusterAppHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.MultiClusterAppHandlerFunc
	}
	lockMultiClusterAppInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockMultiClusterAppInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *MultiClusterAppInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.MultiClusterAppLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("MultiClusterAppInterfaceMock.AddLifecycleFunc: method is nil but MultiClusterAppInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.MultiClusterAppLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockMultiClusterAppInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockMultiClusterAppInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedMultiClusterAppInterface.AddLifecycleCalls())
func (mock *MultiClusterAppInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.MultiClusterAppLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.MultiClusterAppLifecycle
	}
	lockMultiClusterAppInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockMultiClusterAppInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *MultiClusterAppInterfaceMock) Controller() v3.MultiClusterAppController {
	if mock.ControllerFunc == nil {
		panic("MultiClusterAppInterfaceMock.ControllerFunc: method is nil but MultiClusterAppInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockMultiClusterAppInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockMultiClusterAppInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedMultiClusterAppInterface.ControllerCalls())
func (mock *MultiClusterAppInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockMultiClusterAppInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockMultiClusterAppInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *MultiClusterAppInterfaceMock) Create(in1 *v3.MultiClusterApp) (*v3.MultiClusterApp, error) {
	if mock.CreateFunc == nil {
		panic("MultiClusterAppInterfaceMock.CreateFunc: method is nil but MultiClusterAppInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.MultiClusterApp
	}{
		In1: in1,
	}
	lockMultiClusterAppInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockMultiClusterAppInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedMultiClusterAppInterface.CreateCalls())
func (mock *MultiClusterAppInterfaceMock) CreateCalls() []struct {
	In1 *v3.MultiClusterApp
} {
	var calls []struct {
		In1 *v3.MultiClusterApp
	}
	lockMultiClusterAppInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockMultiClusterAppInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *MultiClusterAppInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("MultiClusterAppInterfaceMock.DeleteFunc: method is nil but MultiClusterAppInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockMultiClusterAppInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockMultiClusterAppInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedMultiClusterAppInterface.DeleteCalls())
func (mock *MultiClusterAppInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockMultiClusterAppInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockMultiClusterAppInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *MultiClusterAppInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("MultiClusterAppInterfaceMock.DeleteCollectionFunc: method is nil but MultiClusterAppInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockMultiClusterAppInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockMultiClusterAppInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedMultiClusterAppInterface.DeleteCollectionCalls())
func (mock *MultiClusterAppInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockMultiClusterAppInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockMultiClusterAppInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *MultiClusterAppInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("MultiClusterAppInterfaceMock.DeleteNamespacedFunc: method is nil but MultiClusterAppInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockMultiClusterAppInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockMultiClusterAppInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedMultiClusterAppInterface.DeleteNamespacedCalls())
func (mock *MultiClusterAppInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockMultiClusterAppInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockMultiClusterAppInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *MultiClusterAppInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.MultiClusterApp, error) {
	if mock.GetFunc == nil {
		panic("MultiClusterAppInterfaceMock.GetFunc: method is nil but MultiClusterAppInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockMultiClusterAppInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockMultiClusterAppInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedMultiClusterAppInterface.GetCalls())
func (mock *MultiClusterAppInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockMultiClusterAppInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockMultiClusterAppInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *MultiClusterAppInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.MultiClusterApp, error) {
	if mock.GetNamespacedFunc == nil {
		panic("MultiClusterAppInterfaceMock.GetNamespacedFunc: method is nil but MultiClusterAppInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockMultiClusterAppInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockMultiClusterAppInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedMultiClusterAppInterface.GetNamespacedCalls())
func (mock *MultiClusterAppInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockMultiClusterAppInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockMultiClusterAppInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *MultiClusterAppInterfaceMock) List(opts v1.ListOptions) (*v3.MultiClusterAppList, error) {
	if mock.ListFunc == nil {
		panic("MultiClusterAppInterfaceMock.ListFunc: method is nil but MultiClusterAppInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockMultiClusterAppInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockMultiClusterAppInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedMultiClusterAppInterface.ListCalls())
func (mock *MultiClusterAppInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockMultiClusterAppInterfaceMockList.RLock()
	calls = mock.calls.List
	lockMultiClusterAppInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *MultiClusterAppInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("MultiClusterAppInterfaceMock.ObjectClientFunc: method is nil but MultiClusterAppInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockMultiClusterAppInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockMultiClusterAppInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedMultiClusterAppInterface.ObjectClientCalls())
func (mock *MultiClusterAppInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockMultiClusterAppInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockMultiClusterAppInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *MultiClusterAppInterfaceMock) Update(in1 *v3.MultiClusterApp) (*v3.MultiClusterApp, error) {
	if mock.UpdateFunc == nil {
		panic("MultiClusterAppInterfaceMock.UpdateFunc: method is nil but MultiClusterAppInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.MultiClusterApp
	}{
		In1: in1,
	}
	lockMultiClusterAppInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockMultiClusterAppInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedMultiClusterAppInterface.UpdateCalls())
func (mock *MultiClusterAppInterfaceMock) UpdateCalls() []struct {
	In1 *v3.MultiClusterApp
} {
	var calls []struct {
		In1 *v3.MultiClusterApp
	}
	lockMultiClusterAppInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockMultiClusterAppInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *MultiClusterAppInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("MultiClusterAppInterfaceMock.WatchFunc: method is nil but MultiClusterAppInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockMultiClusterAppInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockMultiClusterAppInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedMultiClusterAppInterface.WatchCalls())
func (mock *MultiClusterAppInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockMultiClusterAppInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockMultiClusterAppInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockMultiClusterAppsGetterMockMultiClusterApps sync.RWMutex
)

// Ensure, that MultiClusterAppsGetterMock does implement MultiClusterAppsGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.MultiClusterAppsGetter = &MultiClusterAppsGetterMock{}

// MultiClusterAppsGetterMock is a mock implementation of MultiClusterAppsGetter.
//
//     func TestSomethingThatUsesMultiClusterAppsGetter(t *testing.T) {
//
//         // make and configure a mocked MultiClusterAppsGetter
//         mockedMultiClusterAppsGetter := &MultiClusterAppsGetterMock{
//             MultiClusterAppsFunc: func(namespace string) v3.MultiClusterAppInterface {
// 	               panic("mock out the MultiClusterApps method")
//             },
//         }
//
//         // use mockedMultiClusterAppsGetter in code that requires MultiClusterAppsGetter
//         // and then make assertions.
//
//     }
type MultiClusterAppsGetterMock struct {
	// MultiClusterAppsFunc mocks the MultiClusterApps method.
	MultiClusterAppsFunc func(namespace string) v3.MultiClusterAppInterface

	// calls tracks calls to the methods.
	calls struct {
		// MultiClusterApps holds details about calls to the MultiClusterApps method.
		MultiClusterApps []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// MultiClusterApps calls MultiClusterAppsFunc.
func (mock *MultiClusterAppsGetterMock) MultiClusterApps(namespace string) v3.MultiClusterAppInterface {
	if mock.MultiClusterAppsFunc == nil {
		panic("MultiClusterAppsGetterMock.MultiClusterAppsFunc: method is nil but MultiClusterAppsGetter.MultiClusterApps was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockMultiClusterAppsGetterMockMultiClusterApps.Lock()
	mock.calls.MultiClusterApps = append(mock.calls.MultiClusterApps, callInfo)
	lockMultiClusterAppsGetterMockMultiClusterApps.Unlock()
	return mock.MultiClusterAppsFunc(namespace)
}

// MultiClusterAppsCalls gets all the calls that were made to MultiClusterApps.
// Check the length with:
//     len(mockedMultiClusterAppsGetter.MultiClusterAppsCalls())
func (mock *MultiClusterAppsGetterMock) MultiClusterAppsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockMultiClusterAppsGetterMockMultiClusterApps.RLock()
	calls = mock.calls.MultiClusterApps
	lockMultiClusterAppsGetterMockMultiClusterApps.RUnlock()
	return calls
}
