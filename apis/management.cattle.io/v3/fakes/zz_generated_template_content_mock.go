// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockTemplateContentListerMockGet  sync.RWMutex
	lockTemplateContentListerMockList sync.RWMutex
)

// Ensure, that TemplateContentListerMock does implement TemplateContentLister.
// If this is not the case, regenerate this file with moq.
var _ v3.TemplateContentLister = &TemplateContentListerMock{}

// TemplateContentListerMock is a mock implementation of TemplateContentLister.
//
//     func TestSomethingThatUsesTemplateContentLister(t *testing.T) {
//
//         // make and configure a mocked TemplateContentLister
//         mockedTemplateContentLister := &TemplateContentListerMock{
//             GetFunc: func(namespace string, name string) (*v3.TemplateContent, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.TemplateContent, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedTemplateContentLister in code that requires TemplateContentLister
//         // and then make assertions.
//
//     }
type TemplateContentListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.TemplateContent, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.TemplateContent, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *TemplateContentListerMock) Get(namespace string, name string) (*v3.TemplateContent, error) {
	if mock.GetFunc == nil {
		panic("TemplateContentListerMock.GetFunc: method is nil but TemplateContentLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockTemplateContentListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockTemplateContentListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedTemplateContentLister.GetCalls())
func (mock *TemplateContentListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockTemplateContentListerMockGet.RLock()
	calls = mock.calls.Get
	lockTemplateContentListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *TemplateContentListerMock) List(namespace string, selector labels.Selector) ([]*v3.TemplateContent, error) {
	if mock.ListFunc == nil {
		panic("TemplateContentListerMock.ListFunc: method is nil but TemplateContentLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockTemplateContentListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockTemplateContentListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedTemplateContentLister.ListCalls())
func (mock *TemplateContentListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockTemplateContentListerMockList.RLock()
	calls = mock.calls.List
	lockTemplateContentListerMockList.RUnlock()
	return calls
}

var (
	lockTemplateContentControllerMockAddClusterScopedHandler sync.RWMutex
	lockTemplateContentControllerMockAddFeatureHandler       sync.RWMutex
	lockTemplateContentControllerMockAddHandler              sync.RWMutex
	lockTemplateContentControllerMockEnqueue                 sync.RWMutex
	lockTemplateContentControllerMockGeneric                 sync.RWMutex
	lockTemplateContentControllerMockInformer                sync.RWMutex
	lockTemplateContentControllerMockLister                  sync.RWMutex
	lockTemplateContentControllerMockStart                   sync.RWMutex
	lockTemplateContentControllerMockSync                    sync.RWMutex
)

// Ensure, that TemplateContentControllerMock does implement TemplateContentController.
// If this is not the case, regenerate this file with moq.
var _ v3.TemplateContentController = &TemplateContentControllerMock{}

// TemplateContentControllerMock is a mock implementation of TemplateContentController.
//
//     func TestSomethingThatUsesTemplateContentController(t *testing.T) {
//
//         // make and configure a mocked TemplateContentController
//         mockedTemplateContentController := &TemplateContentControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.TemplateContentHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.TemplateContentHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.TemplateContentHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.TemplateContentLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedTemplateContentController in code that requires TemplateContentController
//         // and then make assertions.
//
//     }
type TemplateContentControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.TemplateContentHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.TemplateContentHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.TemplateContentHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.TemplateContentLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.TemplateContentHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.TemplateContentHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.TemplateContentHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *TemplateContentControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.TemplateContentHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("TemplateContentControllerMock.AddClusterScopedHandlerFunc: method is nil but TemplateContentController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.TemplateContentHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockTemplateContentControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockTemplateContentControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedTemplateContentController.AddClusterScopedHandlerCalls())
func (mock *TemplateContentControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.TemplateContentHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.TemplateContentHandlerFunc
	}
	lockTemplateContentControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockTemplateContentControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *TemplateContentControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.TemplateContentHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("TemplateContentControllerMock.AddFeatureHandlerFunc: method is nil but TemplateContentController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.TemplateContentHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockTemplateContentControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockTemplateContentControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedTemplateContentController.AddFeatureHandlerCalls())
func (mock *TemplateContentControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.TemplateContentHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.TemplateContentHandlerFunc
	}
	lockTemplateContentControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockTemplateContentControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *TemplateContentControllerMock) AddHandler(ctx context.Context, name string, handler v3.TemplateContentHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("TemplateContentControllerMock.AddHandlerFunc: method is nil but TemplateContentController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.TemplateContentHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockTemplateContentControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockTemplateContentControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedTemplateContentController.AddHandlerCalls())
func (mock *TemplateContentControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.TemplateContentHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.TemplateContentHandlerFunc
	}
	lockTemplateContentControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockTemplateContentControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *TemplateContentControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("TemplateContentControllerMock.EnqueueFunc: method is nil but TemplateContentController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockTemplateContentControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockTemplateContentControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedTemplateContentController.EnqueueCalls())
func (mock *TemplateContentControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockTemplateContentControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockTemplateContentControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *TemplateContentControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("TemplateContentControllerMock.GenericFunc: method is nil but TemplateContentController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockTemplateContentControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockTemplateContentControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedTemplateContentController.GenericCalls())
func (mock *TemplateContentControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockTemplateContentControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockTemplateContentControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *TemplateContentControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("TemplateContentControllerMock.InformerFunc: method is nil but TemplateContentController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockTemplateContentControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockTemplateContentControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedTemplateContentController.InformerCalls())
func (mock *TemplateContentControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockTemplateContentControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockTemplateContentControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *TemplateContentControllerMock) Lister() v3.TemplateContentLister {
	if mock.ListerFunc == nil {
		panic("TemplateContentControllerMock.ListerFunc: method is nil but TemplateContentController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockTemplateContentControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockTemplateContentControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedTemplateContentController.ListerCalls())
func (mock *TemplateContentControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockTemplateContentControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockTemplateContentControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *TemplateContentControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("TemplateContentControllerMock.StartFunc: method is nil but TemplateContentController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockTemplateContentControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockTemplateContentControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedTemplateContentController.StartCalls())
func (mock *TemplateContentControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockTemplateContentControllerMockStart.RLock()
	calls = mock.calls.Start
	lockTemplateContentControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *TemplateContentControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("TemplateContentControllerMock.SyncFunc: method is nil but TemplateContentController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockTemplateContentControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockTemplateContentControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedTemplateContentController.SyncCalls())
func (mock *TemplateContentControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockTemplateContentControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockTemplateContentControllerMockSync.RUnlock()
	return calls
}

var (
	lockTemplateContentInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockTemplateContentInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockTemplateContentInterfaceMockAddFeatureHandler         sync.RWMutex
	lockTemplateContentInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockTemplateContentInterfaceMockAddHandler                sync.RWMutex
	lockTemplateContentInterfaceMockAddLifecycle              sync.RWMutex
	lockTemplateContentInterfaceMockController                sync.RWMutex
	lockTemplateContentInterfaceMockCreate                    sync.RWMutex
	lockTemplateContentInterfaceMockDelete                    sync.RWMutex
	lockTemplateContentInterfaceMockDeleteCollection          sync.RWMutex
	lockTemplateContentInterfaceMockDeleteNamespaced          sync.RWMutex
	lockTemplateContentInterfaceMockGet                       sync.RWMutex
	lockTemplateContentInterfaceMockGetNamespaced             sync.RWMutex
	lockTemplateContentInterfaceMockList                      sync.RWMutex
	lockTemplateContentInterfaceMockObjectClient              sync.RWMutex
	lockTemplateContentInterfaceMockUpdate                    sync.RWMutex
	lockTemplateContentInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that TemplateContentInterfaceMock does implement TemplateContentInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.TemplateContentInterface = &TemplateContentInterfaceMock{}

// TemplateContentInterfaceMock is a mock implementation of TemplateContentInterface.
//
//     func TestSomethingThatUsesTemplateContentInterface(t *testing.T) {
//
//         // make and configure a mocked TemplateContentInterface
//         mockedTemplateContentInterface := &TemplateContentInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.TemplateContentHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.TemplateContentLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.TemplateContentHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.TemplateContentLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.TemplateContentHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.TemplateContentLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.TemplateContentController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.TemplateContent) (*v3.TemplateContent, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.TemplateContent, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.TemplateContent, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.TemplateContentList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.TemplateContent) (*v3.TemplateContent, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedTemplateContentInterface in code that requires TemplateContentInterface
//         // and then make assertions.
//
//     }
type TemplateContentInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.TemplateContentHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.TemplateContentLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.TemplateContentHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.TemplateContentLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.TemplateContentHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.TemplateContentLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.TemplateContentController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.TemplateContent) (*v3.TemplateContent, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.TemplateContent, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.TemplateContent, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.TemplateContentList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.TemplateContent) (*v3.TemplateContent, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.TemplateContentHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.TemplateContentLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.TemplateContentHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.TemplateContentLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.TemplateContentHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.TemplateContentLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.TemplateContent
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.TemplateContent
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *TemplateContentInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.TemplateContentHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("TemplateContentInterfaceMock.AddClusterScopedHandlerFunc: method is nil but TemplateContentInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.TemplateContentHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockTemplateContentInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockTemplateContentInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedTemplateContentInterface.AddClusterScopedHandlerCalls())
func (mock *TemplateContentInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.TemplateContentHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.TemplateContentHandlerFunc
	}
	lockTemplateContentInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockTemplateContentInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *TemplateContentInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.TemplateContentLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("TemplateContentInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but TemplateContentInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.TemplateContentLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockTemplateContentInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockTemplateContentInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedTemplateContentInterface.AddClusterScopedLifecycleCalls())
func (mock *TemplateContentInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.TemplateContentLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.TemplateContentLifecycle
	}
	lockTemplateContentInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockTemplateContentInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *TemplateContentInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.TemplateContentHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("TemplateContentInterfaceMock.AddFeatureHandlerFunc: method is nil but TemplateContentInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.TemplateContentHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockTemplateContentInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockTemplateContentInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedTemplateContentInterface.AddFeatureHandlerCalls())
func (mock *TemplateContentInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.TemplateContentHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.TemplateContentHandlerFunc
	}
	lockTemplateContentInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockTemplateContentInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *TemplateContentInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.TemplateContentLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("TemplateContentInterfaceMock.AddFeatureLifecycleFunc: method is nil but TemplateContentInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.TemplateContentLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockTemplateContentInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockTemplateContentInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedTemplateContentInterface.AddFeatureLifecycleCalls())
func (mock *TemplateContentInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v3.TemplateContentLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.TemplateContentLifecycle
	}
	lockTemplateContentInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockTemplateContentInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *TemplateContentInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.TemplateContentHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("TemplateContentInterfaceMock.AddHandlerFunc: method is nil but TemplateContentInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.TemplateContentHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockTemplateContentInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockTemplateContentInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedTemplateContentInterface.AddHandlerCalls())
func (mock *TemplateContentInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.TemplateContentHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.TemplateContentHandlerFunc
	}
	lockTemplateContentInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockTemplateContentInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *TemplateContentInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.TemplateContentLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("TemplateContentInterfaceMock.AddLifecycleFunc: method is nil but TemplateContentInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.TemplateContentLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockTemplateContentInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockTemplateContentInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedTemplateContentInterface.AddLifecycleCalls())
func (mock *TemplateContentInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.TemplateContentLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.TemplateContentLifecycle
	}
	lockTemplateContentInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockTemplateContentInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *TemplateContentInterfaceMock) Controller() v3.TemplateContentController {
	if mock.ControllerFunc == nil {
		panic("TemplateContentInterfaceMock.ControllerFunc: method is nil but TemplateContentInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockTemplateContentInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockTemplateContentInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedTemplateContentInterface.ControllerCalls())
func (mock *TemplateContentInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockTemplateContentInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockTemplateContentInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *TemplateContentInterfaceMock) Create(in1 *v3.TemplateContent) (*v3.TemplateContent, error) {
	if mock.CreateFunc == nil {
		panic("TemplateContentInterfaceMock.CreateFunc: method is nil but TemplateContentInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.TemplateContent
	}{
		In1: in1,
	}
	lockTemplateContentInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockTemplateContentInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedTemplateContentInterface.CreateCalls())
func (mock *TemplateContentInterfaceMock) CreateCalls() []struct {
	In1 *v3.TemplateContent
} {
	var calls []struct {
		In1 *v3.TemplateContent
	}
	lockTemplateContentInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockTemplateContentInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *TemplateContentInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("TemplateContentInterfaceMock.DeleteFunc: method is nil but TemplateContentInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockTemplateContentInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockTemplateContentInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedTemplateContentInterface.DeleteCalls())
func (mock *TemplateContentInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockTemplateContentInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockTemplateContentInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *TemplateContentInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("TemplateContentInterfaceMock.DeleteCollectionFunc: method is nil but TemplateContentInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockTemplateContentInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockTemplateContentInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedTemplateContentInterface.DeleteCollectionCalls())
func (mock *TemplateContentInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockTemplateContentInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockTemplateContentInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *TemplateContentInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("TemplateContentInterfaceMock.DeleteNamespacedFunc: method is nil but TemplateContentInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockTemplateContentInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockTemplateContentInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedTemplateContentInterface.DeleteNamespacedCalls())
func (mock *TemplateContentInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockTemplateContentInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockTemplateContentInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *TemplateContentInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.TemplateContent, error) {
	if mock.GetFunc == nil {
		panic("TemplateContentInterfaceMock.GetFunc: method is nil but TemplateContentInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockTemplateContentInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockTemplateContentInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedTemplateContentInterface.GetCalls())
func (mock *TemplateContentInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockTemplateContentInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockTemplateContentInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *TemplateContentInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.TemplateContent, error) {
	if mock.GetNamespacedFunc == nil {
		panic("TemplateContentInterfaceMock.GetNamespacedFunc: method is nil but TemplateContentInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockTemplateContentInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockTemplateContentInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedTemplateContentInterface.GetNamespacedCalls())
func (mock *TemplateContentInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockTemplateContentInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockTemplateContentInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *TemplateContentInterfaceMock) List(opts v1.ListOptions) (*v3.TemplateContentList, error) {
	if mock.ListFunc == nil {
		panic("TemplateContentInterfaceMock.ListFunc: method is nil but TemplateContentInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockTemplateContentInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockTemplateContentInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedTemplateContentInterface.ListCalls())
func (mock *TemplateContentInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockTemplateContentInterfaceMockList.RLock()
	calls = mock.calls.List
	lockTemplateContentInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *TemplateContentInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("TemplateContentInterfaceMock.ObjectClientFunc: method is nil but TemplateContentInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockTemplateContentInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockTemplateContentInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedTemplateContentInterface.ObjectClientCalls())
func (mock *TemplateContentInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockTemplateContentInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockTemplateContentInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *TemplateContentInterfaceMock) Update(in1 *v3.TemplateContent) (*v3.TemplateContent, error) {
	if mock.UpdateFunc == nil {
		panic("TemplateContentInterfaceMock.UpdateFunc: method is nil but TemplateContentInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.TemplateContent
	}{
		In1: in1,
	}
	lockTemplateContentInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockTemplateContentInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedTemplateContentInterface.UpdateCalls())
func (mock *TemplateContentInterfaceMock) UpdateCalls() []struct {
	In1 *v3.TemplateContent
} {
	var calls []struct {
		In1 *v3.TemplateContent
	}
	lockTemplateContentInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockTemplateContentInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *TemplateContentInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("TemplateContentInterfaceMock.WatchFunc: method is nil but TemplateContentInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockTemplateContentInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockTemplateContentInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedTemplateContentInterface.WatchCalls())
func (mock *TemplateContentInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockTemplateContentInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockTemplateContentInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockTemplateContentsGetterMockTemplateContents sync.RWMutex
)

// Ensure, that TemplateContentsGetterMock does implement TemplateContentsGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.TemplateContentsGetter = &TemplateContentsGetterMock{}

// TemplateContentsGetterMock is a mock implementation of TemplateContentsGetter.
//
//     func TestSomethingThatUsesTemplateContentsGetter(t *testing.T) {
//
//         // make and configure a mocked TemplateContentsGetter
//         mockedTemplateContentsGetter := &TemplateContentsGetterMock{
//             TemplateContentsFunc: func(namespace string) v3.TemplateContentInterface {
// 	               panic("mock out the TemplateContents method")
//             },
//         }
//
//         // use mockedTemplateContentsGetter in code that requires TemplateContentsGetter
//         // and then make assertions.
//
//     }
type TemplateContentsGetterMock struct {
	// TemplateContentsFunc mocks the TemplateContents method.
	TemplateContentsFunc func(namespace string) v3.TemplateContentInterface

	// calls tracks calls to the methods.
	calls struct {
		// TemplateContents holds details about calls to the TemplateContents method.
		TemplateContents []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// TemplateContents calls TemplateContentsFunc.
func (mock *TemplateContentsGetterMock) TemplateContents(namespace string) v3.TemplateContentInterface {
	if mock.TemplateContentsFunc == nil {
		panic("TemplateContentsGetterMock.TemplateContentsFunc: method is nil but TemplateContentsGetter.TemplateContents was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockTemplateContentsGetterMockTemplateContents.Lock()
	mock.calls.TemplateContents = append(mock.calls.TemplateContents, callInfo)
	lockTemplateContentsGetterMockTemplateContents.Unlock()
	return mock.TemplateContentsFunc(namespace)
}

// TemplateContentsCalls gets all the calls that were made to TemplateContents.
// Check the length with:
//     len(mockedTemplateContentsGetter.TemplateContentsCalls())
func (mock *TemplateContentsGetterMock) TemplateContentsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockTemplateContentsGetterMockTemplateContents.RLock()
	calls = mock.calls.TemplateContents
	lockTemplateContentsGetterMockTemplateContents.RUnlock()
	return calls
}
