// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockNotifierListerMockGet  sync.RWMutex
	lockNotifierListerMockList sync.RWMutex
)

// Ensure, that NotifierListerMock does implement NotifierLister.
// If this is not the case, regenerate this file with moq.
var _ v3.NotifierLister = &NotifierListerMock{}

// NotifierListerMock is a mock implementation of NotifierLister.
//
//     func TestSomethingThatUsesNotifierLister(t *testing.T) {
//
//         // make and configure a mocked NotifierLister
//         mockedNotifierLister := &NotifierListerMock{
//             GetFunc: func(namespace string, name string) (*v3.Notifier, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.Notifier, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedNotifierLister in code that requires NotifierLister
//         // and then make assertions.
//
//     }
type NotifierListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.Notifier, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.Notifier, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *NotifierListerMock) Get(namespace string, name string) (*v3.Notifier, error) {
	if mock.GetFunc == nil {
		panic("NotifierListerMock.GetFunc: method is nil but NotifierLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockNotifierListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockNotifierListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedNotifierLister.GetCalls())
func (mock *NotifierListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockNotifierListerMockGet.RLock()
	calls = mock.calls.Get
	lockNotifierListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *NotifierListerMock) List(namespace string, selector labels.Selector) ([]*v3.Notifier, error) {
	if mock.ListFunc == nil {
		panic("NotifierListerMock.ListFunc: method is nil but NotifierLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockNotifierListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockNotifierListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedNotifierLister.ListCalls())
func (mock *NotifierListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockNotifierListerMockList.RLock()
	calls = mock.calls.List
	lockNotifierListerMockList.RUnlock()
	return calls
}

var (
	lockNotifierControllerMockAddClusterScopedHandler sync.RWMutex
	lockNotifierControllerMockAddFeatureHandler       sync.RWMutex
	lockNotifierControllerMockAddHandler              sync.RWMutex
	lockNotifierControllerMockEnqueue                 sync.RWMutex
	lockNotifierControllerMockGeneric                 sync.RWMutex
	lockNotifierControllerMockInformer                sync.RWMutex
	lockNotifierControllerMockLister                  sync.RWMutex
	lockNotifierControllerMockStart                   sync.RWMutex
	lockNotifierControllerMockSync                    sync.RWMutex
)

// Ensure, that NotifierControllerMock does implement NotifierController.
// If this is not the case, regenerate this file with moq.
var _ v3.NotifierController = &NotifierControllerMock{}

// NotifierControllerMock is a mock implementation of NotifierController.
//
//     func TestSomethingThatUsesNotifierController(t *testing.T) {
//
//         // make and configure a mocked NotifierController
//         mockedNotifierController := &NotifierControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.NotifierHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.NotifierHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.NotifierHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.NotifierLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedNotifierController in code that requires NotifierController
//         // and then make assertions.
//
//     }
type NotifierControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.NotifierHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.NotifierHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.NotifierHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.NotifierLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.NotifierHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.NotifierHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.NotifierHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *NotifierControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.NotifierHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("NotifierControllerMock.AddClusterScopedHandlerFunc: method is nil but NotifierController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.NotifierHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockNotifierControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockNotifierControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedNotifierController.AddClusterScopedHandlerCalls())
func (mock *NotifierControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.NotifierHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.NotifierHandlerFunc
	}
	lockNotifierControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockNotifierControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *NotifierControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.NotifierHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("NotifierControllerMock.AddFeatureHandlerFunc: method is nil but NotifierController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.NotifierHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockNotifierControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockNotifierControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedNotifierController.AddFeatureHandlerCalls())
func (mock *NotifierControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.NotifierHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.NotifierHandlerFunc
	}
	lockNotifierControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockNotifierControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *NotifierControllerMock) AddHandler(ctx context.Context, name string, handler v3.NotifierHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("NotifierControllerMock.AddHandlerFunc: method is nil but NotifierController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.NotifierHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockNotifierControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockNotifierControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedNotifierController.AddHandlerCalls())
func (mock *NotifierControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.NotifierHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.NotifierHandlerFunc
	}
	lockNotifierControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockNotifierControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *NotifierControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("NotifierControllerMock.EnqueueFunc: method is nil but NotifierController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockNotifierControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockNotifierControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedNotifierController.EnqueueCalls())
func (mock *NotifierControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockNotifierControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockNotifierControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *NotifierControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("NotifierControllerMock.GenericFunc: method is nil but NotifierController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockNotifierControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockNotifierControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedNotifierController.GenericCalls())
func (mock *NotifierControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockNotifierControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockNotifierControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *NotifierControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("NotifierControllerMock.InformerFunc: method is nil but NotifierController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockNotifierControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockNotifierControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedNotifierController.InformerCalls())
func (mock *NotifierControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockNotifierControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockNotifierControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *NotifierControllerMock) Lister() v3.NotifierLister {
	if mock.ListerFunc == nil {
		panic("NotifierControllerMock.ListerFunc: method is nil but NotifierController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockNotifierControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockNotifierControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedNotifierController.ListerCalls())
func (mock *NotifierControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockNotifierControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockNotifierControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *NotifierControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("NotifierControllerMock.StartFunc: method is nil but NotifierController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockNotifierControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockNotifierControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedNotifierController.StartCalls())
func (mock *NotifierControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockNotifierControllerMockStart.RLock()
	calls = mock.calls.Start
	lockNotifierControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *NotifierControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("NotifierControllerMock.SyncFunc: method is nil but NotifierController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockNotifierControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockNotifierControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedNotifierController.SyncCalls())
func (mock *NotifierControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockNotifierControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockNotifierControllerMockSync.RUnlock()
	return calls
}

var (
	lockNotifierInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockNotifierInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockNotifierInterfaceMockAddFeatureHandler         sync.RWMutex
	lockNotifierInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockNotifierInterfaceMockAddHandler                sync.RWMutex
	lockNotifierInterfaceMockAddLifecycle              sync.RWMutex
	lockNotifierInterfaceMockController                sync.RWMutex
	lockNotifierInterfaceMockCreate                    sync.RWMutex
	lockNotifierInterfaceMockDelete                    sync.RWMutex
	lockNotifierInterfaceMockDeleteCollection          sync.RWMutex
	lockNotifierInterfaceMockDeleteNamespaced          sync.RWMutex
	lockNotifierInterfaceMockGet                       sync.RWMutex
	lockNotifierInterfaceMockGetNamespaced             sync.RWMutex
	lockNotifierInterfaceMockList                      sync.RWMutex
	lockNotifierInterfaceMockObjectClient              sync.RWMutex
	lockNotifierInterfaceMockUpdate                    sync.RWMutex
	lockNotifierInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that NotifierInterfaceMock does implement NotifierInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.NotifierInterface = &NotifierInterfaceMock{}

// NotifierInterfaceMock is a mock implementation of NotifierInterface.
//
//     func TestSomethingThatUsesNotifierInterface(t *testing.T) {
//
//         // make and configure a mocked NotifierInterface
//         mockedNotifierInterface := &NotifierInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.NotifierHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.NotifierLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.NotifierHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.NotifierLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.NotifierHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.NotifierLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.NotifierController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.Notifier) (*v3.Notifier, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.Notifier, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.Notifier, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.NotifierList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.Notifier) (*v3.Notifier, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedNotifierInterface in code that requires NotifierInterface
//         // and then make assertions.
//
//     }
type NotifierInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.NotifierHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.NotifierLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.NotifierHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.NotifierLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.NotifierHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.NotifierLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.NotifierController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.Notifier) (*v3.Notifier, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.Notifier, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.Notifier, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.NotifierList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.Notifier) (*v3.Notifier, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.NotifierHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.NotifierLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.NotifierHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.NotifierLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.NotifierHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.NotifierLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.Notifier
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.Notifier
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *NotifierInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.NotifierHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("NotifierInterfaceMock.AddClusterScopedHandlerFunc: method is nil but NotifierInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.NotifierHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockNotifierInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockNotifierInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedNotifierInterface.AddClusterScopedHandlerCalls())
func (mock *NotifierInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.NotifierHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.NotifierHandlerFunc
	}
	lockNotifierInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockNotifierInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *NotifierInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.NotifierLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("NotifierInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but NotifierInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.NotifierLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockNotifierInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockNotifierInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedNotifierInterface.AddClusterScopedLifecycleCalls())
func (mock *NotifierInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.NotifierLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.NotifierLifecycle
	}
	lockNotifierInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockNotifierInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *NotifierInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.NotifierHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("NotifierInterfaceMock.AddFeatureHandlerFunc: method is nil but NotifierInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.NotifierHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockNotifierInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockNotifierInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedNotifierInterface.AddFeatureHandlerCalls())
func (mock *NotifierInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.NotifierHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.NotifierHandlerFunc
	}
	lockNotifierInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockNotifierInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *NotifierInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.NotifierLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("NotifierInterfaceMock.AddFeatureLifecycleFunc: method is nil but NotifierInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.NotifierLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockNotifierInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockNotifierInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedNotifierInterface.AddFeatureLifecycleCalls())
func (mock *NotifierInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v3.NotifierLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.NotifierLifecycle
	}
	lockNotifierInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockNotifierInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *NotifierInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.NotifierHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("NotifierInterfaceMock.AddHandlerFunc: method is nil but NotifierInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.NotifierHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockNotifierInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockNotifierInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedNotifierInterface.AddHandlerCalls())
func (mock *NotifierInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.NotifierHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.NotifierHandlerFunc
	}
	lockNotifierInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockNotifierInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *NotifierInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.NotifierLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("NotifierInterfaceMock.AddLifecycleFunc: method is nil but NotifierInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.NotifierLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockNotifierInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockNotifierInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedNotifierInterface.AddLifecycleCalls())
func (mock *NotifierInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.NotifierLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.NotifierLifecycle
	}
	lockNotifierInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockNotifierInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *NotifierInterfaceMock) Controller() v3.NotifierController {
	if mock.ControllerFunc == nil {
		panic("NotifierInterfaceMock.ControllerFunc: method is nil but NotifierInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockNotifierInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockNotifierInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedNotifierInterface.ControllerCalls())
func (mock *NotifierInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockNotifierInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockNotifierInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *NotifierInterfaceMock) Create(in1 *v3.Notifier) (*v3.Notifier, error) {
	if mock.CreateFunc == nil {
		panic("NotifierInterfaceMock.CreateFunc: method is nil but NotifierInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.Notifier
	}{
		In1: in1,
	}
	lockNotifierInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockNotifierInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedNotifierInterface.CreateCalls())
func (mock *NotifierInterfaceMock) CreateCalls() []struct {
	In1 *v3.Notifier
} {
	var calls []struct {
		In1 *v3.Notifier
	}
	lockNotifierInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockNotifierInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *NotifierInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("NotifierInterfaceMock.DeleteFunc: method is nil but NotifierInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockNotifierInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockNotifierInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedNotifierInterface.DeleteCalls())
func (mock *NotifierInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockNotifierInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockNotifierInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *NotifierInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("NotifierInterfaceMock.DeleteCollectionFunc: method is nil but NotifierInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockNotifierInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockNotifierInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedNotifierInterface.DeleteCollectionCalls())
func (mock *NotifierInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockNotifierInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockNotifierInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *NotifierInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("NotifierInterfaceMock.DeleteNamespacedFunc: method is nil but NotifierInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockNotifierInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockNotifierInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedNotifierInterface.DeleteNamespacedCalls())
func (mock *NotifierInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockNotifierInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockNotifierInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *NotifierInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.Notifier, error) {
	if mock.GetFunc == nil {
		panic("NotifierInterfaceMock.GetFunc: method is nil but NotifierInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockNotifierInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockNotifierInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedNotifierInterface.GetCalls())
func (mock *NotifierInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockNotifierInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockNotifierInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *NotifierInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.Notifier, error) {
	if mock.GetNamespacedFunc == nil {
		panic("NotifierInterfaceMock.GetNamespacedFunc: method is nil but NotifierInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockNotifierInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockNotifierInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedNotifierInterface.GetNamespacedCalls())
func (mock *NotifierInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockNotifierInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockNotifierInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *NotifierInterfaceMock) List(opts v1.ListOptions) (*v3.NotifierList, error) {
	if mock.ListFunc == nil {
		panic("NotifierInterfaceMock.ListFunc: method is nil but NotifierInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockNotifierInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockNotifierInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedNotifierInterface.ListCalls())
func (mock *NotifierInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockNotifierInterfaceMockList.RLock()
	calls = mock.calls.List
	lockNotifierInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *NotifierInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("NotifierInterfaceMock.ObjectClientFunc: method is nil but NotifierInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockNotifierInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockNotifierInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedNotifierInterface.ObjectClientCalls())
func (mock *NotifierInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockNotifierInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockNotifierInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *NotifierInterfaceMock) Update(in1 *v3.Notifier) (*v3.Notifier, error) {
	if mock.UpdateFunc == nil {
		panic("NotifierInterfaceMock.UpdateFunc: method is nil but NotifierInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.Notifier
	}{
		In1: in1,
	}
	lockNotifierInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockNotifierInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedNotifierInterface.UpdateCalls())
func (mock *NotifierInterfaceMock) UpdateCalls() []struct {
	In1 *v3.Notifier
} {
	var calls []struct {
		In1 *v3.Notifier
	}
	lockNotifierInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockNotifierInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *NotifierInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("NotifierInterfaceMock.WatchFunc: method is nil but NotifierInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockNotifierInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockNotifierInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedNotifierInterface.WatchCalls())
func (mock *NotifierInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockNotifierInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockNotifierInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockNotifiersGetterMockNotifiers sync.RWMutex
)

// Ensure, that NotifiersGetterMock does implement NotifiersGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.NotifiersGetter = &NotifiersGetterMock{}

// NotifiersGetterMock is a mock implementation of NotifiersGetter.
//
//     func TestSomethingThatUsesNotifiersGetter(t *testing.T) {
//
//         // make and configure a mocked NotifiersGetter
//         mockedNotifiersGetter := &NotifiersGetterMock{
//             NotifiersFunc: func(namespace string) v3.NotifierInterface {
// 	               panic("mock out the Notifiers method")
//             },
//         }
//
//         // use mockedNotifiersGetter in code that requires NotifiersGetter
//         // and then make assertions.
//
//     }
type NotifiersGetterMock struct {
	// NotifiersFunc mocks the Notifiers method.
	NotifiersFunc func(namespace string) v3.NotifierInterface

	// calls tracks calls to the methods.
	calls struct {
		// Notifiers holds details about calls to the Notifiers method.
		Notifiers []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// Notifiers calls NotifiersFunc.
func (mock *NotifiersGetterMock) Notifiers(namespace string) v3.NotifierInterface {
	if mock.NotifiersFunc == nil {
		panic("NotifiersGetterMock.NotifiersFunc: method is nil but NotifiersGetter.Notifiers was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockNotifiersGetterMockNotifiers.Lock()
	mock.calls.Notifiers = append(mock.calls.Notifiers, callInfo)
	lockNotifiersGetterMockNotifiers.Unlock()
	return mock.NotifiersFunc(namespace)
}

// NotifiersCalls gets all the calls that were made to Notifiers.
// Check the length with:
//     len(mockedNotifiersGetter.NotifiersCalls())
func (mock *NotifiersGetterMock) NotifiersCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockNotifiersGetterMockNotifiers.RLock()
	calls = mock.calls.Notifiers
	lockNotifiersGetterMockNotifiers.RUnlock()
	return calls
}
