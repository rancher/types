// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockClusterMonitorGraphListerMockGet  sync.RWMutex
	lockClusterMonitorGraphListerMockList sync.RWMutex
)

// Ensure, that ClusterMonitorGraphListerMock does implement ClusterMonitorGraphLister.
// If this is not the case, regenerate this file with moq.
var _ v3.ClusterMonitorGraphLister = &ClusterMonitorGraphListerMock{}

// ClusterMonitorGraphListerMock is a mock implementation of ClusterMonitorGraphLister.
//
//     func TestSomethingThatUsesClusterMonitorGraphLister(t *testing.T) {
//
//         // make and configure a mocked ClusterMonitorGraphLister
//         mockedClusterMonitorGraphLister := &ClusterMonitorGraphListerMock{
//             GetFunc: func(namespace string, name string) (*v3.ClusterMonitorGraph, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.ClusterMonitorGraph, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedClusterMonitorGraphLister in code that requires ClusterMonitorGraphLister
//         // and then make assertions.
//
//     }
type ClusterMonitorGraphListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.ClusterMonitorGraph, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.ClusterMonitorGraph, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *ClusterMonitorGraphListerMock) Get(namespace string, name string) (*v3.ClusterMonitorGraph, error) {
	if mock.GetFunc == nil {
		panic("ClusterMonitorGraphListerMock.GetFunc: method is nil but ClusterMonitorGraphLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockClusterMonitorGraphListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterMonitorGraphListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterMonitorGraphLister.GetCalls())
func (mock *ClusterMonitorGraphListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockClusterMonitorGraphListerMockGet.RLock()
	calls = mock.calls.Get
	lockClusterMonitorGraphListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterMonitorGraphListerMock) List(namespace string, selector labels.Selector) ([]*v3.ClusterMonitorGraph, error) {
	if mock.ListFunc == nil {
		panic("ClusterMonitorGraphListerMock.ListFunc: method is nil but ClusterMonitorGraphLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockClusterMonitorGraphListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterMonitorGraphListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterMonitorGraphLister.ListCalls())
func (mock *ClusterMonitorGraphListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockClusterMonitorGraphListerMockList.RLock()
	calls = mock.calls.List
	lockClusterMonitorGraphListerMockList.RUnlock()
	return calls
}

var (
	lockClusterMonitorGraphControllerMockAddClusterScopedHandler sync.RWMutex
	lockClusterMonitorGraphControllerMockAddFeatureHandler       sync.RWMutex
	lockClusterMonitorGraphControllerMockAddHandler              sync.RWMutex
	lockClusterMonitorGraphControllerMockEnqueue                 sync.RWMutex
	lockClusterMonitorGraphControllerMockGeneric                 sync.RWMutex
	lockClusterMonitorGraphControllerMockInformer                sync.RWMutex
	lockClusterMonitorGraphControllerMockLister                  sync.RWMutex
	lockClusterMonitorGraphControllerMockStart                   sync.RWMutex
	lockClusterMonitorGraphControllerMockSync                    sync.RWMutex
)

// Ensure, that ClusterMonitorGraphControllerMock does implement ClusterMonitorGraphController.
// If this is not the case, regenerate this file with moq.
var _ v3.ClusterMonitorGraphController = &ClusterMonitorGraphControllerMock{}

// ClusterMonitorGraphControllerMock is a mock implementation of ClusterMonitorGraphController.
//
//     func TestSomethingThatUsesClusterMonitorGraphController(t *testing.T) {
//
//         // make and configure a mocked ClusterMonitorGraphController
//         mockedClusterMonitorGraphController := &ClusterMonitorGraphControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.ClusterMonitorGraphHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterMonitorGraphHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.ClusterMonitorGraphHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.ClusterMonitorGraphLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedClusterMonitorGraphController in code that requires ClusterMonitorGraphController
//         // and then make assertions.
//
//     }
type ClusterMonitorGraphControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.ClusterMonitorGraphHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterMonitorGraphHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.ClusterMonitorGraphHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.ClusterMonitorGraphLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.ClusterMonitorGraphHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ClusterMonitorGraphHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.ClusterMonitorGraphHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ClusterMonitorGraphControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.ClusterMonitorGraphHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ClusterMonitorGraphControllerMock.AddClusterScopedHandlerFunc: method is nil but ClusterMonitorGraphController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.ClusterMonitorGraphHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockClusterMonitorGraphControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockClusterMonitorGraphControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedClusterMonitorGraphController.AddClusterScopedHandlerCalls())
func (mock *ClusterMonitorGraphControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.ClusterMonitorGraphHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.ClusterMonitorGraphHandlerFunc
	}
	lockClusterMonitorGraphControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockClusterMonitorGraphControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *ClusterMonitorGraphControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterMonitorGraphHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("ClusterMonitorGraphControllerMock.AddFeatureHandlerFunc: method is nil but ClusterMonitorGraphController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ClusterMonitorGraphHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockClusterMonitorGraphControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockClusterMonitorGraphControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedClusterMonitorGraphController.AddFeatureHandlerCalls())
func (mock *ClusterMonitorGraphControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.ClusterMonitorGraphHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ClusterMonitorGraphHandlerFunc
	}
	lockClusterMonitorGraphControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockClusterMonitorGraphControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ClusterMonitorGraphControllerMock) AddHandler(ctx context.Context, name string, handler v3.ClusterMonitorGraphHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ClusterMonitorGraphControllerMock.AddHandlerFunc: method is nil but ClusterMonitorGraphController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.ClusterMonitorGraphHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockClusterMonitorGraphControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockClusterMonitorGraphControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedClusterMonitorGraphController.AddHandlerCalls())
func (mock *ClusterMonitorGraphControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.ClusterMonitorGraphHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.ClusterMonitorGraphHandlerFunc
	}
	lockClusterMonitorGraphControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockClusterMonitorGraphControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ClusterMonitorGraphControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("ClusterMonitorGraphControllerMock.EnqueueFunc: method is nil but ClusterMonitorGraphController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockClusterMonitorGraphControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockClusterMonitorGraphControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedClusterMonitorGraphController.EnqueueCalls())
func (mock *ClusterMonitorGraphControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockClusterMonitorGraphControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockClusterMonitorGraphControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *ClusterMonitorGraphControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("ClusterMonitorGraphControllerMock.GenericFunc: method is nil but ClusterMonitorGraphController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockClusterMonitorGraphControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockClusterMonitorGraphControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedClusterMonitorGraphController.GenericCalls())
func (mock *ClusterMonitorGraphControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterMonitorGraphControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockClusterMonitorGraphControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ClusterMonitorGraphControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ClusterMonitorGraphControllerMock.InformerFunc: method is nil but ClusterMonitorGraphController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockClusterMonitorGraphControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockClusterMonitorGraphControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedClusterMonitorGraphController.InformerCalls())
func (mock *ClusterMonitorGraphControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterMonitorGraphControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockClusterMonitorGraphControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *ClusterMonitorGraphControllerMock) Lister() v3.ClusterMonitorGraphLister {
	if mock.ListerFunc == nil {
		panic("ClusterMonitorGraphControllerMock.ListerFunc: method is nil but ClusterMonitorGraphController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockClusterMonitorGraphControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockClusterMonitorGraphControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedClusterMonitorGraphController.ListerCalls())
func (mock *ClusterMonitorGraphControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterMonitorGraphControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockClusterMonitorGraphControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *ClusterMonitorGraphControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("ClusterMonitorGraphControllerMock.StartFunc: method is nil but ClusterMonitorGraphController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockClusterMonitorGraphControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockClusterMonitorGraphControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedClusterMonitorGraphController.StartCalls())
func (mock *ClusterMonitorGraphControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockClusterMonitorGraphControllerMockStart.RLock()
	calls = mock.calls.Start
	lockClusterMonitorGraphControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *ClusterMonitorGraphControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("ClusterMonitorGraphControllerMock.SyncFunc: method is nil but ClusterMonitorGraphController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockClusterMonitorGraphControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockClusterMonitorGraphControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedClusterMonitorGraphController.SyncCalls())
func (mock *ClusterMonitorGraphControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockClusterMonitorGraphControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockClusterMonitorGraphControllerMockSync.RUnlock()
	return calls
}

var (
	lockClusterMonitorGraphInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockClusterMonitorGraphInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockClusterMonitorGraphInterfaceMockAddFeatureHandler         sync.RWMutex
	lockClusterMonitorGraphInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockClusterMonitorGraphInterfaceMockAddHandler                sync.RWMutex
	lockClusterMonitorGraphInterfaceMockAddLifecycle              sync.RWMutex
	lockClusterMonitorGraphInterfaceMockController                sync.RWMutex
	lockClusterMonitorGraphInterfaceMockCreate                    sync.RWMutex
	lockClusterMonitorGraphInterfaceMockDelete                    sync.RWMutex
	lockClusterMonitorGraphInterfaceMockDeleteCollection          sync.RWMutex
	lockClusterMonitorGraphInterfaceMockDeleteNamespaced          sync.RWMutex
	lockClusterMonitorGraphInterfaceMockGet                       sync.RWMutex
	lockClusterMonitorGraphInterfaceMockGetNamespaced             sync.RWMutex
	lockClusterMonitorGraphInterfaceMockList                      sync.RWMutex
	lockClusterMonitorGraphInterfaceMockObjectClient              sync.RWMutex
	lockClusterMonitorGraphInterfaceMockUpdate                    sync.RWMutex
	lockClusterMonitorGraphInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that ClusterMonitorGraphInterfaceMock does implement ClusterMonitorGraphInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.ClusterMonitorGraphInterface = &ClusterMonitorGraphInterfaceMock{}

// ClusterMonitorGraphInterfaceMock is a mock implementation of ClusterMonitorGraphInterface.
//
//     func TestSomethingThatUsesClusterMonitorGraphInterface(t *testing.T) {
//
//         // make and configure a mocked ClusterMonitorGraphInterface
//         mockedClusterMonitorGraphInterface := &ClusterMonitorGraphInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.ClusterMonitorGraphHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.ClusterMonitorGraphLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterMonitorGraphHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.ClusterMonitorGraphLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.ClusterMonitorGraphHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.ClusterMonitorGraphLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.ClusterMonitorGraphController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.ClusterMonitorGraph) (*v3.ClusterMonitorGraph, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.ClusterMonitorGraph, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.ClusterMonitorGraph, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.ClusterMonitorGraphList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.ClusterMonitorGraph) (*v3.ClusterMonitorGraph, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedClusterMonitorGraphInterface in code that requires ClusterMonitorGraphInterface
//         // and then make assertions.
//
//     }
type ClusterMonitorGraphInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.ClusterMonitorGraphHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.ClusterMonitorGraphLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterMonitorGraphHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.ClusterMonitorGraphLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.ClusterMonitorGraphHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.ClusterMonitorGraphLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.ClusterMonitorGraphController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.ClusterMonitorGraph) (*v3.ClusterMonitorGraph, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.ClusterMonitorGraph, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.ClusterMonitorGraph, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.ClusterMonitorGraphList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.ClusterMonitorGraph) (*v3.ClusterMonitorGraph, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.ClusterMonitorGraphHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ClusterMonitorGraphLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ClusterMonitorGraphHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ClusterMonitorGraphLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.ClusterMonitorGraphHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.ClusterMonitorGraphLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.ClusterMonitorGraph
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.ClusterMonitorGraph
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ClusterMonitorGraphInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.ClusterMonitorGraphHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.AddClusterScopedHandlerFunc: method is nil but ClusterMonitorGraphInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.ClusterMonitorGraphHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockClusterMonitorGraphInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockClusterMonitorGraphInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.AddClusterScopedHandlerCalls())
func (mock *ClusterMonitorGraphInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.ClusterMonitorGraphHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.ClusterMonitorGraphHandlerFunc
	}
	lockClusterMonitorGraphInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockClusterMonitorGraphInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *ClusterMonitorGraphInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.ClusterMonitorGraphLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but ClusterMonitorGraphInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.ClusterMonitorGraphLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockClusterMonitorGraphInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockClusterMonitorGraphInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.AddClusterScopedLifecycleCalls())
func (mock *ClusterMonitorGraphInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.ClusterMonitorGraphLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.ClusterMonitorGraphLifecycle
	}
	lockClusterMonitorGraphInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockClusterMonitorGraphInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *ClusterMonitorGraphInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.ClusterMonitorGraphHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.AddFeatureHandlerFunc: method is nil but ClusterMonitorGraphInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ClusterMonitorGraphHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockClusterMonitorGraphInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockClusterMonitorGraphInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.AddFeatureHandlerCalls())
func (mock *ClusterMonitorGraphInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.ClusterMonitorGraphHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.ClusterMonitorGraphHandlerFunc
	}
	lockClusterMonitorGraphInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockClusterMonitorGraphInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *ClusterMonitorGraphInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.ClusterMonitorGraphLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.AddFeatureLifecycleFunc: method is nil but ClusterMonitorGraphInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.ClusterMonitorGraphLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockClusterMonitorGraphInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockClusterMonitorGraphInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.AddFeatureLifecycleCalls())
func (mock *ClusterMonitorGraphInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v3.ClusterMonitorGraphLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.ClusterMonitorGraphLifecycle
	}
	lockClusterMonitorGraphInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockClusterMonitorGraphInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ClusterMonitorGraphInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.ClusterMonitorGraphHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.AddHandlerFunc: method is nil but ClusterMonitorGraphInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.ClusterMonitorGraphHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockClusterMonitorGraphInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockClusterMonitorGraphInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.AddHandlerCalls())
func (mock *ClusterMonitorGraphInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.ClusterMonitorGraphHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.ClusterMonitorGraphHandlerFunc
	}
	lockClusterMonitorGraphInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockClusterMonitorGraphInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *ClusterMonitorGraphInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.ClusterMonitorGraphLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.AddLifecycleFunc: method is nil but ClusterMonitorGraphInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.ClusterMonitorGraphLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockClusterMonitorGraphInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockClusterMonitorGraphInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.AddLifecycleCalls())
func (mock *ClusterMonitorGraphInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.ClusterMonitorGraphLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.ClusterMonitorGraphLifecycle
	}
	lockClusterMonitorGraphInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockClusterMonitorGraphInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *ClusterMonitorGraphInterfaceMock) Controller() v3.ClusterMonitorGraphController {
	if mock.ControllerFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.ControllerFunc: method is nil but ClusterMonitorGraphInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockClusterMonitorGraphInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockClusterMonitorGraphInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.ControllerCalls())
func (mock *ClusterMonitorGraphInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterMonitorGraphInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockClusterMonitorGraphInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ClusterMonitorGraphInterfaceMock) Create(in1 *v3.ClusterMonitorGraph) (*v3.ClusterMonitorGraph, error) {
	if mock.CreateFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.CreateFunc: method is nil but ClusterMonitorGraphInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.ClusterMonitorGraph
	}{
		In1: in1,
	}
	lockClusterMonitorGraphInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockClusterMonitorGraphInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.CreateCalls())
func (mock *ClusterMonitorGraphInterfaceMock) CreateCalls() []struct {
	In1 *v3.ClusterMonitorGraph
} {
	var calls []struct {
		In1 *v3.ClusterMonitorGraph
	}
	lockClusterMonitorGraphInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockClusterMonitorGraphInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ClusterMonitorGraphInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.DeleteFunc: method is nil but ClusterMonitorGraphInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterMonitorGraphInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockClusterMonitorGraphInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.DeleteCalls())
func (mock *ClusterMonitorGraphInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockClusterMonitorGraphInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockClusterMonitorGraphInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *ClusterMonitorGraphInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.DeleteCollectionFunc: method is nil but ClusterMonitorGraphInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockClusterMonitorGraphInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockClusterMonitorGraphInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.DeleteCollectionCalls())
func (mock *ClusterMonitorGraphInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockClusterMonitorGraphInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockClusterMonitorGraphInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *ClusterMonitorGraphInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.DeleteNamespacedFunc: method is nil but ClusterMonitorGraphInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockClusterMonitorGraphInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockClusterMonitorGraphInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.DeleteNamespacedCalls())
func (mock *ClusterMonitorGraphInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockClusterMonitorGraphInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockClusterMonitorGraphInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ClusterMonitorGraphInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.ClusterMonitorGraph, error) {
	if mock.GetFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.GetFunc: method is nil but ClusterMonitorGraphInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockClusterMonitorGraphInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterMonitorGraphInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.GetCalls())
func (mock *ClusterMonitorGraphInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockClusterMonitorGraphInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockClusterMonitorGraphInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *ClusterMonitorGraphInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.ClusterMonitorGraph, error) {
	if mock.GetNamespacedFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.GetNamespacedFunc: method is nil but ClusterMonitorGraphInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockClusterMonitorGraphInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockClusterMonitorGraphInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.GetNamespacedCalls())
func (mock *ClusterMonitorGraphInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockClusterMonitorGraphInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockClusterMonitorGraphInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterMonitorGraphInterfaceMock) List(opts v1.ListOptions) (*v3.ClusterMonitorGraphList, error) {
	if mock.ListFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.ListFunc: method is nil but ClusterMonitorGraphInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockClusterMonitorGraphInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterMonitorGraphInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.ListCalls())
func (mock *ClusterMonitorGraphInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockClusterMonitorGraphInterfaceMockList.RLock()
	calls = mock.calls.List
	lockClusterMonitorGraphInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *ClusterMonitorGraphInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.ObjectClientFunc: method is nil but ClusterMonitorGraphInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockClusterMonitorGraphInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockClusterMonitorGraphInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.ObjectClientCalls())
func (mock *ClusterMonitorGraphInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterMonitorGraphInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockClusterMonitorGraphInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ClusterMonitorGraphInterfaceMock) Update(in1 *v3.ClusterMonitorGraph) (*v3.ClusterMonitorGraph, error) {
	if mock.UpdateFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.UpdateFunc: method is nil but ClusterMonitorGraphInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.ClusterMonitorGraph
	}{
		In1: in1,
	}
	lockClusterMonitorGraphInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockClusterMonitorGraphInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.UpdateCalls())
func (mock *ClusterMonitorGraphInterfaceMock) UpdateCalls() []struct {
	In1 *v3.ClusterMonitorGraph
} {
	var calls []struct {
		In1 *v3.ClusterMonitorGraph
	}
	lockClusterMonitorGraphInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockClusterMonitorGraphInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ClusterMonitorGraphInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ClusterMonitorGraphInterfaceMock.WatchFunc: method is nil but ClusterMonitorGraphInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockClusterMonitorGraphInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockClusterMonitorGraphInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedClusterMonitorGraphInterface.WatchCalls())
func (mock *ClusterMonitorGraphInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockClusterMonitorGraphInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockClusterMonitorGraphInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockClusterMonitorGraphsGetterMockClusterMonitorGraphs sync.RWMutex
)

// Ensure, that ClusterMonitorGraphsGetterMock does implement ClusterMonitorGraphsGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.ClusterMonitorGraphsGetter = &ClusterMonitorGraphsGetterMock{}

// ClusterMonitorGraphsGetterMock is a mock implementation of ClusterMonitorGraphsGetter.
//
//     func TestSomethingThatUsesClusterMonitorGraphsGetter(t *testing.T) {
//
//         // make and configure a mocked ClusterMonitorGraphsGetter
//         mockedClusterMonitorGraphsGetter := &ClusterMonitorGraphsGetterMock{
//             ClusterMonitorGraphsFunc: func(namespace string) v3.ClusterMonitorGraphInterface {
// 	               panic("mock out the ClusterMonitorGraphs method")
//             },
//         }
//
//         // use mockedClusterMonitorGraphsGetter in code that requires ClusterMonitorGraphsGetter
//         // and then make assertions.
//
//     }
type ClusterMonitorGraphsGetterMock struct {
	// ClusterMonitorGraphsFunc mocks the ClusterMonitorGraphs method.
	ClusterMonitorGraphsFunc func(namespace string) v3.ClusterMonitorGraphInterface

	// calls tracks calls to the methods.
	calls struct {
		// ClusterMonitorGraphs holds details about calls to the ClusterMonitorGraphs method.
		ClusterMonitorGraphs []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// ClusterMonitorGraphs calls ClusterMonitorGraphsFunc.
func (mock *ClusterMonitorGraphsGetterMock) ClusterMonitorGraphs(namespace string) v3.ClusterMonitorGraphInterface {
	if mock.ClusterMonitorGraphsFunc == nil {
		panic("ClusterMonitorGraphsGetterMock.ClusterMonitorGraphsFunc: method is nil but ClusterMonitorGraphsGetter.ClusterMonitorGraphs was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockClusterMonitorGraphsGetterMockClusterMonitorGraphs.Lock()
	mock.calls.ClusterMonitorGraphs = append(mock.calls.ClusterMonitorGraphs, callInfo)
	lockClusterMonitorGraphsGetterMockClusterMonitorGraphs.Unlock()
	return mock.ClusterMonitorGraphsFunc(namespace)
}

// ClusterMonitorGraphsCalls gets all the calls that were made to ClusterMonitorGraphs.
// Check the length with:
//     len(mockedClusterMonitorGraphsGetter.ClusterMonitorGraphsCalls())
func (mock *ClusterMonitorGraphsGetterMock) ClusterMonitorGraphsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockClusterMonitorGraphsGetterMockClusterMonitorGraphs.RLock()
	calls = mock.calls.ClusterMonitorGraphs
	lockClusterMonitorGraphsGetterMockClusterMonitorGraphs.RUnlock()
	return calls
}
