// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3public "github.com/rancher/types/apis/management.cattle.io/v3public"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockAuthProviderListerMockGet  sync.RWMutex
	lockAuthProviderListerMockList sync.RWMutex
)

// Ensure, that AuthProviderListerMock does implement AuthProviderLister.
// If this is not the case, regenerate this file with moq.
var _ v3public.AuthProviderLister = &AuthProviderListerMock{}

// AuthProviderListerMock is a mock implementation of AuthProviderLister.
//
//     func TestSomethingThatUsesAuthProviderLister(t *testing.T) {
//
//         // make and configure a mocked AuthProviderLister
//         mockedAuthProviderLister := &AuthProviderListerMock{
//             GetFunc: func(namespace string, name string) (*v3public.AuthProvider, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3public.AuthProvider, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedAuthProviderLister in code that requires AuthProviderLister
//         // and then make assertions.
//
//     }
type AuthProviderListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3public.AuthProvider, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3public.AuthProvider, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *AuthProviderListerMock) Get(namespace string, name string) (*v3public.AuthProvider, error) {
	if mock.GetFunc == nil {
		panic("AuthProviderListerMock.GetFunc: method is nil but AuthProviderLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockAuthProviderListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockAuthProviderListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedAuthProviderLister.GetCalls())
func (mock *AuthProviderListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockAuthProviderListerMockGet.RLock()
	calls = mock.calls.Get
	lockAuthProviderListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *AuthProviderListerMock) List(namespace string, selector labels.Selector) ([]*v3public.AuthProvider, error) {
	if mock.ListFunc == nil {
		panic("AuthProviderListerMock.ListFunc: method is nil but AuthProviderLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockAuthProviderListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockAuthProviderListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedAuthProviderLister.ListCalls())
func (mock *AuthProviderListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockAuthProviderListerMockList.RLock()
	calls = mock.calls.List
	lockAuthProviderListerMockList.RUnlock()
	return calls
}

var (
	lockAuthProviderControllerMockAddClusterScopedHandler sync.RWMutex
	lockAuthProviderControllerMockAddFeatureHandler       sync.RWMutex
	lockAuthProviderControllerMockAddHandler              sync.RWMutex
	lockAuthProviderControllerMockEnqueue                 sync.RWMutex
	lockAuthProviderControllerMockGeneric                 sync.RWMutex
	lockAuthProviderControllerMockInformer                sync.RWMutex
	lockAuthProviderControllerMockLister                  sync.RWMutex
	lockAuthProviderControllerMockStart                   sync.RWMutex
	lockAuthProviderControllerMockSync                    sync.RWMutex
)

// Ensure, that AuthProviderControllerMock does implement AuthProviderController.
// If this is not the case, regenerate this file with moq.
var _ v3public.AuthProviderController = &AuthProviderControllerMock{}

// AuthProviderControllerMock is a mock implementation of AuthProviderController.
//
//     func TestSomethingThatUsesAuthProviderController(t *testing.T) {
//
//         // make and configure a mocked AuthProviderController
//         mockedAuthProviderController := &AuthProviderControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3public.AuthProviderHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3public.AuthProviderHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3public.AuthProviderHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3public.AuthProviderLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedAuthProviderController in code that requires AuthProviderController
//         // and then make assertions.
//
//     }
type AuthProviderControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3public.AuthProviderHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3public.AuthProviderHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3public.AuthProviderHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3public.AuthProviderLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3public.AuthProviderHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3public.AuthProviderHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3public.AuthProviderHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *AuthProviderControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3public.AuthProviderHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("AuthProviderControllerMock.AddClusterScopedHandlerFunc: method is nil but AuthProviderController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3public.AuthProviderHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockAuthProviderControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockAuthProviderControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedAuthProviderController.AddClusterScopedHandlerCalls())
func (mock *AuthProviderControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3public.AuthProviderHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3public.AuthProviderHandlerFunc
	}
	lockAuthProviderControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockAuthProviderControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *AuthProviderControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3public.AuthProviderHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("AuthProviderControllerMock.AddFeatureHandlerFunc: method is nil but AuthProviderController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3public.AuthProviderHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockAuthProviderControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockAuthProviderControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedAuthProviderController.AddFeatureHandlerCalls())
func (mock *AuthProviderControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3public.AuthProviderHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3public.AuthProviderHandlerFunc
	}
	lockAuthProviderControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockAuthProviderControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *AuthProviderControllerMock) AddHandler(ctx context.Context, name string, handler v3public.AuthProviderHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("AuthProviderControllerMock.AddHandlerFunc: method is nil but AuthProviderController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3public.AuthProviderHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockAuthProviderControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockAuthProviderControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedAuthProviderController.AddHandlerCalls())
func (mock *AuthProviderControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3public.AuthProviderHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3public.AuthProviderHandlerFunc
	}
	lockAuthProviderControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockAuthProviderControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *AuthProviderControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("AuthProviderControllerMock.EnqueueFunc: method is nil but AuthProviderController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockAuthProviderControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockAuthProviderControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedAuthProviderController.EnqueueCalls())
func (mock *AuthProviderControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockAuthProviderControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockAuthProviderControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *AuthProviderControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("AuthProviderControllerMock.GenericFunc: method is nil but AuthProviderController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockAuthProviderControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockAuthProviderControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedAuthProviderController.GenericCalls())
func (mock *AuthProviderControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthProviderControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockAuthProviderControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *AuthProviderControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("AuthProviderControllerMock.InformerFunc: method is nil but AuthProviderController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockAuthProviderControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockAuthProviderControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedAuthProviderController.InformerCalls())
func (mock *AuthProviderControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthProviderControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockAuthProviderControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *AuthProviderControllerMock) Lister() v3public.AuthProviderLister {
	if mock.ListerFunc == nil {
		panic("AuthProviderControllerMock.ListerFunc: method is nil but AuthProviderController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockAuthProviderControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockAuthProviderControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedAuthProviderController.ListerCalls())
func (mock *AuthProviderControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthProviderControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockAuthProviderControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *AuthProviderControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("AuthProviderControllerMock.StartFunc: method is nil but AuthProviderController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockAuthProviderControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockAuthProviderControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedAuthProviderController.StartCalls())
func (mock *AuthProviderControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockAuthProviderControllerMockStart.RLock()
	calls = mock.calls.Start
	lockAuthProviderControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *AuthProviderControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("AuthProviderControllerMock.SyncFunc: method is nil but AuthProviderController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockAuthProviderControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockAuthProviderControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedAuthProviderController.SyncCalls())
func (mock *AuthProviderControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockAuthProviderControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockAuthProviderControllerMockSync.RUnlock()
	return calls
}

var (
	lockAuthProviderInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockAuthProviderInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockAuthProviderInterfaceMockAddFeatureHandler         sync.RWMutex
	lockAuthProviderInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockAuthProviderInterfaceMockAddHandler                sync.RWMutex
	lockAuthProviderInterfaceMockAddLifecycle              sync.RWMutex
	lockAuthProviderInterfaceMockController                sync.RWMutex
	lockAuthProviderInterfaceMockCreate                    sync.RWMutex
	lockAuthProviderInterfaceMockDelete                    sync.RWMutex
	lockAuthProviderInterfaceMockDeleteCollection          sync.RWMutex
	lockAuthProviderInterfaceMockDeleteNamespaced          sync.RWMutex
	lockAuthProviderInterfaceMockGet                       sync.RWMutex
	lockAuthProviderInterfaceMockGetNamespaced             sync.RWMutex
	lockAuthProviderInterfaceMockList                      sync.RWMutex
	lockAuthProviderInterfaceMockObjectClient              sync.RWMutex
	lockAuthProviderInterfaceMockUpdate                    sync.RWMutex
	lockAuthProviderInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that AuthProviderInterfaceMock does implement AuthProviderInterface.
// If this is not the case, regenerate this file with moq.
var _ v3public.AuthProviderInterface = &AuthProviderInterfaceMock{}

// AuthProviderInterfaceMock is a mock implementation of AuthProviderInterface.
//
//     func TestSomethingThatUsesAuthProviderInterface(t *testing.T) {
//
//         // make and configure a mocked AuthProviderInterface
//         mockedAuthProviderInterface := &AuthProviderInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3public.AuthProviderHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3public.AuthProviderLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3public.AuthProviderHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3public.AuthProviderLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3public.AuthProviderHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3public.AuthProviderLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3public.AuthProviderController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3public.AuthProvider) (*v3public.AuthProvider, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3public.AuthProvider, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3public.AuthProvider, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3public.AuthProviderList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3public.AuthProvider) (*v3public.AuthProvider, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedAuthProviderInterface in code that requires AuthProviderInterface
//         // and then make assertions.
//
//     }
type AuthProviderInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3public.AuthProviderHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3public.AuthProviderLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3public.AuthProviderHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3public.AuthProviderLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3public.AuthProviderHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3public.AuthProviderLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3public.AuthProviderController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3public.AuthProvider) (*v3public.AuthProvider, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3public.AuthProvider, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3public.AuthProvider, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3public.AuthProviderList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3public.AuthProvider) (*v3public.AuthProvider, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3public.AuthProviderHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3public.AuthProviderLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3public.AuthProviderHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3public.AuthProviderLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3public.AuthProviderHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3public.AuthProviderLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3public.AuthProvider
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3public.AuthProvider
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *AuthProviderInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3public.AuthProviderHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("AuthProviderInterfaceMock.AddClusterScopedHandlerFunc: method is nil but AuthProviderInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3public.AuthProviderHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockAuthProviderInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockAuthProviderInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedAuthProviderInterface.AddClusterScopedHandlerCalls())
func (mock *AuthProviderInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3public.AuthProviderHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3public.AuthProviderHandlerFunc
	}
	lockAuthProviderInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockAuthProviderInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *AuthProviderInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3public.AuthProviderLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("AuthProviderInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but AuthProviderInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3public.AuthProviderLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockAuthProviderInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockAuthProviderInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedAuthProviderInterface.AddClusterScopedLifecycleCalls())
func (mock *AuthProviderInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3public.AuthProviderLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3public.AuthProviderLifecycle
	}
	lockAuthProviderInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockAuthProviderInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *AuthProviderInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3public.AuthProviderHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("AuthProviderInterfaceMock.AddFeatureHandlerFunc: method is nil but AuthProviderInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3public.AuthProviderHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockAuthProviderInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockAuthProviderInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedAuthProviderInterface.AddFeatureHandlerCalls())
func (mock *AuthProviderInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3public.AuthProviderHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3public.AuthProviderHandlerFunc
	}
	lockAuthProviderInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockAuthProviderInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *AuthProviderInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3public.AuthProviderLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("AuthProviderInterfaceMock.AddFeatureLifecycleFunc: method is nil but AuthProviderInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3public.AuthProviderLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockAuthProviderInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockAuthProviderInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedAuthProviderInterface.AddFeatureLifecycleCalls())
func (mock *AuthProviderInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v3public.AuthProviderLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3public.AuthProviderLifecycle
	}
	lockAuthProviderInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockAuthProviderInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *AuthProviderInterfaceMock) AddHandler(ctx context.Context, name string, sync v3public.AuthProviderHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("AuthProviderInterfaceMock.AddHandlerFunc: method is nil but AuthProviderInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3public.AuthProviderHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockAuthProviderInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockAuthProviderInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedAuthProviderInterface.AddHandlerCalls())
func (mock *AuthProviderInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3public.AuthProviderHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3public.AuthProviderHandlerFunc
	}
	lockAuthProviderInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockAuthProviderInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *AuthProviderInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3public.AuthProviderLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("AuthProviderInterfaceMock.AddLifecycleFunc: method is nil but AuthProviderInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3public.AuthProviderLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockAuthProviderInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockAuthProviderInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedAuthProviderInterface.AddLifecycleCalls())
func (mock *AuthProviderInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3public.AuthProviderLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3public.AuthProviderLifecycle
	}
	lockAuthProviderInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockAuthProviderInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *AuthProviderInterfaceMock) Controller() v3public.AuthProviderController {
	if mock.ControllerFunc == nil {
		panic("AuthProviderInterfaceMock.ControllerFunc: method is nil but AuthProviderInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockAuthProviderInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockAuthProviderInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedAuthProviderInterface.ControllerCalls())
func (mock *AuthProviderInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthProviderInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockAuthProviderInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *AuthProviderInterfaceMock) Create(in1 *v3public.AuthProvider) (*v3public.AuthProvider, error) {
	if mock.CreateFunc == nil {
		panic("AuthProviderInterfaceMock.CreateFunc: method is nil but AuthProviderInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3public.AuthProvider
	}{
		In1: in1,
	}
	lockAuthProviderInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockAuthProviderInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedAuthProviderInterface.CreateCalls())
func (mock *AuthProviderInterfaceMock) CreateCalls() []struct {
	In1 *v3public.AuthProvider
} {
	var calls []struct {
		In1 *v3public.AuthProvider
	}
	lockAuthProviderInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockAuthProviderInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *AuthProviderInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("AuthProviderInterfaceMock.DeleteFunc: method is nil but AuthProviderInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockAuthProviderInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockAuthProviderInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedAuthProviderInterface.DeleteCalls())
func (mock *AuthProviderInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockAuthProviderInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockAuthProviderInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *AuthProviderInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("AuthProviderInterfaceMock.DeleteCollectionFunc: method is nil but AuthProviderInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockAuthProviderInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockAuthProviderInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedAuthProviderInterface.DeleteCollectionCalls())
func (mock *AuthProviderInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockAuthProviderInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockAuthProviderInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *AuthProviderInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("AuthProviderInterfaceMock.DeleteNamespacedFunc: method is nil but AuthProviderInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockAuthProviderInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockAuthProviderInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedAuthProviderInterface.DeleteNamespacedCalls())
func (mock *AuthProviderInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockAuthProviderInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockAuthProviderInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *AuthProviderInterfaceMock) Get(name string, opts v1.GetOptions) (*v3public.AuthProvider, error) {
	if mock.GetFunc == nil {
		panic("AuthProviderInterfaceMock.GetFunc: method is nil but AuthProviderInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockAuthProviderInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockAuthProviderInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedAuthProviderInterface.GetCalls())
func (mock *AuthProviderInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockAuthProviderInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockAuthProviderInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *AuthProviderInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3public.AuthProvider, error) {
	if mock.GetNamespacedFunc == nil {
		panic("AuthProviderInterfaceMock.GetNamespacedFunc: method is nil but AuthProviderInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockAuthProviderInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockAuthProviderInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedAuthProviderInterface.GetNamespacedCalls())
func (mock *AuthProviderInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockAuthProviderInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockAuthProviderInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *AuthProviderInterfaceMock) List(opts v1.ListOptions) (*v3public.AuthProviderList, error) {
	if mock.ListFunc == nil {
		panic("AuthProviderInterfaceMock.ListFunc: method is nil but AuthProviderInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockAuthProviderInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockAuthProviderInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedAuthProviderInterface.ListCalls())
func (mock *AuthProviderInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockAuthProviderInterfaceMockList.RLock()
	calls = mock.calls.List
	lockAuthProviderInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *AuthProviderInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("AuthProviderInterfaceMock.ObjectClientFunc: method is nil but AuthProviderInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockAuthProviderInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockAuthProviderInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedAuthProviderInterface.ObjectClientCalls())
func (mock *AuthProviderInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthProviderInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockAuthProviderInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *AuthProviderInterfaceMock) Update(in1 *v3public.AuthProvider) (*v3public.AuthProvider, error) {
	if mock.UpdateFunc == nil {
		panic("AuthProviderInterfaceMock.UpdateFunc: method is nil but AuthProviderInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3public.AuthProvider
	}{
		In1: in1,
	}
	lockAuthProviderInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockAuthProviderInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedAuthProviderInterface.UpdateCalls())
func (mock *AuthProviderInterfaceMock) UpdateCalls() []struct {
	In1 *v3public.AuthProvider
} {
	var calls []struct {
		In1 *v3public.AuthProvider
	}
	lockAuthProviderInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockAuthProviderInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *AuthProviderInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("AuthProviderInterfaceMock.WatchFunc: method is nil but AuthProviderInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockAuthProviderInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockAuthProviderInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedAuthProviderInterface.WatchCalls())
func (mock *AuthProviderInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockAuthProviderInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockAuthProviderInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockAuthProvidersGetterMockAuthProviders sync.RWMutex
)

// Ensure, that AuthProvidersGetterMock does implement AuthProvidersGetter.
// If this is not the case, regenerate this file with moq.
var _ v3public.AuthProvidersGetter = &AuthProvidersGetterMock{}

// AuthProvidersGetterMock is a mock implementation of AuthProvidersGetter.
//
//     func TestSomethingThatUsesAuthProvidersGetter(t *testing.T) {
//
//         // make and configure a mocked AuthProvidersGetter
//         mockedAuthProvidersGetter := &AuthProvidersGetterMock{
//             AuthProvidersFunc: func(namespace string) v3public.AuthProviderInterface {
// 	               panic("mock out the AuthProviders method")
//             },
//         }
//
//         // use mockedAuthProvidersGetter in code that requires AuthProvidersGetter
//         // and then make assertions.
//
//     }
type AuthProvidersGetterMock struct {
	// AuthProvidersFunc mocks the AuthProviders method.
	AuthProvidersFunc func(namespace string) v3public.AuthProviderInterface

	// calls tracks calls to the methods.
	calls struct {
		// AuthProviders holds details about calls to the AuthProviders method.
		AuthProviders []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// AuthProviders calls AuthProvidersFunc.
func (mock *AuthProvidersGetterMock) AuthProviders(namespace string) v3public.AuthProviderInterface {
	if mock.AuthProvidersFunc == nil {
		panic("AuthProvidersGetterMock.AuthProvidersFunc: method is nil but AuthProvidersGetter.AuthProviders was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockAuthProvidersGetterMockAuthProviders.Lock()
	mock.calls.AuthProviders = append(mock.calls.AuthProviders, callInfo)
	lockAuthProvidersGetterMockAuthProviders.Unlock()
	return mock.AuthProvidersFunc(namespace)
}

// AuthProvidersCalls gets all the calls that were made to AuthProviders.
// Check the length with:
//     len(mockedAuthProvidersGetter.AuthProvidersCalls())
func (mock *AuthProvidersGetterMock) AuthProvidersCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockAuthProvidersGetterMockAuthProviders.RLock()
	calls = mock.calls.AuthProviders
	lockAuthProvidersGetterMockAuthProviders.RUnlock()
	return calls
}
