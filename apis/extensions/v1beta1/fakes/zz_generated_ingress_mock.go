// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1beta1a "github.com/rancher/types/apis/extensions/v1beta1"
	v1beta1 "k8s.io/api/extensions/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockIngressListerMockGet  sync.RWMutex
	lockIngressListerMockList sync.RWMutex
)

// Ensure, that IngressListerMock does implement IngressLister.
// If this is not the case, regenerate this file with moq.
var _ v1beta1a.IngressLister = &IngressListerMock{}

// IngressListerMock is a mock implementation of IngressLister.
//
//     func TestSomethingThatUsesIngressLister(t *testing.T) {
//
//         // make and configure a mocked IngressLister
//         mockedIngressLister := &IngressListerMock{
//             GetFunc: func(namespace string, name string) (*v1beta1.Ingress, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1beta1.Ingress, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedIngressLister in code that requires IngressLister
//         // and then make assertions.
//
//     }
type IngressListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1beta1.Ingress, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1beta1.Ingress, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *IngressListerMock) Get(namespace string, name string) (*v1beta1.Ingress, error) {
	if mock.GetFunc == nil {
		panic("IngressListerMock.GetFunc: method is nil but IngressLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockIngressListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockIngressListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedIngressLister.GetCalls())
func (mock *IngressListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockIngressListerMockGet.RLock()
	calls = mock.calls.Get
	lockIngressListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *IngressListerMock) List(namespace string, selector labels.Selector) ([]*v1beta1.Ingress, error) {
	if mock.ListFunc == nil {
		panic("IngressListerMock.ListFunc: method is nil but IngressLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockIngressListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockIngressListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedIngressLister.ListCalls())
func (mock *IngressListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockIngressListerMockList.RLock()
	calls = mock.calls.List
	lockIngressListerMockList.RUnlock()
	return calls
}

var (
	lockIngressControllerMockAddClusterScopedHandler sync.RWMutex
	lockIngressControllerMockAddFeatureHandler       sync.RWMutex
	lockIngressControllerMockAddHandler              sync.RWMutex
	lockIngressControllerMockEnqueue                 sync.RWMutex
	lockIngressControllerMockGeneric                 sync.RWMutex
	lockIngressControllerMockInformer                sync.RWMutex
	lockIngressControllerMockLister                  sync.RWMutex
	lockIngressControllerMockStart                   sync.RWMutex
	lockIngressControllerMockSync                    sync.RWMutex
)

// Ensure, that IngressControllerMock does implement IngressController.
// If this is not the case, regenerate this file with moq.
var _ v1beta1a.IngressController = &IngressControllerMock{}

// IngressControllerMock is a mock implementation of IngressController.
//
//     func TestSomethingThatUsesIngressController(t *testing.T) {
//
//         // make and configure a mocked IngressController
//         mockedIngressController := &IngressControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1beta1a.IngressHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta1a.IngressHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1beta1a.IngressHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1beta1a.IngressLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedIngressController in code that requires IngressController
//         // and then make assertions.
//
//     }
type IngressControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1beta1a.IngressHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta1a.IngressHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1beta1a.IngressHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1beta1a.IngressLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1beta1a.IngressHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta1a.IngressHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1beta1a.IngressHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *IngressControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1beta1a.IngressHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("IngressControllerMock.AddClusterScopedHandlerFunc: method is nil but IngressController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta1a.IngressHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockIngressControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockIngressControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedIngressController.AddClusterScopedHandlerCalls())
func (mock *IngressControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1beta1a.IngressHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta1a.IngressHandlerFunc
	}
	lockIngressControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockIngressControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *IngressControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta1a.IngressHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("IngressControllerMock.AddFeatureHandlerFunc: method is nil but IngressController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta1a.IngressHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockIngressControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockIngressControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedIngressController.AddFeatureHandlerCalls())
func (mock *IngressControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1beta1a.IngressHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta1a.IngressHandlerFunc
	}
	lockIngressControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockIngressControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *IngressControllerMock) AddHandler(ctx context.Context, name string, handler v1beta1a.IngressHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("IngressControllerMock.AddHandlerFunc: method is nil but IngressController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1beta1a.IngressHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockIngressControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockIngressControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedIngressController.AddHandlerCalls())
func (mock *IngressControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1beta1a.IngressHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1beta1a.IngressHandlerFunc
	}
	lockIngressControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockIngressControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *IngressControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("IngressControllerMock.EnqueueFunc: method is nil but IngressController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockIngressControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockIngressControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedIngressController.EnqueueCalls())
func (mock *IngressControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockIngressControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockIngressControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *IngressControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("IngressControllerMock.GenericFunc: method is nil but IngressController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockIngressControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockIngressControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedIngressController.GenericCalls())
func (mock *IngressControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockIngressControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockIngressControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *IngressControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("IngressControllerMock.InformerFunc: method is nil but IngressController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockIngressControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockIngressControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedIngressController.InformerCalls())
func (mock *IngressControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockIngressControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockIngressControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *IngressControllerMock) Lister() v1beta1a.IngressLister {
	if mock.ListerFunc == nil {
		panic("IngressControllerMock.ListerFunc: method is nil but IngressController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockIngressControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockIngressControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedIngressController.ListerCalls())
func (mock *IngressControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockIngressControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockIngressControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *IngressControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("IngressControllerMock.StartFunc: method is nil but IngressController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockIngressControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockIngressControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedIngressController.StartCalls())
func (mock *IngressControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockIngressControllerMockStart.RLock()
	calls = mock.calls.Start
	lockIngressControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *IngressControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("IngressControllerMock.SyncFunc: method is nil but IngressController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockIngressControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockIngressControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedIngressController.SyncCalls())
func (mock *IngressControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockIngressControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockIngressControllerMockSync.RUnlock()
	return calls
}

var (
	lockIngressInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockIngressInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockIngressInterfaceMockAddFeatureHandler         sync.RWMutex
	lockIngressInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockIngressInterfaceMockAddHandler                sync.RWMutex
	lockIngressInterfaceMockAddLifecycle              sync.RWMutex
	lockIngressInterfaceMockController                sync.RWMutex
	lockIngressInterfaceMockCreate                    sync.RWMutex
	lockIngressInterfaceMockDelete                    sync.RWMutex
	lockIngressInterfaceMockDeleteCollection          sync.RWMutex
	lockIngressInterfaceMockDeleteNamespaced          sync.RWMutex
	lockIngressInterfaceMockGet                       sync.RWMutex
	lockIngressInterfaceMockGetNamespaced             sync.RWMutex
	lockIngressInterfaceMockList                      sync.RWMutex
	lockIngressInterfaceMockObjectClient              sync.RWMutex
	lockIngressInterfaceMockUpdate                    sync.RWMutex
	lockIngressInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that IngressInterfaceMock does implement IngressInterface.
// If this is not the case, regenerate this file with moq.
var _ v1beta1a.IngressInterface = &IngressInterfaceMock{}

// IngressInterfaceMock is a mock implementation of IngressInterface.
//
//     func TestSomethingThatUsesIngressInterface(t *testing.T) {
//
//         // make and configure a mocked IngressInterface
//         mockedIngressInterface := &IngressInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1beta1a.IngressHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1beta1a.IngressLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta1a.IngressHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta1a.IngressLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1beta1a.IngressHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1beta1a.IngressLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1beta1a.IngressController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1beta1.Ingress) (*v1beta1.Ingress, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v1beta1.Ingress, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v1beta1.Ingress, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v1beta1a.IngressList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1beta1.Ingress) (*v1beta1.Ingress, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedIngressInterface in code that requires IngressInterface
//         // and then make assertions.
//
//     }
type IngressInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1beta1a.IngressHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1beta1a.IngressLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta1a.IngressHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta1a.IngressLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1beta1a.IngressHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1beta1a.IngressLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1beta1a.IngressController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1beta1.Ingress) (*v1beta1.Ingress, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v1beta1.Ingress, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v1beta1.Ingress, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v1beta1a.IngressList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1beta1.Ingress) (*v1beta1.Ingress, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1beta1a.IngressHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta1a.IngressLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta1a.IngressHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta1a.IngressLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta1a.IngressHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta1a.IngressLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1beta1.Ingress
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1beta1.Ingress
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *IngressInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1beta1a.IngressHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("IngressInterfaceMock.AddClusterScopedHandlerFunc: method is nil but IngressInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta1a.IngressHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockIngressInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockIngressInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedIngressInterface.AddClusterScopedHandlerCalls())
func (mock *IngressInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1beta1a.IngressHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta1a.IngressHandlerFunc
	}
	lockIngressInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockIngressInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *IngressInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1beta1a.IngressLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("IngressInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but IngressInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta1a.IngressLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockIngressInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockIngressInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedIngressInterface.AddClusterScopedLifecycleCalls())
func (mock *IngressInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1beta1a.IngressLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta1a.IngressLifecycle
	}
	lockIngressInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockIngressInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *IngressInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta1a.IngressHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("IngressInterfaceMock.AddFeatureHandlerFunc: method is nil but IngressInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta1a.IngressHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockIngressInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockIngressInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedIngressInterface.AddFeatureHandlerCalls())
func (mock *IngressInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1beta1a.IngressHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta1a.IngressHandlerFunc
	}
	lockIngressInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockIngressInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *IngressInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta1a.IngressLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("IngressInterfaceMock.AddFeatureLifecycleFunc: method is nil but IngressInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1beta1a.IngressLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockIngressInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockIngressInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedIngressInterface.AddFeatureLifecycleCalls())
func (mock *IngressInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v1beta1a.IngressLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1beta1a.IngressLifecycle
	}
	lockIngressInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockIngressInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *IngressInterfaceMock) AddHandler(ctx context.Context, name string, sync v1beta1a.IngressHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("IngressInterfaceMock.AddHandlerFunc: method is nil but IngressInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1beta1a.IngressHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockIngressInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockIngressInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedIngressInterface.AddHandlerCalls())
func (mock *IngressInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1beta1a.IngressHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1beta1a.IngressHandlerFunc
	}
	lockIngressInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockIngressInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *IngressInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1beta1a.IngressLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("IngressInterfaceMock.AddLifecycleFunc: method is nil but IngressInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1beta1a.IngressLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockIngressInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockIngressInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedIngressInterface.AddLifecycleCalls())
func (mock *IngressInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1beta1a.IngressLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1beta1a.IngressLifecycle
	}
	lockIngressInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockIngressInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *IngressInterfaceMock) Controller() v1beta1a.IngressController {
	if mock.ControllerFunc == nil {
		panic("IngressInterfaceMock.ControllerFunc: method is nil but IngressInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockIngressInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockIngressInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedIngressInterface.ControllerCalls())
func (mock *IngressInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockIngressInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockIngressInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *IngressInterfaceMock) Create(in1 *v1beta1.Ingress) (*v1beta1.Ingress, error) {
	if mock.CreateFunc == nil {
		panic("IngressInterfaceMock.CreateFunc: method is nil but IngressInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1beta1.Ingress
	}{
		In1: in1,
	}
	lockIngressInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockIngressInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedIngressInterface.CreateCalls())
func (mock *IngressInterfaceMock) CreateCalls() []struct {
	In1 *v1beta1.Ingress
} {
	var calls []struct {
		In1 *v1beta1.Ingress
	}
	lockIngressInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockIngressInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *IngressInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("IngressInterfaceMock.DeleteFunc: method is nil but IngressInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockIngressInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockIngressInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedIngressInterface.DeleteCalls())
func (mock *IngressInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockIngressInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockIngressInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *IngressInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("IngressInterfaceMock.DeleteCollectionFunc: method is nil but IngressInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockIngressInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockIngressInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedIngressInterface.DeleteCollectionCalls())
func (mock *IngressInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockIngressInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockIngressInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *IngressInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("IngressInterfaceMock.DeleteNamespacedFunc: method is nil but IngressInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockIngressInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockIngressInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedIngressInterface.DeleteNamespacedCalls())
func (mock *IngressInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockIngressInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockIngressInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *IngressInterfaceMock) Get(name string, opts v1.GetOptions) (*v1beta1.Ingress, error) {
	if mock.GetFunc == nil {
		panic("IngressInterfaceMock.GetFunc: method is nil but IngressInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockIngressInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockIngressInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedIngressInterface.GetCalls())
func (mock *IngressInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockIngressInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockIngressInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *IngressInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v1beta1.Ingress, error) {
	if mock.GetNamespacedFunc == nil {
		panic("IngressInterfaceMock.GetNamespacedFunc: method is nil but IngressInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockIngressInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockIngressInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedIngressInterface.GetNamespacedCalls())
func (mock *IngressInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockIngressInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockIngressInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *IngressInterfaceMock) List(opts v1.ListOptions) (*v1beta1a.IngressList, error) {
	if mock.ListFunc == nil {
		panic("IngressInterfaceMock.ListFunc: method is nil but IngressInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockIngressInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockIngressInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedIngressInterface.ListCalls())
func (mock *IngressInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockIngressInterfaceMockList.RLock()
	calls = mock.calls.List
	lockIngressInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *IngressInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("IngressInterfaceMock.ObjectClientFunc: method is nil but IngressInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockIngressInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockIngressInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedIngressInterface.ObjectClientCalls())
func (mock *IngressInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockIngressInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockIngressInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *IngressInterfaceMock) Update(in1 *v1beta1.Ingress) (*v1beta1.Ingress, error) {
	if mock.UpdateFunc == nil {
		panic("IngressInterfaceMock.UpdateFunc: method is nil but IngressInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1beta1.Ingress
	}{
		In1: in1,
	}
	lockIngressInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockIngressInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedIngressInterface.UpdateCalls())
func (mock *IngressInterfaceMock) UpdateCalls() []struct {
	In1 *v1beta1.Ingress
} {
	var calls []struct {
		In1 *v1beta1.Ingress
	}
	lockIngressInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockIngressInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *IngressInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("IngressInterfaceMock.WatchFunc: method is nil but IngressInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockIngressInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockIngressInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedIngressInterface.WatchCalls())
func (mock *IngressInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockIngressInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockIngressInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockIngressesGetterMockIngresses sync.RWMutex
)

// Ensure, that IngressesGetterMock does implement IngressesGetter.
// If this is not the case, regenerate this file with moq.
var _ v1beta1a.IngressesGetter = &IngressesGetterMock{}

// IngressesGetterMock is a mock implementation of IngressesGetter.
//
//     func TestSomethingThatUsesIngressesGetter(t *testing.T) {
//
//         // make and configure a mocked IngressesGetter
//         mockedIngressesGetter := &IngressesGetterMock{
//             IngressesFunc: func(namespace string) v1beta1a.IngressInterface {
// 	               panic("mock out the Ingresses method")
//             },
//         }
//
//         // use mockedIngressesGetter in code that requires IngressesGetter
//         // and then make assertions.
//
//     }
type IngressesGetterMock struct {
	// IngressesFunc mocks the Ingresses method.
	IngressesFunc func(namespace string) v1beta1a.IngressInterface

	// calls tracks calls to the methods.
	calls struct {
		// Ingresses holds details about calls to the Ingresses method.
		Ingresses []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// Ingresses calls IngressesFunc.
func (mock *IngressesGetterMock) Ingresses(namespace string) v1beta1a.IngressInterface {
	if mock.IngressesFunc == nil {
		panic("IngressesGetterMock.IngressesFunc: method is nil but IngressesGetter.Ingresses was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockIngressesGetterMockIngresses.Lock()
	mock.calls.Ingresses = append(mock.calls.Ingresses, callInfo)
	lockIngressesGetterMockIngresses.Unlock()
	return mock.IngressesFunc(namespace)
}

// IngressesCalls gets all the calls that were made to Ingresses.
// Check the length with:
//     len(mockedIngressesGetter.IngressesCalls())
func (mock *IngressesGetterMock) IngressesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockIngressesGetterMockIngresses.RLock()
	calls = mock.calls.Ingresses
	lockIngressesGetterMockIngresses.RUnlock()
	return calls
}
