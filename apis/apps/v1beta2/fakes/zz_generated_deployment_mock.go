// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1beta2a "github.com/rancher/types/apis/apps/v1beta2"
	v1beta2 "k8s.io/api/apps/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockDeploymentListerMockGet  sync.RWMutex
	lockDeploymentListerMockList sync.RWMutex
)

// Ensure, that DeploymentListerMock does implement DeploymentLister.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.DeploymentLister = &DeploymentListerMock{}

// DeploymentListerMock is a mock implementation of DeploymentLister.
//
//     func TestSomethingThatUsesDeploymentLister(t *testing.T) {
//
//         // make and configure a mocked DeploymentLister
//         mockedDeploymentLister := &DeploymentListerMock{
//             GetFunc: func(namespace string, name string) (*v1beta2.Deployment, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1beta2.Deployment, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedDeploymentLister in code that requires DeploymentLister
//         // and then make assertions.
//
//     }
type DeploymentListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1beta2.Deployment, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1beta2.Deployment, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *DeploymentListerMock) Get(namespace string, name string) (*v1beta2.Deployment, error) {
	if mock.GetFunc == nil {
		panic("DeploymentListerMock.GetFunc: method is nil but DeploymentLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockDeploymentListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockDeploymentListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedDeploymentLister.GetCalls())
func (mock *DeploymentListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockDeploymentListerMockGet.RLock()
	calls = mock.calls.Get
	lockDeploymentListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DeploymentListerMock) List(namespace string, selector labels.Selector) ([]*v1beta2.Deployment, error) {
	if mock.ListFunc == nil {
		panic("DeploymentListerMock.ListFunc: method is nil but DeploymentLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockDeploymentListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockDeploymentListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedDeploymentLister.ListCalls())
func (mock *DeploymentListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockDeploymentListerMockList.RLock()
	calls = mock.calls.List
	lockDeploymentListerMockList.RUnlock()
	return calls
}

var (
	lockDeploymentControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockDeploymentControllerMockAddClusterScopedHandler        sync.RWMutex
	lockDeploymentControllerMockAddFeatureHandler              sync.RWMutex
	lockDeploymentControllerMockAddHandler                     sync.RWMutex
	lockDeploymentControllerMockEnqueue                        sync.RWMutex
	lockDeploymentControllerMockGeneric                        sync.RWMutex
	lockDeploymentControllerMockInformer                       sync.RWMutex
	lockDeploymentControllerMockLister                         sync.RWMutex
	lockDeploymentControllerMockStart                          sync.RWMutex
	lockDeploymentControllerMockSync                           sync.RWMutex
)

// Ensure, that DeploymentControllerMock does implement DeploymentController.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.DeploymentController = &DeploymentControllerMock{}

// DeploymentControllerMock is a mock implementation of DeploymentController.
//
//     func TestSomethingThatUsesDeploymentController(t *testing.T) {
//
//         // make and configure a mocked DeploymentController
//         mockedDeploymentController := &DeploymentControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v1beta2a.DeploymentHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1beta2a.DeploymentHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.DeploymentHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1beta2a.DeploymentHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1beta2a.DeploymentLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedDeploymentController in code that requires DeploymentController
//         // and then make assertions.
//
//     }
type DeploymentControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v1beta2a.DeploymentHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1beta2a.DeploymentHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.DeploymentHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1beta2a.DeploymentHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1beta2a.DeploymentLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1beta2a.DeploymentHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1beta2a.DeploymentHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta2a.DeploymentHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1beta2a.DeploymentHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *DeploymentControllerMock) AddClusterScopedFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v1beta2a.DeploymentHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("DeploymentControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but DeploymentController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta2a.DeploymentHandlerFunc
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockDeploymentControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockDeploymentControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(enabled, feat, ctx, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedDeploymentController.AddClusterScopedFeatureHandlerCalls())
func (mock *DeploymentControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1beta2a.DeploymentHandlerFunc
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta2a.DeploymentHandlerFunc
	}
	lockDeploymentControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockDeploymentControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *DeploymentControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1beta2a.DeploymentHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("DeploymentControllerMock.AddClusterScopedHandlerFunc: method is nil but DeploymentController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta2a.DeploymentHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockDeploymentControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockDeploymentControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedDeploymentController.AddClusterScopedHandlerCalls())
func (mock *DeploymentControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1beta2a.DeploymentHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta2a.DeploymentHandlerFunc
	}
	lockDeploymentControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockDeploymentControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *DeploymentControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.DeploymentHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("DeploymentControllerMock.AddFeatureHandlerFunc: method is nil but DeploymentController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.DeploymentHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockDeploymentControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockDeploymentControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedDeploymentController.AddFeatureHandlerCalls())
func (mock *DeploymentControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1beta2a.DeploymentHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.DeploymentHandlerFunc
	}
	lockDeploymentControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockDeploymentControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *DeploymentControllerMock) AddHandler(ctx context.Context, name string, handler v1beta2a.DeploymentHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("DeploymentControllerMock.AddHandlerFunc: method is nil but DeploymentController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1beta2a.DeploymentHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockDeploymentControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockDeploymentControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedDeploymentController.AddHandlerCalls())
func (mock *DeploymentControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1beta2a.DeploymentHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1beta2a.DeploymentHandlerFunc
	}
	lockDeploymentControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockDeploymentControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *DeploymentControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("DeploymentControllerMock.EnqueueFunc: method is nil but DeploymentController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockDeploymentControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockDeploymentControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedDeploymentController.EnqueueCalls())
func (mock *DeploymentControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockDeploymentControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockDeploymentControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *DeploymentControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("DeploymentControllerMock.GenericFunc: method is nil but DeploymentController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockDeploymentControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockDeploymentControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedDeploymentController.GenericCalls())
func (mock *DeploymentControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockDeploymentControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockDeploymentControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *DeploymentControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("DeploymentControllerMock.InformerFunc: method is nil but DeploymentController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockDeploymentControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockDeploymentControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedDeploymentController.InformerCalls())
func (mock *DeploymentControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockDeploymentControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockDeploymentControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *DeploymentControllerMock) Lister() v1beta2a.DeploymentLister {
	if mock.ListerFunc == nil {
		panic("DeploymentControllerMock.ListerFunc: method is nil but DeploymentController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockDeploymentControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockDeploymentControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedDeploymentController.ListerCalls())
func (mock *DeploymentControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockDeploymentControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockDeploymentControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *DeploymentControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("DeploymentControllerMock.StartFunc: method is nil but DeploymentController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockDeploymentControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockDeploymentControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedDeploymentController.StartCalls())
func (mock *DeploymentControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockDeploymentControllerMockStart.RLock()
	calls = mock.calls.Start
	lockDeploymentControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *DeploymentControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("DeploymentControllerMock.SyncFunc: method is nil but DeploymentController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockDeploymentControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockDeploymentControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedDeploymentController.SyncCalls())
func (mock *DeploymentControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockDeploymentControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockDeploymentControllerMockSync.RUnlock()
	return calls
}

var (
	lockDeploymentInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockDeploymentInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockDeploymentInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockDeploymentInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockDeploymentInterfaceMockAddFeatureHandler                sync.RWMutex
	lockDeploymentInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockDeploymentInterfaceMockAddHandler                       sync.RWMutex
	lockDeploymentInterfaceMockAddLifecycle                     sync.RWMutex
	lockDeploymentInterfaceMockController                       sync.RWMutex
	lockDeploymentInterfaceMockCreate                           sync.RWMutex
	lockDeploymentInterfaceMockDelete                           sync.RWMutex
	lockDeploymentInterfaceMockDeleteCollection                 sync.RWMutex
	lockDeploymentInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockDeploymentInterfaceMockGet                              sync.RWMutex
	lockDeploymentInterfaceMockGetNamespaced                    sync.RWMutex
	lockDeploymentInterfaceMockList                             sync.RWMutex
	lockDeploymentInterfaceMockObjectClient                     sync.RWMutex
	lockDeploymentInterfaceMockUpdate                           sync.RWMutex
	lockDeploymentInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that DeploymentInterfaceMock does implement DeploymentInterface.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.DeploymentInterface = &DeploymentInterfaceMock{}

// DeploymentInterfaceMock is a mock implementation of DeploymentInterface.
//
//     func TestSomethingThatUsesDeploymentInterface(t *testing.T) {
//
//         // make and configure a mocked DeploymentInterface
//         mockedDeploymentInterface := &DeploymentInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v1beta2a.DeploymentHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v1beta2a.DeploymentLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1beta2a.DeploymentHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1beta2a.DeploymentLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.DeploymentHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta2a.DeploymentLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1beta2a.DeploymentHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1beta2a.DeploymentLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1beta2a.DeploymentController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1beta2.Deployment) (*v1beta2.Deployment, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v1beta2.Deployment, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v1beta2.Deployment, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v1beta2a.DeploymentList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1beta2.Deployment) (*v1beta2.Deployment, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedDeploymentInterface in code that requires DeploymentInterface
//         // and then make assertions.
//
//     }
type DeploymentInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v1beta2a.DeploymentHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v1beta2a.DeploymentLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1beta2a.DeploymentHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1beta2a.DeploymentLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.DeploymentHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta2a.DeploymentLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1beta2a.DeploymentHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1beta2a.DeploymentLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1beta2a.DeploymentController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1beta2.Deployment) (*v1beta2.Deployment, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v1beta2.Deployment, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v1beta2.Deployment, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v1beta2a.DeploymentList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1beta2.Deployment) (*v1beta2.Deployment, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1beta2a.DeploymentHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.DeploymentLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1beta2a.DeploymentHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.DeploymentLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta2a.DeploymentHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.DeploymentLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta2a.DeploymentHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.DeploymentLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1beta2.Deployment
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1beta2.Deployment
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *DeploymentInterfaceMock) AddClusterScopedFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v1beta2a.DeploymentHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("DeploymentInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but DeploymentInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta2a.DeploymentHandlerFunc
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockDeploymentInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockDeploymentInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(enabled, feat, ctx, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedDeploymentInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *DeploymentInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1beta2a.DeploymentHandlerFunc
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta2a.DeploymentHandlerFunc
	}
	lockDeploymentInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockDeploymentInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *DeploymentInterfaceMock) AddClusterScopedFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v1beta2a.DeploymentLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("DeploymentInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but DeploymentInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta2a.DeploymentLifecycle
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockDeploymentInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockDeploymentInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(enabled, feat, ctx, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedDeploymentInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *DeploymentInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1beta2a.DeploymentLifecycle
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta2a.DeploymentLifecycle
	}
	lockDeploymentInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockDeploymentInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *DeploymentInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1beta2a.DeploymentHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("DeploymentInterfaceMock.AddClusterScopedHandlerFunc: method is nil but DeploymentInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta2a.DeploymentHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockDeploymentInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockDeploymentInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedDeploymentInterface.AddClusterScopedHandlerCalls())
func (mock *DeploymentInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1beta2a.DeploymentHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta2a.DeploymentHandlerFunc
	}
	lockDeploymentInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockDeploymentInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *DeploymentInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1beta2a.DeploymentLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("DeploymentInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but DeploymentInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta2a.DeploymentLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockDeploymentInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockDeploymentInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedDeploymentInterface.AddClusterScopedLifecycleCalls())
func (mock *DeploymentInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1beta2a.DeploymentLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta2a.DeploymentLifecycle
	}
	lockDeploymentInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockDeploymentInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *DeploymentInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.DeploymentHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("DeploymentInterfaceMock.AddFeatureHandlerFunc: method is nil but DeploymentInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.DeploymentHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockDeploymentInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockDeploymentInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedDeploymentInterface.AddFeatureHandlerCalls())
func (mock *DeploymentInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1beta2a.DeploymentHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.DeploymentHandlerFunc
	}
	lockDeploymentInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockDeploymentInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *DeploymentInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta2a.DeploymentLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("DeploymentInterfaceMock.AddFeatureLifecycleFunc: method is nil but DeploymentInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.DeploymentLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockDeploymentInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockDeploymentInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedDeploymentInterface.AddFeatureLifecycleCalls())
func (mock *DeploymentInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v1beta2a.DeploymentLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.DeploymentLifecycle
	}
	lockDeploymentInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockDeploymentInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *DeploymentInterfaceMock) AddHandler(ctx context.Context, name string, sync v1beta2a.DeploymentHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("DeploymentInterfaceMock.AddHandlerFunc: method is nil but DeploymentInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1beta2a.DeploymentHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockDeploymentInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockDeploymentInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedDeploymentInterface.AddHandlerCalls())
func (mock *DeploymentInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1beta2a.DeploymentHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1beta2a.DeploymentHandlerFunc
	}
	lockDeploymentInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockDeploymentInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *DeploymentInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1beta2a.DeploymentLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("DeploymentInterfaceMock.AddLifecycleFunc: method is nil but DeploymentInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.DeploymentLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockDeploymentInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockDeploymentInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedDeploymentInterface.AddLifecycleCalls())
func (mock *DeploymentInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1beta2a.DeploymentLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.DeploymentLifecycle
	}
	lockDeploymentInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockDeploymentInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *DeploymentInterfaceMock) Controller() v1beta2a.DeploymentController {
	if mock.ControllerFunc == nil {
		panic("DeploymentInterfaceMock.ControllerFunc: method is nil but DeploymentInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockDeploymentInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockDeploymentInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedDeploymentInterface.ControllerCalls())
func (mock *DeploymentInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockDeploymentInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockDeploymentInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *DeploymentInterfaceMock) Create(in1 *v1beta2.Deployment) (*v1beta2.Deployment, error) {
	if mock.CreateFunc == nil {
		panic("DeploymentInterfaceMock.CreateFunc: method is nil but DeploymentInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1beta2.Deployment
	}{
		In1: in1,
	}
	lockDeploymentInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockDeploymentInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedDeploymentInterface.CreateCalls())
func (mock *DeploymentInterfaceMock) CreateCalls() []struct {
	In1 *v1beta2.Deployment
} {
	var calls []struct {
		In1 *v1beta2.Deployment
	}
	lockDeploymentInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockDeploymentInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *DeploymentInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("DeploymentInterfaceMock.DeleteFunc: method is nil but DeploymentInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockDeploymentInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockDeploymentInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedDeploymentInterface.DeleteCalls())
func (mock *DeploymentInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockDeploymentInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockDeploymentInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *DeploymentInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("DeploymentInterfaceMock.DeleteCollectionFunc: method is nil but DeploymentInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockDeploymentInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockDeploymentInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedDeploymentInterface.DeleteCollectionCalls())
func (mock *DeploymentInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockDeploymentInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockDeploymentInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *DeploymentInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("DeploymentInterfaceMock.DeleteNamespacedFunc: method is nil but DeploymentInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockDeploymentInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockDeploymentInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedDeploymentInterface.DeleteNamespacedCalls())
func (mock *DeploymentInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockDeploymentInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockDeploymentInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *DeploymentInterfaceMock) Get(name string, opts v1.GetOptions) (*v1beta2.Deployment, error) {
	if mock.GetFunc == nil {
		panic("DeploymentInterfaceMock.GetFunc: method is nil but DeploymentInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockDeploymentInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockDeploymentInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedDeploymentInterface.GetCalls())
func (mock *DeploymentInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockDeploymentInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockDeploymentInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *DeploymentInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v1beta2.Deployment, error) {
	if mock.GetNamespacedFunc == nil {
		panic("DeploymentInterfaceMock.GetNamespacedFunc: method is nil but DeploymentInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockDeploymentInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockDeploymentInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedDeploymentInterface.GetNamespacedCalls())
func (mock *DeploymentInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockDeploymentInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockDeploymentInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DeploymentInterfaceMock) List(opts v1.ListOptions) (*v1beta2a.DeploymentList, error) {
	if mock.ListFunc == nil {
		panic("DeploymentInterfaceMock.ListFunc: method is nil but DeploymentInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockDeploymentInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockDeploymentInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedDeploymentInterface.ListCalls())
func (mock *DeploymentInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockDeploymentInterfaceMockList.RLock()
	calls = mock.calls.List
	lockDeploymentInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *DeploymentInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("DeploymentInterfaceMock.ObjectClientFunc: method is nil but DeploymentInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockDeploymentInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockDeploymentInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedDeploymentInterface.ObjectClientCalls())
func (mock *DeploymentInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockDeploymentInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockDeploymentInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *DeploymentInterfaceMock) Update(in1 *v1beta2.Deployment) (*v1beta2.Deployment, error) {
	if mock.UpdateFunc == nil {
		panic("DeploymentInterfaceMock.UpdateFunc: method is nil but DeploymentInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1beta2.Deployment
	}{
		In1: in1,
	}
	lockDeploymentInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockDeploymentInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedDeploymentInterface.UpdateCalls())
func (mock *DeploymentInterfaceMock) UpdateCalls() []struct {
	In1 *v1beta2.Deployment
} {
	var calls []struct {
		In1 *v1beta2.Deployment
	}
	lockDeploymentInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockDeploymentInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *DeploymentInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("DeploymentInterfaceMock.WatchFunc: method is nil but DeploymentInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockDeploymentInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockDeploymentInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedDeploymentInterface.WatchCalls())
func (mock *DeploymentInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockDeploymentInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockDeploymentInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockDeploymentsGetterMockDeployments sync.RWMutex
)

// Ensure, that DeploymentsGetterMock does implement DeploymentsGetter.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.DeploymentsGetter = &DeploymentsGetterMock{}

// DeploymentsGetterMock is a mock implementation of DeploymentsGetter.
//
//     func TestSomethingThatUsesDeploymentsGetter(t *testing.T) {
//
//         // make and configure a mocked DeploymentsGetter
//         mockedDeploymentsGetter := &DeploymentsGetterMock{
//             DeploymentsFunc: func(namespace string) v1beta2a.DeploymentInterface {
// 	               panic("mock out the Deployments method")
//             },
//         }
//
//         // use mockedDeploymentsGetter in code that requires DeploymentsGetter
//         // and then make assertions.
//
//     }
type DeploymentsGetterMock struct {
	// DeploymentsFunc mocks the Deployments method.
	DeploymentsFunc func(namespace string) v1beta2a.DeploymentInterface

	// calls tracks calls to the methods.
	calls struct {
		// Deployments holds details about calls to the Deployments method.
		Deployments []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// Deployments calls DeploymentsFunc.
func (mock *DeploymentsGetterMock) Deployments(namespace string) v1beta2a.DeploymentInterface {
	if mock.DeploymentsFunc == nil {
		panic("DeploymentsGetterMock.DeploymentsFunc: method is nil but DeploymentsGetter.Deployments was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockDeploymentsGetterMockDeployments.Lock()
	mock.calls.Deployments = append(mock.calls.Deployments, callInfo)
	lockDeploymentsGetterMockDeployments.Unlock()
	return mock.DeploymentsFunc(namespace)
}

// DeploymentsCalls gets all the calls that were made to Deployments.
// Check the length with:
//     len(mockedDeploymentsGetter.DeploymentsCalls())
func (mock *DeploymentsGetterMock) DeploymentsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockDeploymentsGetterMockDeployments.RLock()
	calls = mock.calls.Deployments
	lockDeploymentsGetterMockDeployments.RUnlock()
	return calls
}
