// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1beta2a "github.com/rancher/types/apis/apps/v1beta2"
	v1beta2 "k8s.io/api/apps/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockReplicaSetListerMockGet  sync.RWMutex
	lockReplicaSetListerMockList sync.RWMutex
)

// Ensure, that ReplicaSetListerMock does implement ReplicaSetLister.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.ReplicaSetLister = &ReplicaSetListerMock{}

// ReplicaSetListerMock is a mock implementation of ReplicaSetLister.
//
//     func TestSomethingThatUsesReplicaSetLister(t *testing.T) {
//
//         // make and configure a mocked ReplicaSetLister
//         mockedReplicaSetLister := &ReplicaSetListerMock{
//             GetFunc: func(namespace string, name string) (*v1beta2.ReplicaSet, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1beta2.ReplicaSet, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedReplicaSetLister in code that requires ReplicaSetLister
//         // and then make assertions.
//
//     }
type ReplicaSetListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1beta2.ReplicaSet, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1beta2.ReplicaSet, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *ReplicaSetListerMock) Get(namespace string, name string) (*v1beta2.ReplicaSet, error) {
	if mock.GetFunc == nil {
		panic("ReplicaSetListerMock.GetFunc: method is nil but ReplicaSetLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockReplicaSetListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockReplicaSetListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedReplicaSetLister.GetCalls())
func (mock *ReplicaSetListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockReplicaSetListerMockGet.RLock()
	calls = mock.calls.Get
	lockReplicaSetListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ReplicaSetListerMock) List(namespace string, selector labels.Selector) ([]*v1beta2.ReplicaSet, error) {
	if mock.ListFunc == nil {
		panic("ReplicaSetListerMock.ListFunc: method is nil but ReplicaSetLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockReplicaSetListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockReplicaSetListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedReplicaSetLister.ListCalls())
func (mock *ReplicaSetListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockReplicaSetListerMockList.RLock()
	calls = mock.calls.List
	lockReplicaSetListerMockList.RUnlock()
	return calls
}

var (
	lockReplicaSetControllerMockAddClusterScopedHandler sync.RWMutex
	lockReplicaSetControllerMockAddFeatureHandler       sync.RWMutex
	lockReplicaSetControllerMockAddHandler              sync.RWMutex
	lockReplicaSetControllerMockEnqueue                 sync.RWMutex
	lockReplicaSetControllerMockGeneric                 sync.RWMutex
	lockReplicaSetControllerMockInformer                sync.RWMutex
	lockReplicaSetControllerMockLister                  sync.RWMutex
	lockReplicaSetControllerMockStart                   sync.RWMutex
	lockReplicaSetControllerMockSync                    sync.RWMutex
)

// Ensure, that ReplicaSetControllerMock does implement ReplicaSetController.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.ReplicaSetController = &ReplicaSetControllerMock{}

// ReplicaSetControllerMock is a mock implementation of ReplicaSetController.
//
//     func TestSomethingThatUsesReplicaSetController(t *testing.T) {
//
//         // make and configure a mocked ReplicaSetController
//         mockedReplicaSetController := &ReplicaSetControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1beta2a.ReplicaSetHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.ReplicaSetHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1beta2a.ReplicaSetHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1beta2a.ReplicaSetLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedReplicaSetController in code that requires ReplicaSetController
//         // and then make assertions.
//
//     }
type ReplicaSetControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1beta2a.ReplicaSetHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.ReplicaSetHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1beta2a.ReplicaSetHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1beta2a.ReplicaSetLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1beta2a.ReplicaSetHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta2a.ReplicaSetHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1beta2a.ReplicaSetHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ReplicaSetControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1beta2a.ReplicaSetHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ReplicaSetControllerMock.AddClusterScopedHandlerFunc: method is nil but ReplicaSetController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta2a.ReplicaSetHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockReplicaSetControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockReplicaSetControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedReplicaSetController.AddClusterScopedHandlerCalls())
func (mock *ReplicaSetControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1beta2a.ReplicaSetHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta2a.ReplicaSetHandlerFunc
	}
	lockReplicaSetControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockReplicaSetControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *ReplicaSetControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.ReplicaSetHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("ReplicaSetControllerMock.AddFeatureHandlerFunc: method is nil but ReplicaSetController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.ReplicaSetHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockReplicaSetControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockReplicaSetControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedReplicaSetController.AddFeatureHandlerCalls())
func (mock *ReplicaSetControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1beta2a.ReplicaSetHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.ReplicaSetHandlerFunc
	}
	lockReplicaSetControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockReplicaSetControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ReplicaSetControllerMock) AddHandler(ctx context.Context, name string, handler v1beta2a.ReplicaSetHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ReplicaSetControllerMock.AddHandlerFunc: method is nil but ReplicaSetController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1beta2a.ReplicaSetHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockReplicaSetControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockReplicaSetControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedReplicaSetController.AddHandlerCalls())
func (mock *ReplicaSetControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1beta2a.ReplicaSetHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1beta2a.ReplicaSetHandlerFunc
	}
	lockReplicaSetControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockReplicaSetControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ReplicaSetControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("ReplicaSetControllerMock.EnqueueFunc: method is nil but ReplicaSetController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockReplicaSetControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockReplicaSetControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedReplicaSetController.EnqueueCalls())
func (mock *ReplicaSetControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockReplicaSetControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockReplicaSetControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *ReplicaSetControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("ReplicaSetControllerMock.GenericFunc: method is nil but ReplicaSetController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockReplicaSetControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockReplicaSetControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedReplicaSetController.GenericCalls())
func (mock *ReplicaSetControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockReplicaSetControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockReplicaSetControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ReplicaSetControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ReplicaSetControllerMock.InformerFunc: method is nil but ReplicaSetController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockReplicaSetControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockReplicaSetControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedReplicaSetController.InformerCalls())
func (mock *ReplicaSetControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockReplicaSetControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockReplicaSetControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *ReplicaSetControllerMock) Lister() v1beta2a.ReplicaSetLister {
	if mock.ListerFunc == nil {
		panic("ReplicaSetControllerMock.ListerFunc: method is nil but ReplicaSetController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockReplicaSetControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockReplicaSetControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedReplicaSetController.ListerCalls())
func (mock *ReplicaSetControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockReplicaSetControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockReplicaSetControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *ReplicaSetControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("ReplicaSetControllerMock.StartFunc: method is nil but ReplicaSetController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockReplicaSetControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockReplicaSetControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedReplicaSetController.StartCalls())
func (mock *ReplicaSetControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockReplicaSetControllerMockStart.RLock()
	calls = mock.calls.Start
	lockReplicaSetControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *ReplicaSetControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("ReplicaSetControllerMock.SyncFunc: method is nil but ReplicaSetController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockReplicaSetControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockReplicaSetControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedReplicaSetController.SyncCalls())
func (mock *ReplicaSetControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockReplicaSetControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockReplicaSetControllerMockSync.RUnlock()
	return calls
}

var (
	lockReplicaSetInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockReplicaSetInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockReplicaSetInterfaceMockAddFeatureHandler         sync.RWMutex
	lockReplicaSetInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockReplicaSetInterfaceMockAddHandler                sync.RWMutex
	lockReplicaSetInterfaceMockAddLifecycle              sync.RWMutex
	lockReplicaSetInterfaceMockController                sync.RWMutex
	lockReplicaSetInterfaceMockCreate                    sync.RWMutex
	lockReplicaSetInterfaceMockDelete                    sync.RWMutex
	lockReplicaSetInterfaceMockDeleteCollection          sync.RWMutex
	lockReplicaSetInterfaceMockDeleteNamespaced          sync.RWMutex
	lockReplicaSetInterfaceMockGet                       sync.RWMutex
	lockReplicaSetInterfaceMockGetNamespaced             sync.RWMutex
	lockReplicaSetInterfaceMockList                      sync.RWMutex
	lockReplicaSetInterfaceMockObjectClient              sync.RWMutex
	lockReplicaSetInterfaceMockUpdate                    sync.RWMutex
	lockReplicaSetInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that ReplicaSetInterfaceMock does implement ReplicaSetInterface.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.ReplicaSetInterface = &ReplicaSetInterfaceMock{}

// ReplicaSetInterfaceMock is a mock implementation of ReplicaSetInterface.
//
//     func TestSomethingThatUsesReplicaSetInterface(t *testing.T) {
//
//         // make and configure a mocked ReplicaSetInterface
//         mockedReplicaSetInterface := &ReplicaSetInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1beta2a.ReplicaSetHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1beta2a.ReplicaSetLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.ReplicaSetHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta2a.ReplicaSetLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1beta2a.ReplicaSetHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1beta2a.ReplicaSetLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1beta2a.ReplicaSetController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1beta2.ReplicaSet) (*v1beta2.ReplicaSet, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v1beta2.ReplicaSet, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v1beta2.ReplicaSet, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v1beta2a.ReplicaSetList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1beta2.ReplicaSet) (*v1beta2.ReplicaSet, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedReplicaSetInterface in code that requires ReplicaSetInterface
//         // and then make assertions.
//
//     }
type ReplicaSetInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1beta2a.ReplicaSetHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1beta2a.ReplicaSetLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.ReplicaSetHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta2a.ReplicaSetLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1beta2a.ReplicaSetHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1beta2a.ReplicaSetLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1beta2a.ReplicaSetController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1beta2.ReplicaSet) (*v1beta2.ReplicaSet, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v1beta2.ReplicaSet, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v1beta2.ReplicaSet, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v1beta2a.ReplicaSetList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1beta2.ReplicaSet) (*v1beta2.ReplicaSet, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1beta2a.ReplicaSetHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.ReplicaSetLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta2a.ReplicaSetHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.ReplicaSetLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta2a.ReplicaSetHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.ReplicaSetLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1beta2.ReplicaSet
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1beta2.ReplicaSet
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ReplicaSetInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1beta2a.ReplicaSetHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ReplicaSetInterfaceMock.AddClusterScopedHandlerFunc: method is nil but ReplicaSetInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta2a.ReplicaSetHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockReplicaSetInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockReplicaSetInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedReplicaSetInterface.AddClusterScopedHandlerCalls())
func (mock *ReplicaSetInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1beta2a.ReplicaSetHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta2a.ReplicaSetHandlerFunc
	}
	lockReplicaSetInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockReplicaSetInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *ReplicaSetInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1beta2a.ReplicaSetLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("ReplicaSetInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but ReplicaSetInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta2a.ReplicaSetLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockReplicaSetInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockReplicaSetInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedReplicaSetInterface.AddClusterScopedLifecycleCalls())
func (mock *ReplicaSetInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1beta2a.ReplicaSetLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta2a.ReplicaSetLifecycle
	}
	lockReplicaSetInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockReplicaSetInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *ReplicaSetInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.ReplicaSetHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("ReplicaSetInterfaceMock.AddFeatureHandlerFunc: method is nil but ReplicaSetInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.ReplicaSetHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockReplicaSetInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockReplicaSetInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedReplicaSetInterface.AddFeatureHandlerCalls())
func (mock *ReplicaSetInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1beta2a.ReplicaSetHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.ReplicaSetHandlerFunc
	}
	lockReplicaSetInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockReplicaSetInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *ReplicaSetInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta2a.ReplicaSetLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("ReplicaSetInterfaceMock.AddFeatureLifecycleFunc: method is nil but ReplicaSetInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.ReplicaSetLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockReplicaSetInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockReplicaSetInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedReplicaSetInterface.AddFeatureLifecycleCalls())
func (mock *ReplicaSetInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v1beta2a.ReplicaSetLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.ReplicaSetLifecycle
	}
	lockReplicaSetInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockReplicaSetInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ReplicaSetInterfaceMock) AddHandler(ctx context.Context, name string, sync v1beta2a.ReplicaSetHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ReplicaSetInterfaceMock.AddHandlerFunc: method is nil but ReplicaSetInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1beta2a.ReplicaSetHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockReplicaSetInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockReplicaSetInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedReplicaSetInterface.AddHandlerCalls())
func (mock *ReplicaSetInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1beta2a.ReplicaSetHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1beta2a.ReplicaSetHandlerFunc
	}
	lockReplicaSetInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockReplicaSetInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *ReplicaSetInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1beta2a.ReplicaSetLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("ReplicaSetInterfaceMock.AddLifecycleFunc: method is nil but ReplicaSetInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.ReplicaSetLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockReplicaSetInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockReplicaSetInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedReplicaSetInterface.AddLifecycleCalls())
func (mock *ReplicaSetInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1beta2a.ReplicaSetLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.ReplicaSetLifecycle
	}
	lockReplicaSetInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockReplicaSetInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *ReplicaSetInterfaceMock) Controller() v1beta2a.ReplicaSetController {
	if mock.ControllerFunc == nil {
		panic("ReplicaSetInterfaceMock.ControllerFunc: method is nil but ReplicaSetInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockReplicaSetInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockReplicaSetInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedReplicaSetInterface.ControllerCalls())
func (mock *ReplicaSetInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockReplicaSetInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockReplicaSetInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ReplicaSetInterfaceMock) Create(in1 *v1beta2.ReplicaSet) (*v1beta2.ReplicaSet, error) {
	if mock.CreateFunc == nil {
		panic("ReplicaSetInterfaceMock.CreateFunc: method is nil but ReplicaSetInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1beta2.ReplicaSet
	}{
		In1: in1,
	}
	lockReplicaSetInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockReplicaSetInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedReplicaSetInterface.CreateCalls())
func (mock *ReplicaSetInterfaceMock) CreateCalls() []struct {
	In1 *v1beta2.ReplicaSet
} {
	var calls []struct {
		In1 *v1beta2.ReplicaSet
	}
	lockReplicaSetInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockReplicaSetInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ReplicaSetInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ReplicaSetInterfaceMock.DeleteFunc: method is nil but ReplicaSetInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockReplicaSetInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockReplicaSetInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedReplicaSetInterface.DeleteCalls())
func (mock *ReplicaSetInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockReplicaSetInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockReplicaSetInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *ReplicaSetInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("ReplicaSetInterfaceMock.DeleteCollectionFunc: method is nil but ReplicaSetInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockReplicaSetInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockReplicaSetInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedReplicaSetInterface.DeleteCollectionCalls())
func (mock *ReplicaSetInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockReplicaSetInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockReplicaSetInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *ReplicaSetInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("ReplicaSetInterfaceMock.DeleteNamespacedFunc: method is nil but ReplicaSetInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockReplicaSetInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockReplicaSetInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedReplicaSetInterface.DeleteNamespacedCalls())
func (mock *ReplicaSetInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockReplicaSetInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockReplicaSetInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ReplicaSetInterfaceMock) Get(name string, opts v1.GetOptions) (*v1beta2.ReplicaSet, error) {
	if mock.GetFunc == nil {
		panic("ReplicaSetInterfaceMock.GetFunc: method is nil but ReplicaSetInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockReplicaSetInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockReplicaSetInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedReplicaSetInterface.GetCalls())
func (mock *ReplicaSetInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockReplicaSetInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockReplicaSetInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *ReplicaSetInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v1beta2.ReplicaSet, error) {
	if mock.GetNamespacedFunc == nil {
		panic("ReplicaSetInterfaceMock.GetNamespacedFunc: method is nil but ReplicaSetInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockReplicaSetInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockReplicaSetInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedReplicaSetInterface.GetNamespacedCalls())
func (mock *ReplicaSetInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockReplicaSetInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockReplicaSetInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ReplicaSetInterfaceMock) List(opts v1.ListOptions) (*v1beta2a.ReplicaSetList, error) {
	if mock.ListFunc == nil {
		panic("ReplicaSetInterfaceMock.ListFunc: method is nil but ReplicaSetInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockReplicaSetInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockReplicaSetInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedReplicaSetInterface.ListCalls())
func (mock *ReplicaSetInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockReplicaSetInterfaceMockList.RLock()
	calls = mock.calls.List
	lockReplicaSetInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *ReplicaSetInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("ReplicaSetInterfaceMock.ObjectClientFunc: method is nil but ReplicaSetInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockReplicaSetInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockReplicaSetInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedReplicaSetInterface.ObjectClientCalls())
func (mock *ReplicaSetInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockReplicaSetInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockReplicaSetInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ReplicaSetInterfaceMock) Update(in1 *v1beta2.ReplicaSet) (*v1beta2.ReplicaSet, error) {
	if mock.UpdateFunc == nil {
		panic("ReplicaSetInterfaceMock.UpdateFunc: method is nil but ReplicaSetInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1beta2.ReplicaSet
	}{
		In1: in1,
	}
	lockReplicaSetInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockReplicaSetInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedReplicaSetInterface.UpdateCalls())
func (mock *ReplicaSetInterfaceMock) UpdateCalls() []struct {
	In1 *v1beta2.ReplicaSet
} {
	var calls []struct {
		In1 *v1beta2.ReplicaSet
	}
	lockReplicaSetInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockReplicaSetInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ReplicaSetInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ReplicaSetInterfaceMock.WatchFunc: method is nil but ReplicaSetInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockReplicaSetInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockReplicaSetInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedReplicaSetInterface.WatchCalls())
func (mock *ReplicaSetInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockReplicaSetInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockReplicaSetInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockReplicaSetsGetterMockReplicaSets sync.RWMutex
)

// Ensure, that ReplicaSetsGetterMock does implement ReplicaSetsGetter.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.ReplicaSetsGetter = &ReplicaSetsGetterMock{}

// ReplicaSetsGetterMock is a mock implementation of ReplicaSetsGetter.
//
//     func TestSomethingThatUsesReplicaSetsGetter(t *testing.T) {
//
//         // make and configure a mocked ReplicaSetsGetter
//         mockedReplicaSetsGetter := &ReplicaSetsGetterMock{
//             ReplicaSetsFunc: func(namespace string) v1beta2a.ReplicaSetInterface {
// 	               panic("mock out the ReplicaSets method")
//             },
//         }
//
//         // use mockedReplicaSetsGetter in code that requires ReplicaSetsGetter
//         // and then make assertions.
//
//     }
type ReplicaSetsGetterMock struct {
	// ReplicaSetsFunc mocks the ReplicaSets method.
	ReplicaSetsFunc func(namespace string) v1beta2a.ReplicaSetInterface

	// calls tracks calls to the methods.
	calls struct {
		// ReplicaSets holds details about calls to the ReplicaSets method.
		ReplicaSets []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// ReplicaSets calls ReplicaSetsFunc.
func (mock *ReplicaSetsGetterMock) ReplicaSets(namespace string) v1beta2a.ReplicaSetInterface {
	if mock.ReplicaSetsFunc == nil {
		panic("ReplicaSetsGetterMock.ReplicaSetsFunc: method is nil but ReplicaSetsGetter.ReplicaSets was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockReplicaSetsGetterMockReplicaSets.Lock()
	mock.calls.ReplicaSets = append(mock.calls.ReplicaSets, callInfo)
	lockReplicaSetsGetterMockReplicaSets.Unlock()
	return mock.ReplicaSetsFunc(namespace)
}

// ReplicaSetsCalls gets all the calls that were made to ReplicaSets.
// Check the length with:
//     len(mockedReplicaSetsGetter.ReplicaSetsCalls())
func (mock *ReplicaSetsGetterMock) ReplicaSetsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockReplicaSetsGetterMockReplicaSets.RLock()
	calls = mock.calls.ReplicaSets
	lockReplicaSetsGetterMockReplicaSets.RUnlock()
	return calls
}
