// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1beta2a "github.com/rancher/types/apis/apps/v1beta2"
	v1beta2 "k8s.io/api/apps/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockStatefulSetListerMockGet  sync.RWMutex
	lockStatefulSetListerMockList sync.RWMutex
)

// Ensure, that StatefulSetListerMock does implement StatefulSetLister.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.StatefulSetLister = &StatefulSetListerMock{}

// StatefulSetListerMock is a mock implementation of StatefulSetLister.
//
//     func TestSomethingThatUsesStatefulSetLister(t *testing.T) {
//
//         // make and configure a mocked StatefulSetLister
//         mockedStatefulSetLister := &StatefulSetListerMock{
//             GetFunc: func(namespace string, name string) (*v1beta2.StatefulSet, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1beta2.StatefulSet, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedStatefulSetLister in code that requires StatefulSetLister
//         // and then make assertions.
//
//     }
type StatefulSetListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1beta2.StatefulSet, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1beta2.StatefulSet, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *StatefulSetListerMock) Get(namespace string, name string) (*v1beta2.StatefulSet, error) {
	if mock.GetFunc == nil {
		panic("StatefulSetListerMock.GetFunc: method is nil but StatefulSetLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockStatefulSetListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockStatefulSetListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedStatefulSetLister.GetCalls())
func (mock *StatefulSetListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockStatefulSetListerMockGet.RLock()
	calls = mock.calls.Get
	lockStatefulSetListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *StatefulSetListerMock) List(namespace string, selector labels.Selector) ([]*v1beta2.StatefulSet, error) {
	if mock.ListFunc == nil {
		panic("StatefulSetListerMock.ListFunc: method is nil but StatefulSetLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockStatefulSetListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockStatefulSetListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedStatefulSetLister.ListCalls())
func (mock *StatefulSetListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockStatefulSetListerMockList.RLock()
	calls = mock.calls.List
	lockStatefulSetListerMockList.RUnlock()
	return calls
}

var (
	lockStatefulSetControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockStatefulSetControllerMockAddClusterScopedHandler        sync.RWMutex
	lockStatefulSetControllerMockAddFeatureHandler              sync.RWMutex
	lockStatefulSetControllerMockAddHandler                     sync.RWMutex
	lockStatefulSetControllerMockEnqueue                        sync.RWMutex
	lockStatefulSetControllerMockGeneric                        sync.RWMutex
	lockStatefulSetControllerMockInformer                       sync.RWMutex
	lockStatefulSetControllerMockLister                         sync.RWMutex
	lockStatefulSetControllerMockStart                          sync.RWMutex
	lockStatefulSetControllerMockSync                           sync.RWMutex
)

// Ensure, that StatefulSetControllerMock does implement StatefulSetController.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.StatefulSetController = &StatefulSetControllerMock{}

// StatefulSetControllerMock is a mock implementation of StatefulSetController.
//
//     func TestSomethingThatUsesStatefulSetController(t *testing.T) {
//
//         // make and configure a mocked StatefulSetController
//         mockedStatefulSetController := &StatefulSetControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v1beta2a.StatefulSetHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1beta2a.StatefulSetHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.StatefulSetHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1beta2a.StatefulSetHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1beta2a.StatefulSetLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedStatefulSetController in code that requires StatefulSetController
//         // and then make assertions.
//
//     }
type StatefulSetControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v1beta2a.StatefulSetHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1beta2a.StatefulSetHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.StatefulSetHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1beta2a.StatefulSetHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1beta2a.StatefulSetLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1beta2a.StatefulSetHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1beta2a.StatefulSetHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta2a.StatefulSetHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1beta2a.StatefulSetHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *StatefulSetControllerMock) AddClusterScopedFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v1beta2a.StatefulSetHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("StatefulSetControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but StatefulSetController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta2a.StatefulSetHandlerFunc
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockStatefulSetControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockStatefulSetControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(enabled, feat, ctx, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedStatefulSetController.AddClusterScopedFeatureHandlerCalls())
func (mock *StatefulSetControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1beta2a.StatefulSetHandlerFunc
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta2a.StatefulSetHandlerFunc
	}
	lockStatefulSetControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockStatefulSetControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *StatefulSetControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1beta2a.StatefulSetHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("StatefulSetControllerMock.AddClusterScopedHandlerFunc: method is nil but StatefulSetController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta2a.StatefulSetHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockStatefulSetControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockStatefulSetControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedStatefulSetController.AddClusterScopedHandlerCalls())
func (mock *StatefulSetControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1beta2a.StatefulSetHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta2a.StatefulSetHandlerFunc
	}
	lockStatefulSetControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockStatefulSetControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *StatefulSetControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.StatefulSetHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("StatefulSetControllerMock.AddFeatureHandlerFunc: method is nil but StatefulSetController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.StatefulSetHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockStatefulSetControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockStatefulSetControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedStatefulSetController.AddFeatureHandlerCalls())
func (mock *StatefulSetControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1beta2a.StatefulSetHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.StatefulSetHandlerFunc
	}
	lockStatefulSetControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockStatefulSetControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *StatefulSetControllerMock) AddHandler(ctx context.Context, name string, handler v1beta2a.StatefulSetHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("StatefulSetControllerMock.AddHandlerFunc: method is nil but StatefulSetController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1beta2a.StatefulSetHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockStatefulSetControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockStatefulSetControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedStatefulSetController.AddHandlerCalls())
func (mock *StatefulSetControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1beta2a.StatefulSetHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1beta2a.StatefulSetHandlerFunc
	}
	lockStatefulSetControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockStatefulSetControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *StatefulSetControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("StatefulSetControllerMock.EnqueueFunc: method is nil but StatefulSetController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockStatefulSetControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockStatefulSetControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedStatefulSetController.EnqueueCalls())
func (mock *StatefulSetControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockStatefulSetControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockStatefulSetControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *StatefulSetControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("StatefulSetControllerMock.GenericFunc: method is nil but StatefulSetController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockStatefulSetControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockStatefulSetControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedStatefulSetController.GenericCalls())
func (mock *StatefulSetControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockStatefulSetControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockStatefulSetControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *StatefulSetControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("StatefulSetControllerMock.InformerFunc: method is nil but StatefulSetController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockStatefulSetControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockStatefulSetControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedStatefulSetController.InformerCalls())
func (mock *StatefulSetControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockStatefulSetControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockStatefulSetControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *StatefulSetControllerMock) Lister() v1beta2a.StatefulSetLister {
	if mock.ListerFunc == nil {
		panic("StatefulSetControllerMock.ListerFunc: method is nil but StatefulSetController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockStatefulSetControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockStatefulSetControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedStatefulSetController.ListerCalls())
func (mock *StatefulSetControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockStatefulSetControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockStatefulSetControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *StatefulSetControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("StatefulSetControllerMock.StartFunc: method is nil but StatefulSetController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockStatefulSetControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockStatefulSetControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedStatefulSetController.StartCalls())
func (mock *StatefulSetControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockStatefulSetControllerMockStart.RLock()
	calls = mock.calls.Start
	lockStatefulSetControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *StatefulSetControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("StatefulSetControllerMock.SyncFunc: method is nil but StatefulSetController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockStatefulSetControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockStatefulSetControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedStatefulSetController.SyncCalls())
func (mock *StatefulSetControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockStatefulSetControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockStatefulSetControllerMockSync.RUnlock()
	return calls
}

var (
	lockStatefulSetInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockStatefulSetInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockStatefulSetInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockStatefulSetInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockStatefulSetInterfaceMockAddFeatureHandler                sync.RWMutex
	lockStatefulSetInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockStatefulSetInterfaceMockAddHandler                       sync.RWMutex
	lockStatefulSetInterfaceMockAddLifecycle                     sync.RWMutex
	lockStatefulSetInterfaceMockController                       sync.RWMutex
	lockStatefulSetInterfaceMockCreate                           sync.RWMutex
	lockStatefulSetInterfaceMockDelete                           sync.RWMutex
	lockStatefulSetInterfaceMockDeleteCollection                 sync.RWMutex
	lockStatefulSetInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockStatefulSetInterfaceMockGet                              sync.RWMutex
	lockStatefulSetInterfaceMockGetNamespaced                    sync.RWMutex
	lockStatefulSetInterfaceMockList                             sync.RWMutex
	lockStatefulSetInterfaceMockObjectClient                     sync.RWMutex
	lockStatefulSetInterfaceMockUpdate                           sync.RWMutex
	lockStatefulSetInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that StatefulSetInterfaceMock does implement StatefulSetInterface.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.StatefulSetInterface = &StatefulSetInterfaceMock{}

// StatefulSetInterfaceMock is a mock implementation of StatefulSetInterface.
//
//     func TestSomethingThatUsesStatefulSetInterface(t *testing.T) {
//
//         // make and configure a mocked StatefulSetInterface
//         mockedStatefulSetInterface := &StatefulSetInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v1beta2a.StatefulSetHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v1beta2a.StatefulSetLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1beta2a.StatefulSetHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1beta2a.StatefulSetLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.StatefulSetHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta2a.StatefulSetLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1beta2a.StatefulSetHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1beta2a.StatefulSetLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1beta2a.StatefulSetController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1beta2.StatefulSet) (*v1beta2.StatefulSet, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v1beta2.StatefulSet, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v1beta2.StatefulSet, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v1beta2a.StatefulSetList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1beta2.StatefulSet) (*v1beta2.StatefulSet, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedStatefulSetInterface in code that requires StatefulSetInterface
//         // and then make assertions.
//
//     }
type StatefulSetInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v1beta2a.StatefulSetHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v1beta2a.StatefulSetLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1beta2a.StatefulSetHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1beta2a.StatefulSetLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.StatefulSetHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta2a.StatefulSetLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1beta2a.StatefulSetHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1beta2a.StatefulSetLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1beta2a.StatefulSetController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1beta2.StatefulSet) (*v1beta2.StatefulSet, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v1beta2.StatefulSet, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v1beta2.StatefulSet, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v1beta2a.StatefulSetList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1beta2.StatefulSet) (*v1beta2.StatefulSet, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1beta2a.StatefulSetHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.StatefulSetLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1beta2a.StatefulSetHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.StatefulSetLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta2a.StatefulSetHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.StatefulSetLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta2a.StatefulSetHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.StatefulSetLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1beta2.StatefulSet
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1beta2.StatefulSet
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *StatefulSetInterfaceMock) AddClusterScopedFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v1beta2a.StatefulSetHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("StatefulSetInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but StatefulSetInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta2a.StatefulSetHandlerFunc
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockStatefulSetInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockStatefulSetInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(enabled, feat, ctx, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedStatefulSetInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *StatefulSetInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1beta2a.StatefulSetHandlerFunc
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta2a.StatefulSetHandlerFunc
	}
	lockStatefulSetInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockStatefulSetInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *StatefulSetInterfaceMock) AddClusterScopedFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v1beta2a.StatefulSetLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("StatefulSetInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but StatefulSetInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta2a.StatefulSetLifecycle
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockStatefulSetInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockStatefulSetInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(enabled, feat, ctx, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedStatefulSetInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *StatefulSetInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1beta2a.StatefulSetLifecycle
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta2a.StatefulSetLifecycle
	}
	lockStatefulSetInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockStatefulSetInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *StatefulSetInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1beta2a.StatefulSetHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("StatefulSetInterfaceMock.AddClusterScopedHandlerFunc: method is nil but StatefulSetInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta2a.StatefulSetHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockStatefulSetInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockStatefulSetInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedStatefulSetInterface.AddClusterScopedHandlerCalls())
func (mock *StatefulSetInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1beta2a.StatefulSetHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta2a.StatefulSetHandlerFunc
	}
	lockStatefulSetInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockStatefulSetInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *StatefulSetInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1beta2a.StatefulSetLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("StatefulSetInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but StatefulSetInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta2a.StatefulSetLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockStatefulSetInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockStatefulSetInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedStatefulSetInterface.AddClusterScopedLifecycleCalls())
func (mock *StatefulSetInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1beta2a.StatefulSetLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta2a.StatefulSetLifecycle
	}
	lockStatefulSetInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockStatefulSetInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *StatefulSetInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.StatefulSetHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("StatefulSetInterfaceMock.AddFeatureHandlerFunc: method is nil but StatefulSetInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.StatefulSetHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockStatefulSetInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockStatefulSetInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedStatefulSetInterface.AddFeatureHandlerCalls())
func (mock *StatefulSetInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1beta2a.StatefulSetHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.StatefulSetHandlerFunc
	}
	lockStatefulSetInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockStatefulSetInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *StatefulSetInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta2a.StatefulSetLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("StatefulSetInterfaceMock.AddFeatureLifecycleFunc: method is nil but StatefulSetInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.StatefulSetLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockStatefulSetInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockStatefulSetInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedStatefulSetInterface.AddFeatureLifecycleCalls())
func (mock *StatefulSetInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v1beta2a.StatefulSetLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.StatefulSetLifecycle
	}
	lockStatefulSetInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockStatefulSetInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *StatefulSetInterfaceMock) AddHandler(ctx context.Context, name string, sync v1beta2a.StatefulSetHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("StatefulSetInterfaceMock.AddHandlerFunc: method is nil but StatefulSetInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1beta2a.StatefulSetHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockStatefulSetInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockStatefulSetInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedStatefulSetInterface.AddHandlerCalls())
func (mock *StatefulSetInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1beta2a.StatefulSetHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1beta2a.StatefulSetHandlerFunc
	}
	lockStatefulSetInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockStatefulSetInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *StatefulSetInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1beta2a.StatefulSetLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("StatefulSetInterfaceMock.AddLifecycleFunc: method is nil but StatefulSetInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.StatefulSetLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockStatefulSetInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockStatefulSetInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedStatefulSetInterface.AddLifecycleCalls())
func (mock *StatefulSetInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1beta2a.StatefulSetLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.StatefulSetLifecycle
	}
	lockStatefulSetInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockStatefulSetInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *StatefulSetInterfaceMock) Controller() v1beta2a.StatefulSetController {
	if mock.ControllerFunc == nil {
		panic("StatefulSetInterfaceMock.ControllerFunc: method is nil but StatefulSetInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockStatefulSetInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockStatefulSetInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedStatefulSetInterface.ControllerCalls())
func (mock *StatefulSetInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockStatefulSetInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockStatefulSetInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *StatefulSetInterfaceMock) Create(in1 *v1beta2.StatefulSet) (*v1beta2.StatefulSet, error) {
	if mock.CreateFunc == nil {
		panic("StatefulSetInterfaceMock.CreateFunc: method is nil but StatefulSetInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1beta2.StatefulSet
	}{
		In1: in1,
	}
	lockStatefulSetInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockStatefulSetInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedStatefulSetInterface.CreateCalls())
func (mock *StatefulSetInterfaceMock) CreateCalls() []struct {
	In1 *v1beta2.StatefulSet
} {
	var calls []struct {
		In1 *v1beta2.StatefulSet
	}
	lockStatefulSetInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockStatefulSetInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *StatefulSetInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("StatefulSetInterfaceMock.DeleteFunc: method is nil but StatefulSetInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockStatefulSetInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockStatefulSetInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedStatefulSetInterface.DeleteCalls())
func (mock *StatefulSetInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockStatefulSetInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockStatefulSetInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *StatefulSetInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("StatefulSetInterfaceMock.DeleteCollectionFunc: method is nil but StatefulSetInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockStatefulSetInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockStatefulSetInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedStatefulSetInterface.DeleteCollectionCalls())
func (mock *StatefulSetInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockStatefulSetInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockStatefulSetInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *StatefulSetInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("StatefulSetInterfaceMock.DeleteNamespacedFunc: method is nil but StatefulSetInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockStatefulSetInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockStatefulSetInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedStatefulSetInterface.DeleteNamespacedCalls())
func (mock *StatefulSetInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockStatefulSetInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockStatefulSetInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *StatefulSetInterfaceMock) Get(name string, opts v1.GetOptions) (*v1beta2.StatefulSet, error) {
	if mock.GetFunc == nil {
		panic("StatefulSetInterfaceMock.GetFunc: method is nil but StatefulSetInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockStatefulSetInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockStatefulSetInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedStatefulSetInterface.GetCalls())
func (mock *StatefulSetInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockStatefulSetInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockStatefulSetInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *StatefulSetInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v1beta2.StatefulSet, error) {
	if mock.GetNamespacedFunc == nil {
		panic("StatefulSetInterfaceMock.GetNamespacedFunc: method is nil but StatefulSetInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockStatefulSetInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockStatefulSetInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedStatefulSetInterface.GetNamespacedCalls())
func (mock *StatefulSetInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockStatefulSetInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockStatefulSetInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *StatefulSetInterfaceMock) List(opts v1.ListOptions) (*v1beta2a.StatefulSetList, error) {
	if mock.ListFunc == nil {
		panic("StatefulSetInterfaceMock.ListFunc: method is nil but StatefulSetInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockStatefulSetInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockStatefulSetInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedStatefulSetInterface.ListCalls())
func (mock *StatefulSetInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockStatefulSetInterfaceMockList.RLock()
	calls = mock.calls.List
	lockStatefulSetInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *StatefulSetInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("StatefulSetInterfaceMock.ObjectClientFunc: method is nil but StatefulSetInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockStatefulSetInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockStatefulSetInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedStatefulSetInterface.ObjectClientCalls())
func (mock *StatefulSetInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockStatefulSetInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockStatefulSetInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *StatefulSetInterfaceMock) Update(in1 *v1beta2.StatefulSet) (*v1beta2.StatefulSet, error) {
	if mock.UpdateFunc == nil {
		panic("StatefulSetInterfaceMock.UpdateFunc: method is nil but StatefulSetInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1beta2.StatefulSet
	}{
		In1: in1,
	}
	lockStatefulSetInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockStatefulSetInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedStatefulSetInterface.UpdateCalls())
func (mock *StatefulSetInterfaceMock) UpdateCalls() []struct {
	In1 *v1beta2.StatefulSet
} {
	var calls []struct {
		In1 *v1beta2.StatefulSet
	}
	lockStatefulSetInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockStatefulSetInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *StatefulSetInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("StatefulSetInterfaceMock.WatchFunc: method is nil but StatefulSetInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockStatefulSetInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockStatefulSetInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedStatefulSetInterface.WatchCalls())
func (mock *StatefulSetInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockStatefulSetInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockStatefulSetInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockStatefulSetsGetterMockStatefulSets sync.RWMutex
)

// Ensure, that StatefulSetsGetterMock does implement StatefulSetsGetter.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.StatefulSetsGetter = &StatefulSetsGetterMock{}

// StatefulSetsGetterMock is a mock implementation of StatefulSetsGetter.
//
//     func TestSomethingThatUsesStatefulSetsGetter(t *testing.T) {
//
//         // make and configure a mocked StatefulSetsGetter
//         mockedStatefulSetsGetter := &StatefulSetsGetterMock{
//             StatefulSetsFunc: func(namespace string) v1beta2a.StatefulSetInterface {
// 	               panic("mock out the StatefulSets method")
//             },
//         }
//
//         // use mockedStatefulSetsGetter in code that requires StatefulSetsGetter
//         // and then make assertions.
//
//     }
type StatefulSetsGetterMock struct {
	// StatefulSetsFunc mocks the StatefulSets method.
	StatefulSetsFunc func(namespace string) v1beta2a.StatefulSetInterface

	// calls tracks calls to the methods.
	calls struct {
		// StatefulSets holds details about calls to the StatefulSets method.
		StatefulSets []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// StatefulSets calls StatefulSetsFunc.
func (mock *StatefulSetsGetterMock) StatefulSets(namespace string) v1beta2a.StatefulSetInterface {
	if mock.StatefulSetsFunc == nil {
		panic("StatefulSetsGetterMock.StatefulSetsFunc: method is nil but StatefulSetsGetter.StatefulSets was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockStatefulSetsGetterMockStatefulSets.Lock()
	mock.calls.StatefulSets = append(mock.calls.StatefulSets, callInfo)
	lockStatefulSetsGetterMockStatefulSets.Unlock()
	return mock.StatefulSetsFunc(namespace)
}

// StatefulSetsCalls gets all the calls that were made to StatefulSets.
// Check the length with:
//     len(mockedStatefulSetsGetter.StatefulSetsCalls())
func (mock *StatefulSetsGetterMock) StatefulSetsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockStatefulSetsGetterMockStatefulSets.RLock()
	calls = mock.calls.StatefulSets
	lockStatefulSetsGetterMockStatefulSets.RUnlock()
	return calls
}
