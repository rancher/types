// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1beta2a "github.com/rancher/types/apis/apps/v1beta2"
	v1beta2 "k8s.io/api/apps/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockDaemonSetListerMockGet  sync.RWMutex
	lockDaemonSetListerMockList sync.RWMutex
)

// Ensure, that DaemonSetListerMock does implement DaemonSetLister.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.DaemonSetLister = &DaemonSetListerMock{}

// DaemonSetListerMock is a mock implementation of DaemonSetLister.
//
//     func TestSomethingThatUsesDaemonSetLister(t *testing.T) {
//
//         // make and configure a mocked DaemonSetLister
//         mockedDaemonSetLister := &DaemonSetListerMock{
//             GetFunc: func(namespace string, name string) (*v1beta2.DaemonSet, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1beta2.DaemonSet, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedDaemonSetLister in code that requires DaemonSetLister
//         // and then make assertions.
//
//     }
type DaemonSetListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1beta2.DaemonSet, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1beta2.DaemonSet, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *DaemonSetListerMock) Get(namespace string, name string) (*v1beta2.DaemonSet, error) {
	if mock.GetFunc == nil {
		panic("DaemonSetListerMock.GetFunc: method is nil but DaemonSetLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockDaemonSetListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockDaemonSetListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedDaemonSetLister.GetCalls())
func (mock *DaemonSetListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockDaemonSetListerMockGet.RLock()
	calls = mock.calls.Get
	lockDaemonSetListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DaemonSetListerMock) List(namespace string, selector labels.Selector) ([]*v1beta2.DaemonSet, error) {
	if mock.ListFunc == nil {
		panic("DaemonSetListerMock.ListFunc: method is nil but DaemonSetLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockDaemonSetListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockDaemonSetListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedDaemonSetLister.ListCalls())
func (mock *DaemonSetListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockDaemonSetListerMockList.RLock()
	calls = mock.calls.List
	lockDaemonSetListerMockList.RUnlock()
	return calls
}

var (
	lockDaemonSetControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockDaemonSetControllerMockAddClusterScopedHandler        sync.RWMutex
	lockDaemonSetControllerMockAddFeatureHandler              sync.RWMutex
	lockDaemonSetControllerMockAddHandler                     sync.RWMutex
	lockDaemonSetControllerMockEnqueue                        sync.RWMutex
	lockDaemonSetControllerMockGeneric                        sync.RWMutex
	lockDaemonSetControllerMockInformer                       sync.RWMutex
	lockDaemonSetControllerMockLister                         sync.RWMutex
	lockDaemonSetControllerMockStart                          sync.RWMutex
	lockDaemonSetControllerMockSync                           sync.RWMutex
)

// Ensure, that DaemonSetControllerMock does implement DaemonSetController.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.DaemonSetController = &DaemonSetControllerMock{}

// DaemonSetControllerMock is a mock implementation of DaemonSetController.
//
//     func TestSomethingThatUsesDaemonSetController(t *testing.T) {
//
//         // make and configure a mocked DaemonSetController
//         mockedDaemonSetController := &DaemonSetControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v1beta2a.DaemonSetHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1beta2a.DaemonSetHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.DaemonSetHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1beta2a.DaemonSetHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1beta2a.DaemonSetLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedDaemonSetController in code that requires DaemonSetController
//         // and then make assertions.
//
//     }
type DaemonSetControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v1beta2a.DaemonSetHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1beta2a.DaemonSetHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.DaemonSetHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1beta2a.DaemonSetHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1beta2a.DaemonSetLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1beta2a.DaemonSetHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1beta2a.DaemonSetHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta2a.DaemonSetHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1beta2a.DaemonSetHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *DaemonSetControllerMock) AddClusterScopedFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v1beta2a.DaemonSetHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("DaemonSetControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but DaemonSetController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta2a.DaemonSetHandlerFunc
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockDaemonSetControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockDaemonSetControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(enabled, feat, ctx, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedDaemonSetController.AddClusterScopedFeatureHandlerCalls())
func (mock *DaemonSetControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1beta2a.DaemonSetHandlerFunc
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta2a.DaemonSetHandlerFunc
	}
	lockDaemonSetControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockDaemonSetControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *DaemonSetControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1beta2a.DaemonSetHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("DaemonSetControllerMock.AddClusterScopedHandlerFunc: method is nil but DaemonSetController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta2a.DaemonSetHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockDaemonSetControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockDaemonSetControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedDaemonSetController.AddClusterScopedHandlerCalls())
func (mock *DaemonSetControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1beta2a.DaemonSetHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1beta2a.DaemonSetHandlerFunc
	}
	lockDaemonSetControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockDaemonSetControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *DaemonSetControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.DaemonSetHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("DaemonSetControllerMock.AddFeatureHandlerFunc: method is nil but DaemonSetController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.DaemonSetHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockDaemonSetControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockDaemonSetControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedDaemonSetController.AddFeatureHandlerCalls())
func (mock *DaemonSetControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1beta2a.DaemonSetHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.DaemonSetHandlerFunc
	}
	lockDaemonSetControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockDaemonSetControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *DaemonSetControllerMock) AddHandler(ctx context.Context, name string, handler v1beta2a.DaemonSetHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("DaemonSetControllerMock.AddHandlerFunc: method is nil but DaemonSetController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1beta2a.DaemonSetHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockDaemonSetControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockDaemonSetControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedDaemonSetController.AddHandlerCalls())
func (mock *DaemonSetControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1beta2a.DaemonSetHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1beta2a.DaemonSetHandlerFunc
	}
	lockDaemonSetControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockDaemonSetControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *DaemonSetControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("DaemonSetControllerMock.EnqueueFunc: method is nil but DaemonSetController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockDaemonSetControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockDaemonSetControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedDaemonSetController.EnqueueCalls())
func (mock *DaemonSetControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockDaemonSetControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockDaemonSetControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *DaemonSetControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("DaemonSetControllerMock.GenericFunc: method is nil but DaemonSetController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockDaemonSetControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockDaemonSetControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedDaemonSetController.GenericCalls())
func (mock *DaemonSetControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockDaemonSetControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockDaemonSetControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *DaemonSetControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("DaemonSetControllerMock.InformerFunc: method is nil but DaemonSetController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockDaemonSetControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockDaemonSetControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedDaemonSetController.InformerCalls())
func (mock *DaemonSetControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockDaemonSetControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockDaemonSetControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *DaemonSetControllerMock) Lister() v1beta2a.DaemonSetLister {
	if mock.ListerFunc == nil {
		panic("DaemonSetControllerMock.ListerFunc: method is nil but DaemonSetController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockDaemonSetControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockDaemonSetControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedDaemonSetController.ListerCalls())
func (mock *DaemonSetControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockDaemonSetControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockDaemonSetControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *DaemonSetControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("DaemonSetControllerMock.StartFunc: method is nil but DaemonSetController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockDaemonSetControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockDaemonSetControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedDaemonSetController.StartCalls())
func (mock *DaemonSetControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockDaemonSetControllerMockStart.RLock()
	calls = mock.calls.Start
	lockDaemonSetControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *DaemonSetControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("DaemonSetControllerMock.SyncFunc: method is nil but DaemonSetController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockDaemonSetControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockDaemonSetControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedDaemonSetController.SyncCalls())
func (mock *DaemonSetControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockDaemonSetControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockDaemonSetControllerMockSync.RUnlock()
	return calls
}

var (
	lockDaemonSetInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockDaemonSetInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockDaemonSetInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockDaemonSetInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockDaemonSetInterfaceMockAddFeatureHandler                sync.RWMutex
	lockDaemonSetInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockDaemonSetInterfaceMockAddHandler                       sync.RWMutex
	lockDaemonSetInterfaceMockAddLifecycle                     sync.RWMutex
	lockDaemonSetInterfaceMockController                       sync.RWMutex
	lockDaemonSetInterfaceMockCreate                           sync.RWMutex
	lockDaemonSetInterfaceMockDelete                           sync.RWMutex
	lockDaemonSetInterfaceMockDeleteCollection                 sync.RWMutex
	lockDaemonSetInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockDaemonSetInterfaceMockGet                              sync.RWMutex
	lockDaemonSetInterfaceMockGetNamespaced                    sync.RWMutex
	lockDaemonSetInterfaceMockList                             sync.RWMutex
	lockDaemonSetInterfaceMockObjectClient                     sync.RWMutex
	lockDaemonSetInterfaceMockUpdate                           sync.RWMutex
	lockDaemonSetInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that DaemonSetInterfaceMock does implement DaemonSetInterface.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.DaemonSetInterface = &DaemonSetInterfaceMock{}

// DaemonSetInterfaceMock is a mock implementation of DaemonSetInterface.
//
//     func TestSomethingThatUsesDaemonSetInterface(t *testing.T) {
//
//         // make and configure a mocked DaemonSetInterface
//         mockedDaemonSetInterface := &DaemonSetInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v1beta2a.DaemonSetHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v1beta2a.DaemonSetLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1beta2a.DaemonSetHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1beta2a.DaemonSetLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.DaemonSetHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta2a.DaemonSetLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1beta2a.DaemonSetHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1beta2a.DaemonSetLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1beta2a.DaemonSetController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v1beta2.DaemonSet, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v1beta2.DaemonSet, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v1beta2a.DaemonSetList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedDaemonSetInterface in code that requires DaemonSetInterface
//         // and then make assertions.
//
//     }
type DaemonSetInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v1beta2a.DaemonSetHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v1beta2a.DaemonSetLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1beta2a.DaemonSetHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1beta2a.DaemonSetLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.DaemonSetHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta2a.DaemonSetLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1beta2a.DaemonSetHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1beta2a.DaemonSetLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1beta2a.DaemonSetController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v1beta2.DaemonSet, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v1beta2.DaemonSet, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v1beta2a.DaemonSetList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1beta2a.DaemonSetHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.DaemonSetLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1beta2a.DaemonSetHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.DaemonSetLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta2a.DaemonSetHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.DaemonSetLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta2a.DaemonSetHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1beta2a.DaemonSetLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1beta2.DaemonSet
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1beta2.DaemonSet
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *DaemonSetInterfaceMock) AddClusterScopedFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v1beta2a.DaemonSetHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("DaemonSetInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but DaemonSetInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta2a.DaemonSetHandlerFunc
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockDaemonSetInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockDaemonSetInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(enabled, feat, ctx, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedDaemonSetInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *DaemonSetInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1beta2a.DaemonSetHandlerFunc
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta2a.DaemonSetHandlerFunc
	}
	lockDaemonSetInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockDaemonSetInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *DaemonSetInterfaceMock) AddClusterScopedFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v1beta2a.DaemonSetLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("DaemonSetInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but DaemonSetInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta2a.DaemonSetLifecycle
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockDaemonSetInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockDaemonSetInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(enabled, feat, ctx, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedDaemonSetInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *DaemonSetInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1beta2a.DaemonSetLifecycle
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta2a.DaemonSetLifecycle
	}
	lockDaemonSetInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockDaemonSetInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *DaemonSetInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1beta2a.DaemonSetHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("DaemonSetInterfaceMock.AddClusterScopedHandlerFunc: method is nil but DaemonSetInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta2a.DaemonSetHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockDaemonSetInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockDaemonSetInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedDaemonSetInterface.AddClusterScopedHandlerCalls())
func (mock *DaemonSetInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1beta2a.DaemonSetHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1beta2a.DaemonSetHandlerFunc
	}
	lockDaemonSetInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockDaemonSetInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *DaemonSetInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1beta2a.DaemonSetLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("DaemonSetInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but DaemonSetInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta2a.DaemonSetLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockDaemonSetInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockDaemonSetInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedDaemonSetInterface.AddClusterScopedLifecycleCalls())
func (mock *DaemonSetInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1beta2a.DaemonSetLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1beta2a.DaemonSetLifecycle
	}
	lockDaemonSetInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockDaemonSetInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *DaemonSetInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1beta2a.DaemonSetHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("DaemonSetInterfaceMock.AddFeatureHandlerFunc: method is nil but DaemonSetInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.DaemonSetHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockDaemonSetInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockDaemonSetInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedDaemonSetInterface.AddFeatureHandlerCalls())
func (mock *DaemonSetInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1beta2a.DaemonSetHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1beta2a.DaemonSetHandlerFunc
	}
	lockDaemonSetInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockDaemonSetInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *DaemonSetInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1beta2a.DaemonSetLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("DaemonSetInterfaceMock.AddFeatureLifecycleFunc: method is nil but DaemonSetInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.DaemonSetLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockDaemonSetInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockDaemonSetInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedDaemonSetInterface.AddFeatureLifecycleCalls())
func (mock *DaemonSetInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v1beta2a.DaemonSetLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.DaemonSetLifecycle
	}
	lockDaemonSetInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockDaemonSetInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *DaemonSetInterfaceMock) AddHandler(ctx context.Context, name string, sync v1beta2a.DaemonSetHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("DaemonSetInterfaceMock.AddHandlerFunc: method is nil but DaemonSetInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1beta2a.DaemonSetHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockDaemonSetInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockDaemonSetInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedDaemonSetInterface.AddHandlerCalls())
func (mock *DaemonSetInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1beta2a.DaemonSetHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1beta2a.DaemonSetHandlerFunc
	}
	lockDaemonSetInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockDaemonSetInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *DaemonSetInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1beta2a.DaemonSetLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("DaemonSetInterfaceMock.AddLifecycleFunc: method is nil but DaemonSetInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.DaemonSetLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockDaemonSetInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockDaemonSetInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedDaemonSetInterface.AddLifecycleCalls())
func (mock *DaemonSetInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1beta2a.DaemonSetLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1beta2a.DaemonSetLifecycle
	}
	lockDaemonSetInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockDaemonSetInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *DaemonSetInterfaceMock) Controller() v1beta2a.DaemonSetController {
	if mock.ControllerFunc == nil {
		panic("DaemonSetInterfaceMock.ControllerFunc: method is nil but DaemonSetInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockDaemonSetInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockDaemonSetInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedDaemonSetInterface.ControllerCalls())
func (mock *DaemonSetInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockDaemonSetInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockDaemonSetInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *DaemonSetInterfaceMock) Create(in1 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, error) {
	if mock.CreateFunc == nil {
		panic("DaemonSetInterfaceMock.CreateFunc: method is nil but DaemonSetInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1beta2.DaemonSet
	}{
		In1: in1,
	}
	lockDaemonSetInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockDaemonSetInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedDaemonSetInterface.CreateCalls())
func (mock *DaemonSetInterfaceMock) CreateCalls() []struct {
	In1 *v1beta2.DaemonSet
} {
	var calls []struct {
		In1 *v1beta2.DaemonSet
	}
	lockDaemonSetInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockDaemonSetInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *DaemonSetInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("DaemonSetInterfaceMock.DeleteFunc: method is nil but DaemonSetInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockDaemonSetInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockDaemonSetInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedDaemonSetInterface.DeleteCalls())
func (mock *DaemonSetInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockDaemonSetInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockDaemonSetInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *DaemonSetInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("DaemonSetInterfaceMock.DeleteCollectionFunc: method is nil but DaemonSetInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockDaemonSetInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockDaemonSetInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedDaemonSetInterface.DeleteCollectionCalls())
func (mock *DaemonSetInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockDaemonSetInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockDaemonSetInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *DaemonSetInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("DaemonSetInterfaceMock.DeleteNamespacedFunc: method is nil but DaemonSetInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockDaemonSetInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockDaemonSetInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedDaemonSetInterface.DeleteNamespacedCalls())
func (mock *DaemonSetInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockDaemonSetInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockDaemonSetInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *DaemonSetInterfaceMock) Get(name string, opts v1.GetOptions) (*v1beta2.DaemonSet, error) {
	if mock.GetFunc == nil {
		panic("DaemonSetInterfaceMock.GetFunc: method is nil but DaemonSetInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockDaemonSetInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockDaemonSetInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedDaemonSetInterface.GetCalls())
func (mock *DaemonSetInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockDaemonSetInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockDaemonSetInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *DaemonSetInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v1beta2.DaemonSet, error) {
	if mock.GetNamespacedFunc == nil {
		panic("DaemonSetInterfaceMock.GetNamespacedFunc: method is nil but DaemonSetInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockDaemonSetInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockDaemonSetInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedDaemonSetInterface.GetNamespacedCalls())
func (mock *DaemonSetInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockDaemonSetInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockDaemonSetInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DaemonSetInterfaceMock) List(opts v1.ListOptions) (*v1beta2a.DaemonSetList, error) {
	if mock.ListFunc == nil {
		panic("DaemonSetInterfaceMock.ListFunc: method is nil but DaemonSetInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockDaemonSetInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockDaemonSetInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedDaemonSetInterface.ListCalls())
func (mock *DaemonSetInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockDaemonSetInterfaceMockList.RLock()
	calls = mock.calls.List
	lockDaemonSetInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *DaemonSetInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("DaemonSetInterfaceMock.ObjectClientFunc: method is nil but DaemonSetInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockDaemonSetInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockDaemonSetInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedDaemonSetInterface.ObjectClientCalls())
func (mock *DaemonSetInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockDaemonSetInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockDaemonSetInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *DaemonSetInterfaceMock) Update(in1 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, error) {
	if mock.UpdateFunc == nil {
		panic("DaemonSetInterfaceMock.UpdateFunc: method is nil but DaemonSetInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1beta2.DaemonSet
	}{
		In1: in1,
	}
	lockDaemonSetInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockDaemonSetInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedDaemonSetInterface.UpdateCalls())
func (mock *DaemonSetInterfaceMock) UpdateCalls() []struct {
	In1 *v1beta2.DaemonSet
} {
	var calls []struct {
		In1 *v1beta2.DaemonSet
	}
	lockDaemonSetInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockDaemonSetInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *DaemonSetInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("DaemonSetInterfaceMock.WatchFunc: method is nil but DaemonSetInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockDaemonSetInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockDaemonSetInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedDaemonSetInterface.WatchCalls())
func (mock *DaemonSetInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockDaemonSetInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockDaemonSetInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockDaemonSetsGetterMockDaemonSets sync.RWMutex
)

// Ensure, that DaemonSetsGetterMock does implement DaemonSetsGetter.
// If this is not the case, regenerate this file with moq.
var _ v1beta2a.DaemonSetsGetter = &DaemonSetsGetterMock{}

// DaemonSetsGetterMock is a mock implementation of DaemonSetsGetter.
//
//     func TestSomethingThatUsesDaemonSetsGetter(t *testing.T) {
//
//         // make and configure a mocked DaemonSetsGetter
//         mockedDaemonSetsGetter := &DaemonSetsGetterMock{
//             DaemonSetsFunc: func(namespace string) v1beta2a.DaemonSetInterface {
// 	               panic("mock out the DaemonSets method")
//             },
//         }
//
//         // use mockedDaemonSetsGetter in code that requires DaemonSetsGetter
//         // and then make assertions.
//
//     }
type DaemonSetsGetterMock struct {
	// DaemonSetsFunc mocks the DaemonSets method.
	DaemonSetsFunc func(namespace string) v1beta2a.DaemonSetInterface

	// calls tracks calls to the methods.
	calls struct {
		// DaemonSets holds details about calls to the DaemonSets method.
		DaemonSets []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// DaemonSets calls DaemonSetsFunc.
func (mock *DaemonSetsGetterMock) DaemonSets(namespace string) v1beta2a.DaemonSetInterface {
	if mock.DaemonSetsFunc == nil {
		panic("DaemonSetsGetterMock.DaemonSetsFunc: method is nil but DaemonSetsGetter.DaemonSets was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockDaemonSetsGetterMockDaemonSets.Lock()
	mock.calls.DaemonSets = append(mock.calls.DaemonSets, callInfo)
	lockDaemonSetsGetterMockDaemonSets.Unlock()
	return mock.DaemonSetsFunc(namespace)
}

// DaemonSetsCalls gets all the calls that were made to DaemonSets.
// Check the length with:
//     len(mockedDaemonSetsGetter.DaemonSetsCalls())
func (mock *DaemonSetsGetterMock) DaemonSetsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockDaemonSetsGetterMockDaemonSets.RLock()
	calls = mock.calls.DaemonSets
	lockDaemonSetsGetterMockDaemonSets.RUnlock()
	return calls
}
