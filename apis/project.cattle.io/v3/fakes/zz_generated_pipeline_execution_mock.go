// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/project.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockPipelineExecutionListerMockGet  sync.RWMutex
	lockPipelineExecutionListerMockList sync.RWMutex
)

// Ensure, that PipelineExecutionListerMock does implement PipelineExecutionLister.
// If this is not the case, regenerate this file with moq.
var _ v3.PipelineExecutionLister = &PipelineExecutionListerMock{}

// PipelineExecutionListerMock is a mock implementation of PipelineExecutionLister.
//
//     func TestSomethingThatUsesPipelineExecutionLister(t *testing.T) {
//
//         // make and configure a mocked PipelineExecutionLister
//         mockedPipelineExecutionLister := &PipelineExecutionListerMock{
//             GetFunc: func(namespace string, name string) (*v3.PipelineExecution, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.PipelineExecution, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedPipelineExecutionLister in code that requires PipelineExecutionLister
//         // and then make assertions.
//
//     }
type PipelineExecutionListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.PipelineExecution, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.PipelineExecution, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *PipelineExecutionListerMock) Get(namespace string, name string) (*v3.PipelineExecution, error) {
	if mock.GetFunc == nil {
		panic("PipelineExecutionListerMock.GetFunc: method is nil but PipelineExecutionLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockPipelineExecutionListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockPipelineExecutionListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedPipelineExecutionLister.GetCalls())
func (mock *PipelineExecutionListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockPipelineExecutionListerMockGet.RLock()
	calls = mock.calls.Get
	lockPipelineExecutionListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *PipelineExecutionListerMock) List(namespace string, selector labels.Selector) ([]*v3.PipelineExecution, error) {
	if mock.ListFunc == nil {
		panic("PipelineExecutionListerMock.ListFunc: method is nil but PipelineExecutionLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockPipelineExecutionListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockPipelineExecutionListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedPipelineExecutionLister.ListCalls())
func (mock *PipelineExecutionListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockPipelineExecutionListerMockList.RLock()
	calls = mock.calls.List
	lockPipelineExecutionListerMockList.RUnlock()
	return calls
}

var (
	lockPipelineExecutionControllerMockAddClusterScopedHandler sync.RWMutex
	lockPipelineExecutionControllerMockAddFeatureHandler       sync.RWMutex
	lockPipelineExecutionControllerMockAddHandler              sync.RWMutex
	lockPipelineExecutionControllerMockEnqueue                 sync.RWMutex
	lockPipelineExecutionControllerMockGeneric                 sync.RWMutex
	lockPipelineExecutionControllerMockInformer                sync.RWMutex
	lockPipelineExecutionControllerMockLister                  sync.RWMutex
	lockPipelineExecutionControllerMockStart                   sync.RWMutex
	lockPipelineExecutionControllerMockSync                    sync.RWMutex
)

// Ensure, that PipelineExecutionControllerMock does implement PipelineExecutionController.
// If this is not the case, regenerate this file with moq.
var _ v3.PipelineExecutionController = &PipelineExecutionControllerMock{}

// PipelineExecutionControllerMock is a mock implementation of PipelineExecutionController.
//
//     func TestSomethingThatUsesPipelineExecutionController(t *testing.T) {
//
//         // make and configure a mocked PipelineExecutionController
//         mockedPipelineExecutionController := &PipelineExecutionControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.PipelineExecutionHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.PipelineExecutionHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.PipelineExecutionHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.PipelineExecutionLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedPipelineExecutionController in code that requires PipelineExecutionController
//         // and then make assertions.
//
//     }
type PipelineExecutionControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.PipelineExecutionHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.PipelineExecutionHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.PipelineExecutionHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.PipelineExecutionLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.PipelineExecutionHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.PipelineExecutionHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.PipelineExecutionHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *PipelineExecutionControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.PipelineExecutionHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("PipelineExecutionControllerMock.AddClusterScopedHandlerFunc: method is nil but PipelineExecutionController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.PipelineExecutionHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockPipelineExecutionControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockPipelineExecutionControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedPipelineExecutionController.AddClusterScopedHandlerCalls())
func (mock *PipelineExecutionControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.PipelineExecutionHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.PipelineExecutionHandlerFunc
	}
	lockPipelineExecutionControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockPipelineExecutionControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *PipelineExecutionControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.PipelineExecutionHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("PipelineExecutionControllerMock.AddFeatureHandlerFunc: method is nil but PipelineExecutionController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.PipelineExecutionHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockPipelineExecutionControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockPipelineExecutionControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedPipelineExecutionController.AddFeatureHandlerCalls())
func (mock *PipelineExecutionControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.PipelineExecutionHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.PipelineExecutionHandlerFunc
	}
	lockPipelineExecutionControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockPipelineExecutionControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *PipelineExecutionControllerMock) AddHandler(ctx context.Context, name string, handler v3.PipelineExecutionHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("PipelineExecutionControllerMock.AddHandlerFunc: method is nil but PipelineExecutionController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.PipelineExecutionHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockPipelineExecutionControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockPipelineExecutionControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedPipelineExecutionController.AddHandlerCalls())
func (mock *PipelineExecutionControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.PipelineExecutionHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.PipelineExecutionHandlerFunc
	}
	lockPipelineExecutionControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockPipelineExecutionControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *PipelineExecutionControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("PipelineExecutionControllerMock.EnqueueFunc: method is nil but PipelineExecutionController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockPipelineExecutionControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockPipelineExecutionControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedPipelineExecutionController.EnqueueCalls())
func (mock *PipelineExecutionControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockPipelineExecutionControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockPipelineExecutionControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *PipelineExecutionControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("PipelineExecutionControllerMock.GenericFunc: method is nil but PipelineExecutionController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockPipelineExecutionControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockPipelineExecutionControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedPipelineExecutionController.GenericCalls())
func (mock *PipelineExecutionControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockPipelineExecutionControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockPipelineExecutionControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *PipelineExecutionControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("PipelineExecutionControllerMock.InformerFunc: method is nil but PipelineExecutionController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockPipelineExecutionControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockPipelineExecutionControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedPipelineExecutionController.InformerCalls())
func (mock *PipelineExecutionControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockPipelineExecutionControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockPipelineExecutionControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *PipelineExecutionControllerMock) Lister() v3.PipelineExecutionLister {
	if mock.ListerFunc == nil {
		panic("PipelineExecutionControllerMock.ListerFunc: method is nil but PipelineExecutionController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockPipelineExecutionControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockPipelineExecutionControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedPipelineExecutionController.ListerCalls())
func (mock *PipelineExecutionControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockPipelineExecutionControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockPipelineExecutionControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *PipelineExecutionControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("PipelineExecutionControllerMock.StartFunc: method is nil but PipelineExecutionController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockPipelineExecutionControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockPipelineExecutionControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedPipelineExecutionController.StartCalls())
func (mock *PipelineExecutionControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockPipelineExecutionControllerMockStart.RLock()
	calls = mock.calls.Start
	lockPipelineExecutionControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *PipelineExecutionControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("PipelineExecutionControllerMock.SyncFunc: method is nil but PipelineExecutionController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockPipelineExecutionControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockPipelineExecutionControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedPipelineExecutionController.SyncCalls())
func (mock *PipelineExecutionControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockPipelineExecutionControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockPipelineExecutionControllerMockSync.RUnlock()
	return calls
}

var (
	lockPipelineExecutionInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockPipelineExecutionInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockPipelineExecutionInterfaceMockAddFeatureHandler         sync.RWMutex
	lockPipelineExecutionInterfaceMockAddFeatureLifecycle       sync.RWMutex
	lockPipelineExecutionInterfaceMockAddHandler                sync.RWMutex
	lockPipelineExecutionInterfaceMockAddLifecycle              sync.RWMutex
	lockPipelineExecutionInterfaceMockController                sync.RWMutex
	lockPipelineExecutionInterfaceMockCreate                    sync.RWMutex
	lockPipelineExecutionInterfaceMockDelete                    sync.RWMutex
	lockPipelineExecutionInterfaceMockDeleteCollection          sync.RWMutex
	lockPipelineExecutionInterfaceMockDeleteNamespaced          sync.RWMutex
	lockPipelineExecutionInterfaceMockGet                       sync.RWMutex
	lockPipelineExecutionInterfaceMockGetNamespaced             sync.RWMutex
	lockPipelineExecutionInterfaceMockList                      sync.RWMutex
	lockPipelineExecutionInterfaceMockObjectClient              sync.RWMutex
	lockPipelineExecutionInterfaceMockUpdate                    sync.RWMutex
	lockPipelineExecutionInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that PipelineExecutionInterfaceMock does implement PipelineExecutionInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.PipelineExecutionInterface = &PipelineExecutionInterfaceMock{}

// PipelineExecutionInterfaceMock is a mock implementation of PipelineExecutionInterface.
//
//     func TestSomethingThatUsesPipelineExecutionInterface(t *testing.T) {
//
//         // make and configure a mocked PipelineExecutionInterface
//         mockedPipelineExecutionInterface := &PipelineExecutionInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.PipelineExecutionHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.PipelineExecutionLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.PipelineExecutionHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.PipelineExecutionLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.PipelineExecutionHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.PipelineExecutionLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.PipelineExecutionController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.PipelineExecution) (*v3.PipelineExecution, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.PipelineExecution, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.PipelineExecution, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.PipelineExecutionList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.PipelineExecution) (*v3.PipelineExecution, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedPipelineExecutionInterface in code that requires PipelineExecutionInterface
//         // and then make assertions.
//
//     }
type PipelineExecutionInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.PipelineExecutionHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.PipelineExecutionLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.PipelineExecutionHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.PipelineExecutionLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.PipelineExecutionHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.PipelineExecutionLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.PipelineExecutionController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.PipelineExecution) (*v3.PipelineExecution, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.PipelineExecution, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.PipelineExecution, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.PipelineExecutionList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.PipelineExecution) (*v3.PipelineExecution, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.PipelineExecutionHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.PipelineExecutionLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.PipelineExecutionHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.PipelineExecutionLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.PipelineExecutionHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.PipelineExecutionLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.PipelineExecution
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.PipelineExecution
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *PipelineExecutionInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.PipelineExecutionHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("PipelineExecutionInterfaceMock.AddClusterScopedHandlerFunc: method is nil but PipelineExecutionInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.PipelineExecutionHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockPipelineExecutionInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockPipelineExecutionInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedPipelineExecutionInterface.AddClusterScopedHandlerCalls())
func (mock *PipelineExecutionInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.PipelineExecutionHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.PipelineExecutionHandlerFunc
	}
	lockPipelineExecutionInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockPipelineExecutionInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *PipelineExecutionInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.PipelineExecutionLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("PipelineExecutionInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but PipelineExecutionInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.PipelineExecutionLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockPipelineExecutionInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockPipelineExecutionInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedPipelineExecutionInterface.AddClusterScopedLifecycleCalls())
func (mock *PipelineExecutionInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.PipelineExecutionLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.PipelineExecutionLifecycle
	}
	lockPipelineExecutionInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockPipelineExecutionInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *PipelineExecutionInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.PipelineExecutionHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("PipelineExecutionInterfaceMock.AddFeatureHandlerFunc: method is nil but PipelineExecutionInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.PipelineExecutionHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockPipelineExecutionInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockPipelineExecutionInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedPipelineExecutionInterface.AddFeatureHandlerCalls())
func (mock *PipelineExecutionInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.PipelineExecutionHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.PipelineExecutionHandlerFunc
	}
	lockPipelineExecutionInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockPipelineExecutionInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *PipelineExecutionInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.PipelineExecutionLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("PipelineExecutionInterfaceMock.AddFeatureLifecycleFunc: method is nil but PipelineExecutionInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.PipelineExecutionLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockPipelineExecutionInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockPipelineExecutionInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedPipelineExecutionInterface.AddFeatureLifecycleCalls())
func (mock *PipelineExecutionInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v3.PipelineExecutionLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.PipelineExecutionLifecycle
	}
	lockPipelineExecutionInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockPipelineExecutionInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *PipelineExecutionInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.PipelineExecutionHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("PipelineExecutionInterfaceMock.AddHandlerFunc: method is nil but PipelineExecutionInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.PipelineExecutionHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockPipelineExecutionInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockPipelineExecutionInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedPipelineExecutionInterface.AddHandlerCalls())
func (mock *PipelineExecutionInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.PipelineExecutionHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.PipelineExecutionHandlerFunc
	}
	lockPipelineExecutionInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockPipelineExecutionInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *PipelineExecutionInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.PipelineExecutionLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("PipelineExecutionInterfaceMock.AddLifecycleFunc: method is nil but PipelineExecutionInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.PipelineExecutionLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockPipelineExecutionInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockPipelineExecutionInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedPipelineExecutionInterface.AddLifecycleCalls())
func (mock *PipelineExecutionInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.PipelineExecutionLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.PipelineExecutionLifecycle
	}
	lockPipelineExecutionInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockPipelineExecutionInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *PipelineExecutionInterfaceMock) Controller() v3.PipelineExecutionController {
	if mock.ControllerFunc == nil {
		panic("PipelineExecutionInterfaceMock.ControllerFunc: method is nil but PipelineExecutionInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockPipelineExecutionInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockPipelineExecutionInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedPipelineExecutionInterface.ControllerCalls())
func (mock *PipelineExecutionInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockPipelineExecutionInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockPipelineExecutionInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *PipelineExecutionInterfaceMock) Create(in1 *v3.PipelineExecution) (*v3.PipelineExecution, error) {
	if mock.CreateFunc == nil {
		panic("PipelineExecutionInterfaceMock.CreateFunc: method is nil but PipelineExecutionInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.PipelineExecution
	}{
		In1: in1,
	}
	lockPipelineExecutionInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockPipelineExecutionInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedPipelineExecutionInterface.CreateCalls())
func (mock *PipelineExecutionInterfaceMock) CreateCalls() []struct {
	In1 *v3.PipelineExecution
} {
	var calls []struct {
		In1 *v3.PipelineExecution
	}
	lockPipelineExecutionInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockPipelineExecutionInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *PipelineExecutionInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("PipelineExecutionInterfaceMock.DeleteFunc: method is nil but PipelineExecutionInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockPipelineExecutionInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockPipelineExecutionInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedPipelineExecutionInterface.DeleteCalls())
func (mock *PipelineExecutionInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockPipelineExecutionInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockPipelineExecutionInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *PipelineExecutionInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("PipelineExecutionInterfaceMock.DeleteCollectionFunc: method is nil but PipelineExecutionInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockPipelineExecutionInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockPipelineExecutionInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedPipelineExecutionInterface.DeleteCollectionCalls())
func (mock *PipelineExecutionInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockPipelineExecutionInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockPipelineExecutionInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *PipelineExecutionInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("PipelineExecutionInterfaceMock.DeleteNamespacedFunc: method is nil but PipelineExecutionInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockPipelineExecutionInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockPipelineExecutionInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedPipelineExecutionInterface.DeleteNamespacedCalls())
func (mock *PipelineExecutionInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockPipelineExecutionInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockPipelineExecutionInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *PipelineExecutionInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.PipelineExecution, error) {
	if mock.GetFunc == nil {
		panic("PipelineExecutionInterfaceMock.GetFunc: method is nil but PipelineExecutionInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockPipelineExecutionInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockPipelineExecutionInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedPipelineExecutionInterface.GetCalls())
func (mock *PipelineExecutionInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockPipelineExecutionInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockPipelineExecutionInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *PipelineExecutionInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.PipelineExecution, error) {
	if mock.GetNamespacedFunc == nil {
		panic("PipelineExecutionInterfaceMock.GetNamespacedFunc: method is nil but PipelineExecutionInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockPipelineExecutionInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockPipelineExecutionInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedPipelineExecutionInterface.GetNamespacedCalls())
func (mock *PipelineExecutionInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockPipelineExecutionInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockPipelineExecutionInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *PipelineExecutionInterfaceMock) List(opts v1.ListOptions) (*v3.PipelineExecutionList, error) {
	if mock.ListFunc == nil {
		panic("PipelineExecutionInterfaceMock.ListFunc: method is nil but PipelineExecutionInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockPipelineExecutionInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockPipelineExecutionInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedPipelineExecutionInterface.ListCalls())
func (mock *PipelineExecutionInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockPipelineExecutionInterfaceMockList.RLock()
	calls = mock.calls.List
	lockPipelineExecutionInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *PipelineExecutionInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("PipelineExecutionInterfaceMock.ObjectClientFunc: method is nil but PipelineExecutionInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockPipelineExecutionInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockPipelineExecutionInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedPipelineExecutionInterface.ObjectClientCalls())
func (mock *PipelineExecutionInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockPipelineExecutionInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockPipelineExecutionInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *PipelineExecutionInterfaceMock) Update(in1 *v3.PipelineExecution) (*v3.PipelineExecution, error) {
	if mock.UpdateFunc == nil {
		panic("PipelineExecutionInterfaceMock.UpdateFunc: method is nil but PipelineExecutionInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.PipelineExecution
	}{
		In1: in1,
	}
	lockPipelineExecutionInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockPipelineExecutionInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedPipelineExecutionInterface.UpdateCalls())
func (mock *PipelineExecutionInterfaceMock) UpdateCalls() []struct {
	In1 *v3.PipelineExecution
} {
	var calls []struct {
		In1 *v3.PipelineExecution
	}
	lockPipelineExecutionInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockPipelineExecutionInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *PipelineExecutionInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("PipelineExecutionInterfaceMock.WatchFunc: method is nil but PipelineExecutionInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockPipelineExecutionInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockPipelineExecutionInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedPipelineExecutionInterface.WatchCalls())
func (mock *PipelineExecutionInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockPipelineExecutionInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockPipelineExecutionInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockPipelineExecutionsGetterMockPipelineExecutions sync.RWMutex
)

// Ensure, that PipelineExecutionsGetterMock does implement PipelineExecutionsGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.PipelineExecutionsGetter = &PipelineExecutionsGetterMock{}

// PipelineExecutionsGetterMock is a mock implementation of PipelineExecutionsGetter.
//
//     func TestSomethingThatUsesPipelineExecutionsGetter(t *testing.T) {
//
//         // make and configure a mocked PipelineExecutionsGetter
//         mockedPipelineExecutionsGetter := &PipelineExecutionsGetterMock{
//             PipelineExecutionsFunc: func(namespace string) v3.PipelineExecutionInterface {
// 	               panic("mock out the PipelineExecutions method")
//             },
//         }
//
//         // use mockedPipelineExecutionsGetter in code that requires PipelineExecutionsGetter
//         // and then make assertions.
//
//     }
type PipelineExecutionsGetterMock struct {
	// PipelineExecutionsFunc mocks the PipelineExecutions method.
	PipelineExecutionsFunc func(namespace string) v3.PipelineExecutionInterface

	// calls tracks calls to the methods.
	calls struct {
		// PipelineExecutions holds details about calls to the PipelineExecutions method.
		PipelineExecutions []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// PipelineExecutions calls PipelineExecutionsFunc.
func (mock *PipelineExecutionsGetterMock) PipelineExecutions(namespace string) v3.PipelineExecutionInterface {
	if mock.PipelineExecutionsFunc == nil {
		panic("PipelineExecutionsGetterMock.PipelineExecutionsFunc: method is nil but PipelineExecutionsGetter.PipelineExecutions was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockPipelineExecutionsGetterMockPipelineExecutions.Lock()
	mock.calls.PipelineExecutions = append(mock.calls.PipelineExecutions, callInfo)
	lockPipelineExecutionsGetterMockPipelineExecutions.Unlock()
	return mock.PipelineExecutionsFunc(namespace)
}

// PipelineExecutionsCalls gets all the calls that were made to PipelineExecutions.
// Check the length with:
//     len(mockedPipelineExecutionsGetter.PipelineExecutionsCalls())
func (mock *PipelineExecutionsGetterMock) PipelineExecutionsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockPipelineExecutionsGetterMockPipelineExecutions.RLock()
	calls = mock.calls.PipelineExecutions
	lockPipelineExecutionsGetterMockPipelineExecutions.RUnlock()
	return calls
}
