// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/project.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockDockerCredentialListerMockGet  sync.RWMutex
	lockDockerCredentialListerMockList sync.RWMutex
)

// Ensure, that DockerCredentialListerMock does implement DockerCredentialLister.
// If this is not the case, regenerate this file with moq.
var _ v3.DockerCredentialLister = &DockerCredentialListerMock{}

// DockerCredentialListerMock is a mock implementation of DockerCredentialLister.
//
//     func TestSomethingThatUsesDockerCredentialLister(t *testing.T) {
//
//         // make and configure a mocked DockerCredentialLister
//         mockedDockerCredentialLister := &DockerCredentialListerMock{
//             GetFunc: func(namespace string, name string) (*v3.DockerCredential, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.DockerCredential, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedDockerCredentialLister in code that requires DockerCredentialLister
//         // and then make assertions.
//
//     }
type DockerCredentialListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.DockerCredential, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.DockerCredential, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *DockerCredentialListerMock) Get(namespace string, name string) (*v3.DockerCredential, error) {
	if mock.GetFunc == nil {
		panic("DockerCredentialListerMock.GetFunc: method is nil but DockerCredentialLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockDockerCredentialListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockDockerCredentialListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedDockerCredentialLister.GetCalls())
func (mock *DockerCredentialListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockDockerCredentialListerMockGet.RLock()
	calls = mock.calls.Get
	lockDockerCredentialListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DockerCredentialListerMock) List(namespace string, selector labels.Selector) ([]*v3.DockerCredential, error) {
	if mock.ListFunc == nil {
		panic("DockerCredentialListerMock.ListFunc: method is nil but DockerCredentialLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockDockerCredentialListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockDockerCredentialListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedDockerCredentialLister.ListCalls())
func (mock *DockerCredentialListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockDockerCredentialListerMockList.RLock()
	calls = mock.calls.List
	lockDockerCredentialListerMockList.RUnlock()
	return calls
}

var (
	lockDockerCredentialControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockDockerCredentialControllerMockAddClusterScopedHandler        sync.RWMutex
	lockDockerCredentialControllerMockAddFeatureHandler              sync.RWMutex
	lockDockerCredentialControllerMockAddHandler                     sync.RWMutex
	lockDockerCredentialControllerMockEnqueue                        sync.RWMutex
	lockDockerCredentialControllerMockGeneric                        sync.RWMutex
	lockDockerCredentialControllerMockInformer                       sync.RWMutex
	lockDockerCredentialControllerMockLister                         sync.RWMutex
	lockDockerCredentialControllerMockStart                          sync.RWMutex
	lockDockerCredentialControllerMockSync                           sync.RWMutex
)

// Ensure, that DockerCredentialControllerMock does implement DockerCredentialController.
// If this is not the case, regenerate this file with moq.
var _ v3.DockerCredentialController = &DockerCredentialControllerMock{}

// DockerCredentialControllerMock is a mock implementation of DockerCredentialController.
//
//     func TestSomethingThatUsesDockerCredentialController(t *testing.T) {
//
//         // make and configure a mocked DockerCredentialController
//         mockedDockerCredentialController := &DockerCredentialControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v3.DockerCredentialHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.DockerCredentialHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.DockerCredentialHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.DockerCredentialHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.DockerCredentialLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedDockerCredentialController in code that requires DockerCredentialController
//         // and then make assertions.
//
//     }
type DockerCredentialControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v3.DockerCredentialHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.DockerCredentialHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.DockerCredentialHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.DockerCredentialHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.DockerCredentialLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.DockerCredentialHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.DockerCredentialHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.DockerCredentialHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.DockerCredentialHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *DockerCredentialControllerMock) AddClusterScopedFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v3.DockerCredentialHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("DockerCredentialControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but DockerCredentialController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.DockerCredentialHandlerFunc
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockDockerCredentialControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockDockerCredentialControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(enabled, feat, ctx, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedDockerCredentialController.AddClusterScopedFeatureHandlerCalls())
func (mock *DockerCredentialControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.DockerCredentialHandlerFunc
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.DockerCredentialHandlerFunc
	}
	lockDockerCredentialControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockDockerCredentialControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *DockerCredentialControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.DockerCredentialHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("DockerCredentialControllerMock.AddClusterScopedHandlerFunc: method is nil but DockerCredentialController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.DockerCredentialHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockDockerCredentialControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockDockerCredentialControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedDockerCredentialController.AddClusterScopedHandlerCalls())
func (mock *DockerCredentialControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.DockerCredentialHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.DockerCredentialHandlerFunc
	}
	lockDockerCredentialControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockDockerCredentialControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *DockerCredentialControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.DockerCredentialHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("DockerCredentialControllerMock.AddFeatureHandlerFunc: method is nil but DockerCredentialController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.DockerCredentialHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockDockerCredentialControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockDockerCredentialControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedDockerCredentialController.AddFeatureHandlerCalls())
func (mock *DockerCredentialControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.DockerCredentialHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.DockerCredentialHandlerFunc
	}
	lockDockerCredentialControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockDockerCredentialControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *DockerCredentialControllerMock) AddHandler(ctx context.Context, name string, handler v3.DockerCredentialHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("DockerCredentialControllerMock.AddHandlerFunc: method is nil but DockerCredentialController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.DockerCredentialHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockDockerCredentialControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockDockerCredentialControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedDockerCredentialController.AddHandlerCalls())
func (mock *DockerCredentialControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.DockerCredentialHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.DockerCredentialHandlerFunc
	}
	lockDockerCredentialControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockDockerCredentialControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *DockerCredentialControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("DockerCredentialControllerMock.EnqueueFunc: method is nil but DockerCredentialController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockDockerCredentialControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockDockerCredentialControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedDockerCredentialController.EnqueueCalls())
func (mock *DockerCredentialControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockDockerCredentialControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockDockerCredentialControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *DockerCredentialControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("DockerCredentialControllerMock.GenericFunc: method is nil but DockerCredentialController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockDockerCredentialControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockDockerCredentialControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedDockerCredentialController.GenericCalls())
func (mock *DockerCredentialControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockDockerCredentialControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockDockerCredentialControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *DockerCredentialControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("DockerCredentialControllerMock.InformerFunc: method is nil but DockerCredentialController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockDockerCredentialControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockDockerCredentialControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedDockerCredentialController.InformerCalls())
func (mock *DockerCredentialControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockDockerCredentialControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockDockerCredentialControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *DockerCredentialControllerMock) Lister() v3.DockerCredentialLister {
	if mock.ListerFunc == nil {
		panic("DockerCredentialControllerMock.ListerFunc: method is nil but DockerCredentialController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockDockerCredentialControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockDockerCredentialControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedDockerCredentialController.ListerCalls())
func (mock *DockerCredentialControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockDockerCredentialControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockDockerCredentialControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *DockerCredentialControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("DockerCredentialControllerMock.StartFunc: method is nil but DockerCredentialController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockDockerCredentialControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockDockerCredentialControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedDockerCredentialController.StartCalls())
func (mock *DockerCredentialControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockDockerCredentialControllerMockStart.RLock()
	calls = mock.calls.Start
	lockDockerCredentialControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *DockerCredentialControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("DockerCredentialControllerMock.SyncFunc: method is nil but DockerCredentialController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockDockerCredentialControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockDockerCredentialControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedDockerCredentialController.SyncCalls())
func (mock *DockerCredentialControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockDockerCredentialControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockDockerCredentialControllerMockSync.RUnlock()
	return calls
}

var (
	lockDockerCredentialInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockDockerCredentialInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockDockerCredentialInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockDockerCredentialInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockDockerCredentialInterfaceMockAddFeatureHandler                sync.RWMutex
	lockDockerCredentialInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockDockerCredentialInterfaceMockAddHandler                       sync.RWMutex
	lockDockerCredentialInterfaceMockAddLifecycle                     sync.RWMutex
	lockDockerCredentialInterfaceMockController                       sync.RWMutex
	lockDockerCredentialInterfaceMockCreate                           sync.RWMutex
	lockDockerCredentialInterfaceMockDelete                           sync.RWMutex
	lockDockerCredentialInterfaceMockDeleteCollection                 sync.RWMutex
	lockDockerCredentialInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockDockerCredentialInterfaceMockGet                              sync.RWMutex
	lockDockerCredentialInterfaceMockGetNamespaced                    sync.RWMutex
	lockDockerCredentialInterfaceMockList                             sync.RWMutex
	lockDockerCredentialInterfaceMockObjectClient                     sync.RWMutex
	lockDockerCredentialInterfaceMockUpdate                           sync.RWMutex
	lockDockerCredentialInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that DockerCredentialInterfaceMock does implement DockerCredentialInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.DockerCredentialInterface = &DockerCredentialInterfaceMock{}

// DockerCredentialInterfaceMock is a mock implementation of DockerCredentialInterface.
//
//     func TestSomethingThatUsesDockerCredentialInterface(t *testing.T) {
//
//         // make and configure a mocked DockerCredentialInterface
//         mockedDockerCredentialInterface := &DockerCredentialInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v3.DockerCredentialHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v3.DockerCredentialLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.DockerCredentialHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.DockerCredentialLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.DockerCredentialHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.DockerCredentialLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.DockerCredentialHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.DockerCredentialLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.DockerCredentialController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.DockerCredential) (*v3.DockerCredential, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.DockerCredential, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.DockerCredential, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.DockerCredentialList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.DockerCredential) (*v3.DockerCredential, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedDockerCredentialInterface in code that requires DockerCredentialInterface
//         // and then make assertions.
//
//     }
type DockerCredentialInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v3.DockerCredentialHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v3.DockerCredentialLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.DockerCredentialHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.DockerCredentialLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.DockerCredentialHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.DockerCredentialLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.DockerCredentialHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.DockerCredentialLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.DockerCredentialController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.DockerCredential) (*v3.DockerCredential, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.DockerCredential, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.DockerCredential, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.DockerCredentialList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.DockerCredential) (*v3.DockerCredential, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.DockerCredentialHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.DockerCredentialLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.DockerCredentialHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.DockerCredentialLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.DockerCredentialHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.DockerCredentialLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.DockerCredentialHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.DockerCredentialLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.DockerCredential
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.DockerCredential
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *DockerCredentialInterfaceMock) AddClusterScopedFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v3.DockerCredentialHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("DockerCredentialInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but DockerCredentialInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.DockerCredentialHandlerFunc
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockDockerCredentialInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockDockerCredentialInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(enabled, feat, ctx, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedDockerCredentialInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *DockerCredentialInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.DockerCredentialHandlerFunc
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.DockerCredentialHandlerFunc
	}
	lockDockerCredentialInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockDockerCredentialInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *DockerCredentialInterfaceMock) AddClusterScopedFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v3.DockerCredentialLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("DockerCredentialInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but DockerCredentialInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.DockerCredentialLifecycle
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockDockerCredentialInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockDockerCredentialInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(enabled, feat, ctx, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedDockerCredentialInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *DockerCredentialInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.DockerCredentialLifecycle
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.DockerCredentialLifecycle
	}
	lockDockerCredentialInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockDockerCredentialInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *DockerCredentialInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.DockerCredentialHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("DockerCredentialInterfaceMock.AddClusterScopedHandlerFunc: method is nil but DockerCredentialInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.DockerCredentialHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockDockerCredentialInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockDockerCredentialInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedDockerCredentialInterface.AddClusterScopedHandlerCalls())
func (mock *DockerCredentialInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.DockerCredentialHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.DockerCredentialHandlerFunc
	}
	lockDockerCredentialInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockDockerCredentialInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *DockerCredentialInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.DockerCredentialLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("DockerCredentialInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but DockerCredentialInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.DockerCredentialLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockDockerCredentialInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockDockerCredentialInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedDockerCredentialInterface.AddClusterScopedLifecycleCalls())
func (mock *DockerCredentialInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.DockerCredentialLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.DockerCredentialLifecycle
	}
	lockDockerCredentialInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockDockerCredentialInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *DockerCredentialInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v3.DockerCredentialHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("DockerCredentialInterfaceMock.AddFeatureHandlerFunc: method is nil but DockerCredentialInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.DockerCredentialHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockDockerCredentialInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockDockerCredentialInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedDockerCredentialInterface.AddFeatureHandlerCalls())
func (mock *DockerCredentialInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v3.DockerCredentialHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v3.DockerCredentialHandlerFunc
	}
	lockDockerCredentialInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockDockerCredentialInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *DockerCredentialInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v3.DockerCredentialLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("DockerCredentialInterfaceMock.AddFeatureLifecycleFunc: method is nil but DockerCredentialInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.DockerCredentialLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockDockerCredentialInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockDockerCredentialInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedDockerCredentialInterface.AddFeatureLifecycleCalls())
func (mock *DockerCredentialInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v3.DockerCredentialLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v3.DockerCredentialLifecycle
	}
	lockDockerCredentialInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockDockerCredentialInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *DockerCredentialInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.DockerCredentialHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("DockerCredentialInterfaceMock.AddHandlerFunc: method is nil but DockerCredentialInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.DockerCredentialHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockDockerCredentialInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockDockerCredentialInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedDockerCredentialInterface.AddHandlerCalls())
func (mock *DockerCredentialInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.DockerCredentialHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.DockerCredentialHandlerFunc
	}
	lockDockerCredentialInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockDockerCredentialInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *DockerCredentialInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.DockerCredentialLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("DockerCredentialInterfaceMock.AddLifecycleFunc: method is nil but DockerCredentialInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.DockerCredentialLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockDockerCredentialInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockDockerCredentialInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedDockerCredentialInterface.AddLifecycleCalls())
func (mock *DockerCredentialInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.DockerCredentialLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.DockerCredentialLifecycle
	}
	lockDockerCredentialInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockDockerCredentialInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *DockerCredentialInterfaceMock) Controller() v3.DockerCredentialController {
	if mock.ControllerFunc == nil {
		panic("DockerCredentialInterfaceMock.ControllerFunc: method is nil but DockerCredentialInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockDockerCredentialInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockDockerCredentialInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedDockerCredentialInterface.ControllerCalls())
func (mock *DockerCredentialInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockDockerCredentialInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockDockerCredentialInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *DockerCredentialInterfaceMock) Create(in1 *v3.DockerCredential) (*v3.DockerCredential, error) {
	if mock.CreateFunc == nil {
		panic("DockerCredentialInterfaceMock.CreateFunc: method is nil but DockerCredentialInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.DockerCredential
	}{
		In1: in1,
	}
	lockDockerCredentialInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockDockerCredentialInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedDockerCredentialInterface.CreateCalls())
func (mock *DockerCredentialInterfaceMock) CreateCalls() []struct {
	In1 *v3.DockerCredential
} {
	var calls []struct {
		In1 *v3.DockerCredential
	}
	lockDockerCredentialInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockDockerCredentialInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *DockerCredentialInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("DockerCredentialInterfaceMock.DeleteFunc: method is nil but DockerCredentialInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockDockerCredentialInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockDockerCredentialInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedDockerCredentialInterface.DeleteCalls())
func (mock *DockerCredentialInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockDockerCredentialInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockDockerCredentialInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *DockerCredentialInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("DockerCredentialInterfaceMock.DeleteCollectionFunc: method is nil but DockerCredentialInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockDockerCredentialInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockDockerCredentialInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedDockerCredentialInterface.DeleteCollectionCalls())
func (mock *DockerCredentialInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockDockerCredentialInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockDockerCredentialInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *DockerCredentialInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("DockerCredentialInterfaceMock.DeleteNamespacedFunc: method is nil but DockerCredentialInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockDockerCredentialInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockDockerCredentialInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedDockerCredentialInterface.DeleteNamespacedCalls())
func (mock *DockerCredentialInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockDockerCredentialInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockDockerCredentialInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *DockerCredentialInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.DockerCredential, error) {
	if mock.GetFunc == nil {
		panic("DockerCredentialInterfaceMock.GetFunc: method is nil but DockerCredentialInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockDockerCredentialInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockDockerCredentialInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedDockerCredentialInterface.GetCalls())
func (mock *DockerCredentialInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockDockerCredentialInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockDockerCredentialInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *DockerCredentialInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.DockerCredential, error) {
	if mock.GetNamespacedFunc == nil {
		panic("DockerCredentialInterfaceMock.GetNamespacedFunc: method is nil but DockerCredentialInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockDockerCredentialInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockDockerCredentialInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedDockerCredentialInterface.GetNamespacedCalls())
func (mock *DockerCredentialInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockDockerCredentialInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockDockerCredentialInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DockerCredentialInterfaceMock) List(opts v1.ListOptions) (*v3.DockerCredentialList, error) {
	if mock.ListFunc == nil {
		panic("DockerCredentialInterfaceMock.ListFunc: method is nil but DockerCredentialInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockDockerCredentialInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockDockerCredentialInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedDockerCredentialInterface.ListCalls())
func (mock *DockerCredentialInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockDockerCredentialInterfaceMockList.RLock()
	calls = mock.calls.List
	lockDockerCredentialInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *DockerCredentialInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("DockerCredentialInterfaceMock.ObjectClientFunc: method is nil but DockerCredentialInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockDockerCredentialInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockDockerCredentialInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedDockerCredentialInterface.ObjectClientCalls())
func (mock *DockerCredentialInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockDockerCredentialInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockDockerCredentialInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *DockerCredentialInterfaceMock) Update(in1 *v3.DockerCredential) (*v3.DockerCredential, error) {
	if mock.UpdateFunc == nil {
		panic("DockerCredentialInterfaceMock.UpdateFunc: method is nil but DockerCredentialInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.DockerCredential
	}{
		In1: in1,
	}
	lockDockerCredentialInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockDockerCredentialInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedDockerCredentialInterface.UpdateCalls())
func (mock *DockerCredentialInterfaceMock) UpdateCalls() []struct {
	In1 *v3.DockerCredential
} {
	var calls []struct {
		In1 *v3.DockerCredential
	}
	lockDockerCredentialInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockDockerCredentialInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *DockerCredentialInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("DockerCredentialInterfaceMock.WatchFunc: method is nil but DockerCredentialInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockDockerCredentialInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockDockerCredentialInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedDockerCredentialInterface.WatchCalls())
func (mock *DockerCredentialInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockDockerCredentialInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockDockerCredentialInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockDockerCredentialsGetterMockDockerCredentials sync.RWMutex
)

// Ensure, that DockerCredentialsGetterMock does implement DockerCredentialsGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.DockerCredentialsGetter = &DockerCredentialsGetterMock{}

// DockerCredentialsGetterMock is a mock implementation of DockerCredentialsGetter.
//
//     func TestSomethingThatUsesDockerCredentialsGetter(t *testing.T) {
//
//         // make and configure a mocked DockerCredentialsGetter
//         mockedDockerCredentialsGetter := &DockerCredentialsGetterMock{
//             DockerCredentialsFunc: func(namespace string) v3.DockerCredentialInterface {
// 	               panic("mock out the DockerCredentials method")
//             },
//         }
//
//         // use mockedDockerCredentialsGetter in code that requires DockerCredentialsGetter
//         // and then make assertions.
//
//     }
type DockerCredentialsGetterMock struct {
	// DockerCredentialsFunc mocks the DockerCredentials method.
	DockerCredentialsFunc func(namespace string) v3.DockerCredentialInterface

	// calls tracks calls to the methods.
	calls struct {
		// DockerCredentials holds details about calls to the DockerCredentials method.
		DockerCredentials []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// DockerCredentials calls DockerCredentialsFunc.
func (mock *DockerCredentialsGetterMock) DockerCredentials(namespace string) v3.DockerCredentialInterface {
	if mock.DockerCredentialsFunc == nil {
		panic("DockerCredentialsGetterMock.DockerCredentialsFunc: method is nil but DockerCredentialsGetter.DockerCredentials was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockDockerCredentialsGetterMockDockerCredentials.Lock()
	mock.calls.DockerCredentials = append(mock.calls.DockerCredentials, callInfo)
	lockDockerCredentialsGetterMockDockerCredentials.Unlock()
	return mock.DockerCredentialsFunc(namespace)
}

// DockerCredentialsCalls gets all the calls that were made to DockerCredentials.
// Check the length with:
//     len(mockedDockerCredentialsGetter.DockerCredentialsCalls())
func (mock *DockerCredentialsGetterMock) DockerCredentialsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockDockerCredentialsGetterMockDockerCredentials.RLock()
	calls = mock.calls.DockerCredentials
	lockDockerCredentialsGetterMockDockerCredentials.RUnlock()
	return calls
}
