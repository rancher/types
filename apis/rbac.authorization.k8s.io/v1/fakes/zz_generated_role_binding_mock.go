// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1a "github.com/rancher/types/apis/rbac.authorization.k8s.io/v1"
	v1 "k8s.io/api/rbac/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockRoleBindingListerMockGet  sync.RWMutex
	lockRoleBindingListerMockList sync.RWMutex
)

// Ensure, that RoleBindingListerMock does implement RoleBindingLister.
// If this is not the case, regenerate this file with moq.
var _ v1a.RoleBindingLister = &RoleBindingListerMock{}

// RoleBindingListerMock is a mock implementation of RoleBindingLister.
//
//     func TestSomethingThatUsesRoleBindingLister(t *testing.T) {
//
//         // make and configure a mocked RoleBindingLister
//         mockedRoleBindingLister := &RoleBindingListerMock{
//             GetFunc: func(namespace string, name string) (*v1.RoleBinding, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1.RoleBinding, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedRoleBindingLister in code that requires RoleBindingLister
//         // and then make assertions.
//
//     }
type RoleBindingListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1.RoleBinding, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1.RoleBinding, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *RoleBindingListerMock) Get(namespace string, name string) (*v1.RoleBinding, error) {
	if mock.GetFunc == nil {
		panic("RoleBindingListerMock.GetFunc: method is nil but RoleBindingLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockRoleBindingListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRoleBindingListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRoleBindingLister.GetCalls())
func (mock *RoleBindingListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockRoleBindingListerMockGet.RLock()
	calls = mock.calls.Get
	lockRoleBindingListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RoleBindingListerMock) List(namespace string, selector labels.Selector) ([]*v1.RoleBinding, error) {
	if mock.ListFunc == nil {
		panic("RoleBindingListerMock.ListFunc: method is nil but RoleBindingLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockRoleBindingListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRoleBindingListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRoleBindingLister.ListCalls())
func (mock *RoleBindingListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockRoleBindingListerMockList.RLock()
	calls = mock.calls.List
	lockRoleBindingListerMockList.RUnlock()
	return calls
}

var (
	lockRoleBindingControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockRoleBindingControllerMockAddClusterScopedHandler        sync.RWMutex
	lockRoleBindingControllerMockAddFeatureHandler              sync.RWMutex
	lockRoleBindingControllerMockAddHandler                     sync.RWMutex
	lockRoleBindingControllerMockEnqueue                        sync.RWMutex
	lockRoleBindingControllerMockGeneric                        sync.RWMutex
	lockRoleBindingControllerMockInformer                       sync.RWMutex
	lockRoleBindingControllerMockLister                         sync.RWMutex
	lockRoleBindingControllerMockStart                          sync.RWMutex
	lockRoleBindingControllerMockSync                           sync.RWMutex
)

// Ensure, that RoleBindingControllerMock does implement RoleBindingController.
// If this is not the case, regenerate this file with moq.
var _ v1a.RoleBindingController = &RoleBindingControllerMock{}

// RoleBindingControllerMock is a mock implementation of RoleBindingController.
//
//     func TestSomethingThatUsesRoleBindingController(t *testing.T) {
//
//         // make and configure a mocked RoleBindingController
//         mockedRoleBindingController := &RoleBindingControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v1a.RoleBindingHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1a.RoleBindingHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.RoleBindingHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1a.RoleBindingHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1a.RoleBindingLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedRoleBindingController in code that requires RoleBindingController
//         // and then make assertions.
//
//     }
type RoleBindingControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v1a.RoleBindingHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1a.RoleBindingHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.RoleBindingHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1a.RoleBindingHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1a.RoleBindingLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1a.RoleBindingHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1a.RoleBindingHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.RoleBindingHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1a.RoleBindingHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *RoleBindingControllerMock) AddClusterScopedFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, handler v1a.RoleBindingHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("RoleBindingControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but RoleBindingController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.RoleBindingHandlerFunc
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockRoleBindingControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockRoleBindingControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(enabled, feat, ctx, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedRoleBindingController.AddClusterScopedFeatureHandlerCalls())
func (mock *RoleBindingControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1a.RoleBindingHandlerFunc
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.RoleBindingHandlerFunc
	}
	lockRoleBindingControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockRoleBindingControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *RoleBindingControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1a.RoleBindingHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("RoleBindingControllerMock.AddClusterScopedHandlerFunc: method is nil but RoleBindingController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.RoleBindingHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockRoleBindingControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockRoleBindingControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedRoleBindingController.AddClusterScopedHandlerCalls())
func (mock *RoleBindingControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1a.RoleBindingHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.RoleBindingHandlerFunc
	}
	lockRoleBindingControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockRoleBindingControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *RoleBindingControllerMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.RoleBindingHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("RoleBindingControllerMock.AddFeatureHandlerFunc: method is nil but RoleBindingController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.RoleBindingHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockRoleBindingControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockRoleBindingControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedRoleBindingController.AddFeatureHandlerCalls())
func (mock *RoleBindingControllerMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1a.RoleBindingHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.RoleBindingHandlerFunc
	}
	lockRoleBindingControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockRoleBindingControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *RoleBindingControllerMock) AddHandler(ctx context.Context, name string, handler v1a.RoleBindingHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("RoleBindingControllerMock.AddHandlerFunc: method is nil but RoleBindingController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1a.RoleBindingHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockRoleBindingControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockRoleBindingControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedRoleBindingController.AddHandlerCalls())
func (mock *RoleBindingControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1a.RoleBindingHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1a.RoleBindingHandlerFunc
	}
	lockRoleBindingControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockRoleBindingControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *RoleBindingControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("RoleBindingControllerMock.EnqueueFunc: method is nil but RoleBindingController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockRoleBindingControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockRoleBindingControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedRoleBindingController.EnqueueCalls())
func (mock *RoleBindingControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockRoleBindingControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockRoleBindingControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *RoleBindingControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("RoleBindingControllerMock.GenericFunc: method is nil but RoleBindingController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockRoleBindingControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockRoleBindingControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedRoleBindingController.GenericCalls())
func (mock *RoleBindingControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockRoleBindingControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockRoleBindingControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *RoleBindingControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("RoleBindingControllerMock.InformerFunc: method is nil but RoleBindingController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockRoleBindingControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockRoleBindingControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedRoleBindingController.InformerCalls())
func (mock *RoleBindingControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockRoleBindingControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockRoleBindingControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *RoleBindingControllerMock) Lister() v1a.RoleBindingLister {
	if mock.ListerFunc == nil {
		panic("RoleBindingControllerMock.ListerFunc: method is nil but RoleBindingController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockRoleBindingControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockRoleBindingControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedRoleBindingController.ListerCalls())
func (mock *RoleBindingControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockRoleBindingControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockRoleBindingControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *RoleBindingControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("RoleBindingControllerMock.StartFunc: method is nil but RoleBindingController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockRoleBindingControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockRoleBindingControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedRoleBindingController.StartCalls())
func (mock *RoleBindingControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockRoleBindingControllerMockStart.RLock()
	calls = mock.calls.Start
	lockRoleBindingControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *RoleBindingControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("RoleBindingControllerMock.SyncFunc: method is nil but RoleBindingController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockRoleBindingControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockRoleBindingControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedRoleBindingController.SyncCalls())
func (mock *RoleBindingControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockRoleBindingControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockRoleBindingControllerMockSync.RUnlock()
	return calls
}

var (
	lockRoleBindingInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockRoleBindingInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockRoleBindingInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockRoleBindingInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockRoleBindingInterfaceMockAddFeatureHandler                sync.RWMutex
	lockRoleBindingInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockRoleBindingInterfaceMockAddHandler                       sync.RWMutex
	lockRoleBindingInterfaceMockAddLifecycle                     sync.RWMutex
	lockRoleBindingInterfaceMockController                       sync.RWMutex
	lockRoleBindingInterfaceMockCreate                           sync.RWMutex
	lockRoleBindingInterfaceMockDelete                           sync.RWMutex
	lockRoleBindingInterfaceMockDeleteCollection                 sync.RWMutex
	lockRoleBindingInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockRoleBindingInterfaceMockGet                              sync.RWMutex
	lockRoleBindingInterfaceMockGetNamespaced                    sync.RWMutex
	lockRoleBindingInterfaceMockList                             sync.RWMutex
	lockRoleBindingInterfaceMockObjectClient                     sync.RWMutex
	lockRoleBindingInterfaceMockUpdate                           sync.RWMutex
	lockRoleBindingInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that RoleBindingInterfaceMock does implement RoleBindingInterface.
// If this is not the case, regenerate this file with moq.
var _ v1a.RoleBindingInterface = &RoleBindingInterfaceMock{}

// RoleBindingInterfaceMock is a mock implementation of RoleBindingInterface.
//
//     func TestSomethingThatUsesRoleBindingInterface(t *testing.T) {
//
//         // make and configure a mocked RoleBindingInterface
//         mockedRoleBindingInterface := &RoleBindingInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v1a.RoleBindingHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v1a.RoleBindingLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1a.RoleBindingHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1a.RoleBindingLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.RoleBindingHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.RoleBindingLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1a.RoleBindingHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1a.RoleBindingLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1a.RoleBindingController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1.RoleBinding) (*v1.RoleBinding, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1b.GetOptions) (*v1.RoleBinding, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1b.GetOptions) (*v1.RoleBinding, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.RoleBindingList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1.RoleBinding) (*v1.RoleBinding, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedRoleBindingInterface in code that requires RoleBindingInterface
//         // and then make assertions.
//
//     }
type RoleBindingInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v1a.RoleBindingHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v1a.RoleBindingLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1a.RoleBindingHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1a.RoleBindingLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.RoleBindingHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.RoleBindingLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1a.RoleBindingHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1a.RoleBindingLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1a.RoleBindingController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1.RoleBinding) (*v1.RoleBinding, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1b.GetOptions) (*v1.RoleBinding, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1b.GetOptions) (*v1.RoleBinding, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.RoleBindingList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1.RoleBinding) (*v1.RoleBinding, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1a.RoleBindingHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.RoleBindingLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1a.RoleBindingHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.RoleBindingLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.RoleBindingHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Enabled is the enabled argument value.
			Enabled func(string) bool
			// Feat is the feat argument value.
			Feat string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.RoleBindingLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.RoleBindingHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.RoleBindingLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1.RoleBinding
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1b.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1b.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1.RoleBinding
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *RoleBindingInterfaceMock) AddClusterScopedFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, sync v1a.RoleBindingHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("RoleBindingInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but RoleBindingInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.RoleBindingHandlerFunc
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockRoleBindingInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockRoleBindingInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(enabled, feat, ctx, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedRoleBindingInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *RoleBindingInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1a.RoleBindingHandlerFunc
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.RoleBindingHandlerFunc
	}
	lockRoleBindingInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockRoleBindingInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *RoleBindingInterfaceMock) AddClusterScopedFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, clusterName string, lifecycle v1a.RoleBindingLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("RoleBindingInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but RoleBindingInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.RoleBindingLifecycle
	}{
		Enabled:     enabled,
		Feat:        feat,
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockRoleBindingInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockRoleBindingInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(enabled, feat, ctx, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedRoleBindingInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *RoleBindingInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Enabled     func(string) bool
	Feat        string
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1a.RoleBindingLifecycle
} {
	var calls []struct {
		Enabled     func(string) bool
		Feat        string
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.RoleBindingLifecycle
	}
	lockRoleBindingInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockRoleBindingInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *RoleBindingInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1a.RoleBindingHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("RoleBindingInterfaceMock.AddClusterScopedHandlerFunc: method is nil but RoleBindingInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.RoleBindingHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockRoleBindingInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockRoleBindingInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedRoleBindingInterface.AddClusterScopedHandlerCalls())
func (mock *RoleBindingInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1a.RoleBindingHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.RoleBindingHandlerFunc
	}
	lockRoleBindingInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockRoleBindingInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *RoleBindingInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1a.RoleBindingLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("RoleBindingInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but RoleBindingInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.RoleBindingLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockRoleBindingInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockRoleBindingInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedRoleBindingInterface.AddClusterScopedLifecycleCalls())
func (mock *RoleBindingInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1a.RoleBindingLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.RoleBindingLifecycle
	}
	lockRoleBindingInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockRoleBindingInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *RoleBindingInterfaceMock) AddFeatureHandler(enabled func(string) bool, feat string, ctx context.Context, name string, sync v1a.RoleBindingHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("RoleBindingInterfaceMock.AddFeatureHandlerFunc: method is nil but RoleBindingInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.RoleBindingHandlerFunc
	}{
		Enabled: enabled,
		Feat:    feat,
		Ctx:     ctx,
		Name:    name,
		Sync:    sync,
	}
	lockRoleBindingInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockRoleBindingInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(enabled, feat, ctx, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedRoleBindingInterface.AddFeatureHandlerCalls())
func (mock *RoleBindingInterfaceMock) AddFeatureHandlerCalls() []struct {
	Enabled func(string) bool
	Feat    string
	Ctx     context.Context
	Name    string
	Sync    v1a.RoleBindingHandlerFunc
} {
	var calls []struct {
		Enabled func(string) bool
		Feat    string
		Ctx     context.Context
		Name    string
		Sync    v1a.RoleBindingHandlerFunc
	}
	lockRoleBindingInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockRoleBindingInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *RoleBindingInterfaceMock) AddFeatureLifecycle(enabled func(string) bool, feat string, ctx context.Context, name string, lifecycle v1a.RoleBindingLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("RoleBindingInterfaceMock.AddFeatureLifecycleFunc: method is nil but RoleBindingInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1a.RoleBindingLifecycle
	}{
		Enabled:   enabled,
		Feat:      feat,
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockRoleBindingInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockRoleBindingInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(enabled, feat, ctx, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedRoleBindingInterface.AddFeatureLifecycleCalls())
func (mock *RoleBindingInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Enabled   func(string) bool
	Feat      string
	Ctx       context.Context
	Name      string
	Lifecycle v1a.RoleBindingLifecycle
} {
	var calls []struct {
		Enabled   func(string) bool
		Feat      string
		Ctx       context.Context
		Name      string
		Lifecycle v1a.RoleBindingLifecycle
	}
	lockRoleBindingInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockRoleBindingInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *RoleBindingInterfaceMock) AddHandler(ctx context.Context, name string, sync v1a.RoleBindingHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("RoleBindingInterfaceMock.AddHandlerFunc: method is nil but RoleBindingInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1a.RoleBindingHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockRoleBindingInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockRoleBindingInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedRoleBindingInterface.AddHandlerCalls())
func (mock *RoleBindingInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1a.RoleBindingHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1a.RoleBindingHandlerFunc
	}
	lockRoleBindingInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockRoleBindingInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *RoleBindingInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1a.RoleBindingLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("RoleBindingInterfaceMock.AddLifecycleFunc: method is nil but RoleBindingInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.RoleBindingLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockRoleBindingInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockRoleBindingInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedRoleBindingInterface.AddLifecycleCalls())
func (mock *RoleBindingInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1a.RoleBindingLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.RoleBindingLifecycle
	}
	lockRoleBindingInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockRoleBindingInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *RoleBindingInterfaceMock) Controller() v1a.RoleBindingController {
	if mock.ControllerFunc == nil {
		panic("RoleBindingInterfaceMock.ControllerFunc: method is nil but RoleBindingInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockRoleBindingInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockRoleBindingInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedRoleBindingInterface.ControllerCalls())
func (mock *RoleBindingInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockRoleBindingInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockRoleBindingInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *RoleBindingInterfaceMock) Create(in1 *v1.RoleBinding) (*v1.RoleBinding, error) {
	if mock.CreateFunc == nil {
		panic("RoleBindingInterfaceMock.CreateFunc: method is nil but RoleBindingInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1.RoleBinding
	}{
		In1: in1,
	}
	lockRoleBindingInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockRoleBindingInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRoleBindingInterface.CreateCalls())
func (mock *RoleBindingInterfaceMock) CreateCalls() []struct {
	In1 *v1.RoleBinding
} {
	var calls []struct {
		In1 *v1.RoleBinding
	}
	lockRoleBindingInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockRoleBindingInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RoleBindingInterfaceMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("RoleBindingInterfaceMock.DeleteFunc: method is nil but RoleBindingInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockRoleBindingInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockRoleBindingInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRoleBindingInterface.DeleteCalls())
func (mock *RoleBindingInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockRoleBindingInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockRoleBindingInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *RoleBindingInterfaceMock) DeleteCollection(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("RoleBindingInterfaceMock.DeleteCollectionFunc: method is nil but RoleBindingInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockRoleBindingInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockRoleBindingInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedRoleBindingInterface.DeleteCollectionCalls())
func (mock *RoleBindingInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1b.DeleteOptions
	ListOpts   v1b.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}
	lockRoleBindingInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockRoleBindingInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *RoleBindingInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("RoleBindingInterfaceMock.DeleteNamespacedFunc: method is nil but RoleBindingInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockRoleBindingInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockRoleBindingInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedRoleBindingInterface.DeleteNamespacedCalls())
func (mock *RoleBindingInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockRoleBindingInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockRoleBindingInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RoleBindingInterfaceMock) Get(name string, opts v1b.GetOptions) (*v1.RoleBinding, error) {
	if mock.GetFunc == nil {
		panic("RoleBindingInterfaceMock.GetFunc: method is nil but RoleBindingInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1b.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockRoleBindingInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRoleBindingInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRoleBindingInterface.GetCalls())
func (mock *RoleBindingInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1b.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1b.GetOptions
	}
	lockRoleBindingInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockRoleBindingInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *RoleBindingInterfaceMock) GetNamespaced(namespace string, name string, opts v1b.GetOptions) (*v1.RoleBinding, error) {
	if mock.GetNamespacedFunc == nil {
		panic("RoleBindingInterfaceMock.GetNamespacedFunc: method is nil but RoleBindingInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockRoleBindingInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockRoleBindingInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedRoleBindingInterface.GetNamespacedCalls())
func (mock *RoleBindingInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}
	lockRoleBindingInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockRoleBindingInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RoleBindingInterfaceMock) List(opts v1b.ListOptions) (*v1a.RoleBindingList, error) {
	if mock.ListFunc == nil {
		panic("RoleBindingInterfaceMock.ListFunc: method is nil but RoleBindingInterface.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockRoleBindingInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRoleBindingInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRoleBindingInterface.ListCalls())
func (mock *RoleBindingInterfaceMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockRoleBindingInterfaceMockList.RLock()
	calls = mock.calls.List
	lockRoleBindingInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *RoleBindingInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("RoleBindingInterfaceMock.ObjectClientFunc: method is nil but RoleBindingInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockRoleBindingInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockRoleBindingInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedRoleBindingInterface.ObjectClientCalls())
func (mock *RoleBindingInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockRoleBindingInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockRoleBindingInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RoleBindingInterfaceMock) Update(in1 *v1.RoleBinding) (*v1.RoleBinding, error) {
	if mock.UpdateFunc == nil {
		panic("RoleBindingInterfaceMock.UpdateFunc: method is nil but RoleBindingInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1.RoleBinding
	}{
		In1: in1,
	}
	lockRoleBindingInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockRoleBindingInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRoleBindingInterface.UpdateCalls())
func (mock *RoleBindingInterfaceMock) UpdateCalls() []struct {
	In1 *v1.RoleBinding
} {
	var calls []struct {
		In1 *v1.RoleBinding
	}
	lockRoleBindingInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockRoleBindingInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *RoleBindingInterfaceMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("RoleBindingInterfaceMock.WatchFunc: method is nil but RoleBindingInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockRoleBindingInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockRoleBindingInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedRoleBindingInterface.WatchCalls())
func (mock *RoleBindingInterfaceMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockRoleBindingInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockRoleBindingInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockRoleBindingsGetterMockRoleBindings sync.RWMutex
)

// Ensure, that RoleBindingsGetterMock does implement RoleBindingsGetter.
// If this is not the case, regenerate this file with moq.
var _ v1a.RoleBindingsGetter = &RoleBindingsGetterMock{}

// RoleBindingsGetterMock is a mock implementation of RoleBindingsGetter.
//
//     func TestSomethingThatUsesRoleBindingsGetter(t *testing.T) {
//
//         // make and configure a mocked RoleBindingsGetter
//         mockedRoleBindingsGetter := &RoleBindingsGetterMock{
//             RoleBindingsFunc: func(namespace string) v1a.RoleBindingInterface {
// 	               panic("mock out the RoleBindings method")
//             },
//         }
//
//         // use mockedRoleBindingsGetter in code that requires RoleBindingsGetter
//         // and then make assertions.
//
//     }
type RoleBindingsGetterMock struct {
	// RoleBindingsFunc mocks the RoleBindings method.
	RoleBindingsFunc func(namespace string) v1a.RoleBindingInterface

	// calls tracks calls to the methods.
	calls struct {
		// RoleBindings holds details about calls to the RoleBindings method.
		RoleBindings []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// RoleBindings calls RoleBindingsFunc.
func (mock *RoleBindingsGetterMock) RoleBindings(namespace string) v1a.RoleBindingInterface {
	if mock.RoleBindingsFunc == nil {
		panic("RoleBindingsGetterMock.RoleBindingsFunc: method is nil but RoleBindingsGetter.RoleBindings was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockRoleBindingsGetterMockRoleBindings.Lock()
	mock.calls.RoleBindings = append(mock.calls.RoleBindings, callInfo)
	lockRoleBindingsGetterMockRoleBindings.Unlock()
	return mock.RoleBindingsFunc(namespace)
}

// RoleBindingsCalls gets all the calls that were made to RoleBindings.
// Check the length with:
//     len(mockedRoleBindingsGetter.RoleBindingsCalls())
func (mock *RoleBindingsGetterMock) RoleBindingsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockRoleBindingsGetterMockRoleBindings.RLock()
	calls = mock.calls.RoleBindings
	lockRoleBindingsGetterMockRoleBindings.RUnlock()
	return calls
}
